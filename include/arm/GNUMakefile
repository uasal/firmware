# Hey Emacs, this is a -*- makefile -*-
#
# based on the makefile written by Eric B. Weddington, Jörg Wunsch, Martin Thomas, et al.
# Released to the Public Domain
# Please read the make user manual!
#
#
# On command line:
#
# make all = Make software.
#
# make clean = Clean out built project files.
#
# make program = Download the hex file to the device
#
#
# to install the compiler, download the lastest from:
# https://github.com/xpack-dev-tools/arm-none-eabi-gcc-xpack/releases/
# and unpack it to $HOME/.local
# then symlink the versioned folder to a base/generic 'arm-none-eabi"
#

INCLUDE_ARCH = $(HOME)/.local/arm-none-eabi/include
LIB_ARCH = $(HOME)/.local/arm-none-eabi/lib
SHELL = sh
CC = $(HOME)/.local/arm-none-eabi/bin/arm-none-eabi-gcc
CPP = $(HOME)/.local/arm-none-eabi/bin/arm-none-eabi-g++
AR = $(HOME)/.local/arm-none-eabi/bin/arm-none-eabi-ar
OBJCOPY = $(HOME)/.local/arm-none-eabi/bin/arm-none-eabi-objcopy
OBJDUMP = $(HOME)/.local/arm-none-eabi/bin/arm-none-eabi-objdump
SIZE = $(HOME)/.local/arm-none-eabi/bin/arm-none-eabi-size
NM = $(HOME)/.local/arm-none-eabi/bin/arm-none-eabi-nm
CROSS_COMPILE ?= /.local/arm-none-eabi/bin/arm-none-eabi-

#~ INCLUDE_ARCH = /usr/arm-none-eabi/arm-none-eabi/include
#~ INCLUDE_LOCAL = $(HOME)/projects/zonge/firmware/include
#~ LIB_ARCH = /usr/arm-none-eabi/arm-none-eabi/lib
#~ LIB_LOCAL = $(HOME)/projects/include
#~ SHELL = sh
#~ CC = /usr/bin/arm-none-eabi-gcc
#~ CPP = /usr/bin/arm-none-eabi-g++
#~ AR = /usr/bin/arm-none-eabi-ar
#~ OBJCOPY = /usr/bin/arm-none-eabi-objcopy
#~ OBJDUMP = /usr/bin/arm-none-eabi-objdump
#~ SIZE = /usr/bin/arm-none-eabi-size
#~ NM = /usr/bin/arm-none-eabi-nm

#$(HOME) INCLUDE_ARCH = /usr/local/arm-elf/include
#$(HOME) INCLUDE_LOCAL = $(HOME)/projects/zonge/firmware/include
#$(HOME) LIB_ARCH = /usr/local/arm-elf/lib
#$(HOME) LIB_LOCAL = $(HOME)/projects/include
#$(HOME) SHELL = sh
#$(HOME) CC = /usr/local/bin/arm-elf-gcc
#$(HOME) CPP = /usr/local/bin/arm-elf-g++
#$(HOME) AR = /usr/local/bin/arm-elf-ar
#$(HOME) OBJCOPY = /usr/local/bin/arm-elf-objcopy
#$(HOME) OBJDUMP = /usr/local/bin/arm-elf-objdump
#$(HOME) SIZE = /usr/local/bin/arm-elf-size
#$(HOME) NM = /usr/local/bin/arm-elf-nm

REMOVE = rm -f
COPY = cp
OOCD = openocd
LPC21ISP = lpc21isp
JTAG = /usr$(HOME)/bin/jtag

vpath %.h $(INCLUDE_ARCH):$(INCLUDE_LOCAL)
vpath %.hpp $(INCLUDE_ARCH):$(INCLUDE_LOCAL)
vpath %.c $(LIB_ARCH):$(LIB_LOCAL)
vpath %.cpp $(LIB_ARCH):$(LIB_LOCAL)
vpath %.o $(LIB_ARCH):$(LIB_LOCAL)
vpath %.a $(LIB_ARCH):$(LIB_LOCAL):$(LIB_LOCAL)/arm

#GITVERSION:= $(shell expr 1 + `hg -q parents --template '{rev}'`)
GITVERSION:= $(shell git rev-parse HEAD)
BUILDNUM:= $(shell bquery $(TARGET))

# MCU name and submodel
#~ MCU      = arm7tdmi
THUMB    = -mthumb
#THUMB_IW = -mthumb-interwork

## Create ROM-Image (final)
#RUN_MODE=ROM_RUN
## Create RAM-Image (debugging)
#RUN_MODE=RAM_RUN

## not used in this example:
## Exception-Vector placement only supported for "ROM_RUN"
## (placement settings ignored when using "RAM_RUN")
## - Exception vectors in ROM:
#VECTOR_LOCATION=VECTORS_IN_ROM
## - Exception vectors in RAM:
#VECTOR_LOCATION=VECTORS_IN_RAM

# Target file name (without extension).

# List C source files here. (C dependencies are automatically generated.)
# use file-extension c for "c-only"-files
#$(HOME) CSRC += $(INCLUDE_LOCAL)/arm/syscalls.c

# List C source files here which must be compiled in ARM-Mode.
# use file-extension c for "c-only"-files
#SRCARM += $(INCLUDE_LOCAL)/arm/irq.c

# List C++ source files here.
# use file-extension cpp for C++-files (use extension .cpp)
#CPPSRC += $(INCLUDE_LOCAL)/arm/syscalls.cpp
CPPSRC += $(TARGET).cpp

# List C++ source files here which must be compiled in ARM-Mode.
# use file-extension cpp for C++-files (use extension .cpp)
#CPPSRCARM += $(TARGET).cpp
CPPSRCARM +=

# List Assembler source files here.
# Make them always end in a capital .S.  Files ending in a lowercase .s
# will not be considered source files but generated files (assembler
# output from the compiler), and will be deleted upon "make clean"!
# Even though the DOS/Win* filesystem matches both .s and .S the same,
# it will preserve the spelling of the filenames, and gcc itself does
# care about how the name is spelled on its command-line.
ASRC +=

# List Assembler source files here which must be assembled in ARM-Mode..
ASRCARM += 

## Using the Atmel AT91_lib produces warning with
## the default warning-levels.
## yes - disable these warnings; no - keep default settings
#AT91LIBNOWARN = yes
#AT91LIBNOWARN = no

## Output format. (can be ihex or binary)
FORMAT = ihex
#FORMAT = binary

# Optimization level, can be [0, 1, 2, 3, s].
# 0 = turn off optimization. s = optimize for size.
# (Note: 3 is not always the best optimization level. See avr-libc FAQ.)
#OPT = s
#OPT = 0

# Debugging format.
# Native formats for AVR-GCC's -g are stabs [default], or dwarf-2.
# AVR (extended) COFF requires stabs, plus an avr-objcopy run.
#DEBUG = stabs
#~ DEBUG = dwarf-2

# List any extra directories to look for include files here.
#     Each directory must be seperated by a space.
EXTRAINCDIRS = $(INCLUDE_LOCAL) $(INCLUDE_ARCH)

# List any extra directories to look for library files here.
#     Each directory must be seperated by a space.
#EXTRA_LIBDIRS = ../arm7_efsl_0_2_4
EXTRA_LIBDIRS = $(LIB_LOCAL) $(LIB_ARCH)

# Compiler flag to set the C Standard level.
# c89   - "ANSI" C
# gnu89 - c89 plus GCC extensions
# c99   - ISO C99 standard (not yet fully implemented)
# gnu99 - c99 plus GCC extensions
CSTANDARD = -std=gnu11
CPPSTANDARD = -std=gnu++11

# Place -D or -U options for C here
CDEFS =  -D$(RUN_MODE)

# Place -I options here
CINCS =

# Place -D or -U options for ASM here
ADEFS =  -D$(RUN_MODE)

ifdef VECTOR_LOCATION
CDEFS += -D$(VECTOR_LOCATION)
ADEFS += -D$(VECTOR_LOCATION)
endif

# Compiler flags.
#  -g*:          generate debugging information
#  -O*:          optimization level
#  -f...:        tuning, see GCC manual and avr-libc documentation
#  -Wall...:     warning level
#  -Wa,...:      tell GCC to pass this to the assembler.
#    -adhlns...: create assembler listing
#
# Flags for C and C++ (arm-elf-gcc/arm-elf-g++)
#CFLAGS = -g$(DEBUG) -DGITVERSION="\"${GITVERSION}\"" -DBUILDNUM="\"${BUILDNUM}\""
CFLAGS += -DGITVERSION="\"${GITVERSION}\"" -DBUILDNUM="\"${BUILDNUM}\"" -static-libstdc++ 
# CFLAGS += -fsanitize=address -fsanitize=undefined
CFLAGS += $(CDEFS) $(CINCS)
CFLAGS += -O$(OPT)
CFLAGS += -fmessage-length=0
CFLAGS += -fsigned-char
CFLAGS += -fno-strict-aliasing -fno-use-linker-plugin
CFLAGS += -ffunction-sections -fdata-sections
# -mapcs-stack-check may or may not be a good idea.  google first...
#$(HOME) CFLAGS += -mapcs-stack-check -mapcs-frame
CFLAGS += -Wall
CFLAGS += -Wpointer-arith -Wswitch -Wno-psabi 
CFLAGS += -Wredundant-decls -Wreturn-type -Wshadow -Wunused
CFLAGS += -Wa,-adhlns=$(subst $(suffix $<),.lst,$<)
CFLAGS += $(patsubst %,-I%,$(EXTRAINCDIRS))
CFLAGS += -munaligned-access

# flags only for C
CONLYFLAGS +=  -Wimplicit -Wnested-externs
CONLYFLAGS += $(CSTANDARD)

ifneq ($(AT91LIBNOWARN),yes)
#AT91-lib warnings with:
CFLAGS += -Wcast-qual
#$(HOME) CONLYFLAGS += -Wmissing-prototypes
#$(HOME) CONLYFLAGS += -Wstrict-prototypes
#$(HOME) CONLYFLAGS += -Wmissing-declarations
endif

# flags only for C++ (arm-elf-g++)
CPPFLAGS += -fno-rtti -fno-exceptions $(CPPSTANDARD)
#__dso_handle symbol, __cxa_atexit and __cxa_finalize:
CFLAGS += -fno-use-cxa-atexit 

# Assembler flags.
#  -Wa,...:   tell GCC to pass this to the assembler.
#  -ahlms:    create listing
#  -g$(DEBUG):have the assembler create line number information
ASFLAGS = $(ADEFS) -fno-use-linker-plugin -Wa,-adhlns=$(<:.S=.lst),-g$(DEBUG)


#Additional libraries.

# Extra libraries
#    Each library-name must be seperated by a space.
#    To add libxyz.a, libabc.a and libefsl.a:
#    EXTRA_LIBS = xyz abc efsl
#EXTRA_LIBS = efsl

#Support for newlibc-lpc (file: libnewlibc-lpc.a)
#$(HOME) NEWLIBLPC = -lnewlib-lpc

MATH_LIB = -lm

# CPLUSPLUS_LIB = -lstdc++


# Linker flags.
#  -Wl,...:     tell GCC to pass this to linker.
#    -Map:      create map file
#    --cref:    add cross reference to  map file
#LDFLAGS = -nostartfiles
LDFLAGS += -Wl,-Map=$(TARGET).map,--cref,--gc-sections
LDFLAGS += --specs=nano.specs
LDFLAGS += -lc
LDFLAGS += $(NEWLIBLPC) $(MATH_LIB)
LDFLAGS += -lc -lgcc
LDFLAGS += $(CPLUSPLUS_LIB)
LDFLAGS += $(patsubst %,-L%,$(EXTRA_LIBDIRS))
LDFLAGS += $(patsubst %,-l%,$(EXTRA_LIBS))

# Set Linker-Script Depending On Selected Memory and Controller
ifeq ($(RUN_MODE),RAM_RUN)
LDFLAGS +=-T$(INCLUDE_LOCAL)/arm/smartfusion/debug-in-microsemi-smartfusion2-envm.ld
else
LDFLAGS +=-T$(INCLUDE_LOCAL)/arm/smartfusion/production-smartfusion2-execute-in-place.ld
endif

# Define directories, if needed.
## DIRARM = c:/WinARM/
## DIRARMBIN = $(DIRAVR)/bin/
## DIRAVRUTILS = $(DIRAVR)/utils/bin/

# Define Messages
# English
MSG_ERRORS_NONE = Errors: none
MSG_BEGIN = "-------- begin (mode: $(RUN_MODE)) --------"
MSG_END = --------  end  --------
MSG_SIZE_BEFORE = Size before:
MSG_SIZE_AFTER = Size after:
MSG_FLASH = Creating load file for Flash:
MSG_EXTENDED_LISTING = Creating Extended Listing:
MSG_SYMBOL_TABLE = Creating Symbol Table:
MSG_LINKING = Linking:
MSG_COMPILING = Compiling C:
MSG_COMPILING_ARM = "Compiling C (ARM-only):"
MSG_COMPILINGCPP = Compiling C++:
MSG_COMPILINGCPP_ARM = "Compiling C++ (ARM-only):"
MSG_ASSEMBLING = Assembling:
MSG_ASSEMBLING_ARM = "Assembling (ARM-only):"
MSG_CLEANING = Cleaning project:
MSG_FORMATERROR = Can not handle output-format
MSG_LPC21_RESETREMINDER = You may have to bring the target in bootloader-mode now.

# Define all object files.
COBJ      = $(CSRC:.c=.o)
AOBJ      = $(ASRC:.S=.o)
COBJARM   = $(SRCARM:.c=.o)
AOBJARM   = $(ASRCARM:.S=.o)
CPPOBJ    = $(CPPSRC:.cpp=.o)
CPPOBJARM = $(CPPSRCARM:.cpp=.o)

# Define all listing files.
LST = $(ASRC:.S=.lst) $(ASRCARM:.S=.lst) $(CSRC:.c=.lst) $(SRCARM:.c=.lst)
LST += $(CPPSRC:.cpp=.lst) $(CPPSRCARM:.cpp=.lst)

# Compiler flags to generate dependency files.
### GENDEPFLAGS = -Wp,-M,-MP,-MT,$(*F).o,-MF,.dep/$(@F).d
GENDEPFLAGS = -MD -MP -MF .dep/$(@F).d

# Combine all necessary flags and optional flags.
# Add target processor to flags.
ALL_CFLAGS  = -mcpu=$(MCU) $(THUMB_IW) -I. $(CFLAGS) $(GENDEPFLAGS)
ALL_ASFLAGS = -mcpu=$(MCU) $(THUMB_IW) -I. -x assembler-with-cpp $(ASFLAGS)


# Default target.
#all: begin gccversion sizebefore build sizeafter finished end
all: begin gccversion build finished end

ifeq ($(FORMAT),ihex)
build: elf hex lss sym sizeafter
hex: $(TARGET).hex
else
ifeq ($(FORMAT),binary)
build: elf bin lss sym
bin: $(TARGET).bin
else
$(error "$(MSG_FORMATERROR) $(FORMAT)")
endif
endif

elf: $(TARGET).elf
lss: $(TARGET).lss
sym: $(TARGET).sym

# Eye candy.
begin:
	@echo
	@echo $(MSG_BEGIN)

finished:
	@echo $(MSG_ERRORS_NONE)

end:
	@echo $(MSG_END)
	@echo


# Display size of file.
HEXSIZE = $(SIZE) --target=$(FORMAT) $(TARGET).hex
ELFSIZE = $(SIZE) -A $(TARGET).elf
sizebefore:
	@if [ -f $(TARGET).elf ]; then echo; echo $(MSG_SIZE_BEFORE); $(ELFSIZE); echo; fi

sizeafter:
	@if [ -f $(TARGET).elf ]; then echo; echo $(MSG_SIZE_AFTER); $(ELFSIZE); echo; fi


# Display compiler version information.
gccversion :
	@$(CC) --version

xilinx: $(JTAG_CMD_FILE)
	echo "Programming Xilinx device"
	$(JTAG) $(JTAG_CMD_FILE)

# ---------------------------------------------------------------------------
# Flash-Programming support using lpc21isp by Martin Maurer
# only for Philips LPC and Analog ADuC ARMs
#
# Settings and variables:
#LPC21ISP = lpc21isp
# LPC21ISP_BAUD = 9600
# XTAL-Parameter seems to be a dummy for ADuC
# but is needed or lpc21isp will stop with an error message
LPC21ISP_FLASHFILE = $(TARGET).hex
# verbose output:
## LPC21ISP_DEBUG = -debug
# enter bootloader via RS232 DTR/RTS (only if hardware supports this
# feature - see Philips AppNote):
#LPC21ISP_OPTIONS = -control
# ---------------------------------------------------------------------------

# Program the device.
ifeq ($(FLASH_TOOL),ULINK)
# Program the device with Keil's ULINK (needs configured uVision-Workspace).
program: $(TARGET).hex
	@echo
	@echo "Programming with ULINK"
	C:\Keil\uv3\Uv3.exe -f ulinkflash.Uv2 -oulinkflash.txt
endif

ifeq ($(FLASH_TOOL),OPENOCD)
# Program the device with Dominic Rath's OPENOCD in "batch-mode", needs cfg and "reset-script".
#The used interface either FTDI(=WinARM-JTAG, JTAGKEY etc.) or PP(="Wiggler")
OOCD_INTERFACE = FTDI
OOCD_CFG = $(INCLUDE_LOCAL)/arm/lpc2xxx_armusbocd.cfg
#OOCD_INTERFACE = PP
#OOCD_CFG=openocd_lpc2138_flash_wiggler.cfg
#OOCD = /usr/local/bin/openocd-pp.exe
OOCD_DBG = -d 3
program: $(TARGET).hex
	echo "Programming with OPENOCD"
	$(OOCD) $(OOCD_DBG) -f $(OOCD_CFG)
endif

ifeq ($(FLASH_TOOL),LPC21ISP)
# Program the device.  - lpc21isp will not work for SAM7
program: $(TARGET).hex
	@echo
	@echo $(MSG_LPC21_RESETREMINDER)
	$(LPC21ISP) $(LPC21ISP_OPTIONS) $(LPC21ISP_DEBUG) $(LPC21ISP_FLASHFILE) $(LPC21ISP_PORT) $(LPC21ISP_BAUD) $(LPC21ISP_XTAL)

burn:
	@echo
	@echo $(MSG_LPC21_RESETREMINDER)
	$(LPC21ISP) $(LPC21ISP_OPTIONS) $(LPC21ISP_DEBUG) $(LPC21ISP_FLASHFILE) $(LPC21ISP_PORT) $(LPC21ISP_BAUD) $(LPC21ISP_XTAL)
endif

# Create final output files (.hex, .eep) from ELF output file.
# TODO: handle an .eeprom-section but should be redundant
%.hex: %.elf
	@echo
	@echo $(MSG_FLASH) $@
	$(OBJCOPY) -O $(FORMAT) $< $@
	$(OBJDUMP) -d -g -C -l -S --prefix-addresses $(TARGET).elf > builds/$(TARGET).v$(GITVERSION).b$(BUILDNUM).lss
	$(COPY) $@ builds/$(TARGET).v$(GITVERSION).b$(BUILDNUM).hex

# Create final output file (.bin) from ELF output file.
%.bin: %.elf
	@echo
	@echo $(MSG_FLASH) $@
	$(OBJCOPY) -O $(FORMAT) $< $@


# Create extended listing file from ELF output file.
# testing: option -C
%.lss: %.elf
	@echo
	@echo $(MSG_EXTENDED_LISTING) $@
	$(OBJDUMP) -h -S -C $< > $@


# Create a symbol table from ELF output file.
%.sym: %.elf
	@echo
	@echo $(MSG_SYMBOL_TABLE) $@
	$(NM) -n $< > $@

# Link: create ELF output file from object files.
.SECONDARY : $(TARGET).elf
.PRECIOUS : $(TARGET)BuildNum $(AOBJARM) $(AOBJ) $(COBJARM) $(COBJ) $(CPPOBJ) $(CPPOBJARM) Makefile $(INCLUDE_LOCAL)/arm/GNUMakefile
%.elf:  $(TARGET)BuildNum $(AOBJARM) $(AOBJ) $(COBJARM) $(COBJ) $(CPPOBJ) $(CPPOBJARM) $(LIBS) Makefile $(INCLUDE_LOCAL)/arm/GNUMakefile
	@echo
	@echo $(MSG_LINKING) $@
	$(CPP) $(THUMB) $(ALL_CFLAGS) $(AOBJARM) $(AOBJ) $(COBJARM) $(COBJ) $(CPPOBJ) $(CPPOBJARM) $(LIBS) --output $@ $(LDFLAGS)
	
#increment build number
$(TARGET)BuildNum: $(wildcard *.h) $(wildcard *.hpp) $(wildcard *.c) $(wildcard *.cpp) $(wildcard ../*.h) $(wildcard ../*.hpp) $(wildcard ../*.c) $(wildcard ../*.cpp)
	btracer $(TARGET)

# Compile: create object files from C source files. ARM/Thumb
$(COBJ) : %.o : %.c
	@echo
	@echo $(MSG_COMPILING) $<
	$(CC) -c $(THUMB) $(ALL_CFLAGS) $(CONLYFLAGS) $< -o $@

# Compile: create object files from C source files. ARM-only
$(COBJARM) : %.o : %.c
	@echo
	@echo $(MSG_COMPILING_ARM) $<
	$(CC) -c $(ALL_CFLAGS) $(CONLYFLAGS) $< -o $@

# Compile: create object files from C++ source files. ARM/Thumb
$(CPPOBJ) : %.o : %.cpp $(TARGET)BuildNum
	@echo
	@echo $(MSG_COMPILINGCPP) $<
	$(CPP) -c $(THUMB) $(ALL_CFLAGS) $(CPPFLAGS) $< -o $@

# Compile: create object files from C++ source files. ARM-only
$(CPPOBJARM) : %.o : %.cpp
	@echo
	@echo $(MSG_COMPILINGCPP_ARM) $<
	$(CPP) -c $(ALL_CFLAGS) $(CPPFLAGS) $< -o $@

$(CLIBS) : %.a : %.o : %.c
	@echo
	@echo $(MSG_COMPILING) $<
	$(CC) -c $(THUMB) $(ALL_CFLAGS) $(CONLYFLAGS) $< -o $@
	@echo Building Lib $<
	$(AR) rcs $@ $<

$(CPPLIBS) : %.a : %.o : %.cpp
	@echo
	@echo $(MSG_COMPILINGCPP) $<
	$(CPP) -c $(THUMB) $(ALL_CFLAGS) $(CPPFLAGS) $< -o $@
	@echo Building Lib $<
	$(AR) rcs $@ $<

# Compile: create assembler files from C source files. ARM/Thumb
## does not work - TODO - hints welcome
##$(COBJ) : %.s : %.c
##	$(CC) $(THUMB) -S $(ALL_CFLAGS) $< -o $@


# Assemble: create object files from assembler source files. ARM/Thumb
$(AOBJ) : %.o : %.S
	@echo
	@echo $(MSG_ASSEMBLING) $<
	$(CC) -c $(THUMB) $(ALL_ASFLAGS) $< -o $@


# Assemble: create object files from assembler source files. ARM-only
$(AOBJARM) : %.o : %.S
	@echo
	@echo $(MSG_ASSEMBLING_ARM) $<
	$(CC) -c $(ALL_ASFLAGS) $< -o $@



# Target: clean project.
clean: begin clean_list finished end


clean_list :
	@echo
	@echo $(MSG_CLEANING)
	-$(REMOVE) $(TARGET).hex
	-$(REMOVE) $(TARGET).bin
	-$(REMOVE) $(TARGET).obj
	-$(REMOVE) $(TARGET).elf
	-$(REMOVE) $(TARGET).map
	-$(REMOVE) $(TARGET).obj
	-$(REMOVE) $(TARGET).a90
	-$(REMOVE) $(TARGET).sym
	-$(REMOVE) $(TARGET).lnk
	-$(REMOVE) $(TARGET).lss
	-$(REMOVE) $(COBJ)
	-$(REMOVE) $(CPPOBJ)
	-$(REMOVE) $(AOBJ)
	-$(REMOVE) $(COBJARM)
	-$(REMOVE) $(CPPOBJARM)
	-$(REMOVE) $(AOBJARM)
	-$(REMOVE) $(LST)
	-$(REMOVE) $(CSRC:.c=.s)
	-$(REMOVE) $(CSRC:.c=.d)
	-$(REMOVE) $(SRCARM:.c=.s)
	-$(REMOVE) $(SRCARM:.c=.d)
	-$(REMOVE) $(CPPSRC:.cpp=.s)
	-$(REMOVE) $(CPPSRC:.cpp=.d)
	-$(REMOVE) $(CPPSRCARM:.cpp=.s)
	-$(REMOVE) $(CPPSRCARM:.cpp=.d)
	-$(REMOVE) -r .dep
	#~ -rm *.o
	#~ -rm *.lst
	#~ -rm ../*.o
	#~ -rm $(INCLUDE_LOCAL)/*.o
	#~ -rm $(INCLUDE_LOCAL)/arm/*.o
	#~ -rm $(INCLUDE_LOCAL)/uart/*.o
	#~ -rm $(INCLUDE_LOCAL)/format/*.o
	#~ -rm $(INCLUDE_LOCAL)/cgraph/*.o
	

# Include the dependency files.
-include $(shell mkdir .dep 2>/dev/null) $(wildcard .dep/*)


# Listing of phony targets.
.PHONY : all begin finish end sizebefore sizeafter gccversion \
build elf hex bin lss sym clean clean_list program xilinx

