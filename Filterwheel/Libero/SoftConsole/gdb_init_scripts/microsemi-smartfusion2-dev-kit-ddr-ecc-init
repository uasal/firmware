#==============================================================================
# (c) Copyright 2015 Microsemi Corporation.  All rights reserved.
#
# microsemi-smartfusion2-dev-kit-ddr-ecc-init
#
# SoftConsole debug initialization commands for configuring the external DDR 
# memory on the Microsemi SmartFusion2 dev Kit and advanced dev kit board. 
#
# warning: Please note configuration values are based on a specific Libero design using the following timings:
# MDDR clock of 166MHz 
# Note: The initialization values should be the same as the ones generated by Libero in 
# ./drivers_config/sys_config/sys_config_mddr_define.h
#
# Softconsole (3.x) initialization script when debugging in external memory should be of the form:
# 	# GDB script containing default debug init commands
#	source ${eclipse_home}/../Sourcery-G++/share/gdbinit/microsemi-cortex-m3-target-gdbinit
#	# GDB script containing initialization of external memory- particular to design you are using
#	source ${eclipse_home}/../Sourcery-G++/share/gdbinit/microsemi-smartfusion2-dev-kit-ddr-ecc-init
#
#	# Invoke debug sprite in Cortex-M3 mode (add -v at end of line for verbose logging/diagnostic output)
#	target remote | "${eclipse_home}/../Sourcery-G++/bin/arm-none-eabi-sprite" flashpro:?cpu=Cortex-M3 "${build_loc}"
#
#	# configure_external_ram for particular board
#	configure_external_ram
#	
# 	#Load the program (pre and post load hooks in gdbinit will be run)
#	load
#	#end of Softconsole (3.x) script
#
# SVN $Revision: 6297 $
# SVN $Date: 2014-04-07 16:49:22 +0100 (Mon, 07 Apr 2014) $
#==============================================================================

#----------------------------------------
# SmartFusion2 register addresses & values
#----------------------------------------

set $SF2_ESRAM_CR       =   0x40038000
set $SF2_DDR_CR         =   0x40038008
set $SF2_ENVM_REMAP_CR  =   0x40038010

#----------------------------------------
# SmartFusion2 remapping
# Values below are used to compaired to value 
# set in the linker script (__smartfusion2_memory_remap variable)
#----------------------------------------

set $SF2_REMAP_ENVM     =   0
set $SF2_REMAP_ESRAM    =   1
set $SF2_REMAP_DDR      =   2

#----------------------------------------
# configure_mddr
#
# Configure the DDR memory controller
# The values being used on the right hand side
# below should be the same as the ones generated 
# by Libero in the file 
# sys_config_mddr_define.h
#
# called from <configure_mddr> which is defined below
#----------------------------------------

define configure_mddr

printf "\nConfiguring external DDR RAM with ECC/SECDED enabled. \n"

# MDDR->core.ddrc.DYN_SOFT_RESET_CR
set *0x40020800 = 0x00000000

# MDDR->core.ddrc.DYN_REFRESH_1_CR
set *0x40020808 = 0x000027DE

# MDDR->core.ddrc.DYN_REFRESH_2_CR
set *0x4002080C = 0x0000030F

# MDDR->core.ddrc.DYN_POWERDOWN_CR
set *0x40020810 = 0x00000002

# MDDR->core.ddrc.DYN_DEBUG_CR
set *0x40020814 = 0x00000000

# MDDR->core.ddrc.MODE_CR
set *0x40020818 = 0x00000115

# MDDR->core.ddrc.ADDR_MAP_BANK_CR
set *0x4002081C = 0x00000999

# MDDR->core.ddrc.ECC_DATA_MASK_CR
set *0x40020820 = 0x00000000

# MDDR->core.ddrc.ADDR_MAP_COL_1_CR
set *0x40020824 = 0x00003333

# MDDR->core.ddrc.ADDR_MAP_COL_2_CR
set *0x40020828 = 0x0000FFFF

# MDDR->core.ddrc.ADDR_MAP_ROW_1_CR
set *0x4002082C = 0x00008888

# MDDR->core.ddrc.ADDR_MAP_ROW_2_CR
set *0x40020830 = 0x0000088F

# MDDR->core.ddrc.INIT_1_CR
set *0x40020834 = 0x00000001

# MDDR->core.ddrc.CKE_RSTN_CYCLES_CR[0]
set *0x40020838 = 0x00004242

# MDDR->core.ddrc.CKE_RSTN_CYCLES_CR[1]
set *0x4002083C = 0x00000008

# MDDR->core.ddrc.INIT_MR_CR
set *0x40020840 = 0x00000520

# MDDR->core.ddrc.INIT_EMR_CR
set *0x40020844 = 0x00000044

# MDDR->core.ddrc.INIT_EMR2_CR
set *0x40020848 = 0x00000000

# MDDR->core.ddrc.INIT_EMR3_CR
set *0x4002084C = 0x00000000

# MDDR->core.ddrc.DRAM_BANK_TIMING_PARAM_CR
set *0x40020850 = 0x00000CE0

# MDDR->core.ddrc.DRAM_RD_WR_LATENCY_CR
set *0x40020854 = 0x00000086

# MDDR->core.ddrc.DRAM_RD_WR_PRE_CR
set *0x40020858 = 0x00000235

# MDDR->core.ddrc.DRAM_MR_TIMING_PARAM_CR
set *0x4002085C = 0x0000005C

# MDDR->core.ddrc.DRAM_RAS_TIMING_CR
set *0x40020860 = 0x0000010F

# MDDR->core.ddrc.DRAM_RD_WR_TRNARND_TIME_CR
set *0x40020864 = 0x00000178

# MDDR->core.ddrc.DRAM_T_PD_CR
set *0x40020868 = 0x00000033

# MDDR->core.ddrc.DRAM_BANK_ACT_TIMING_CR
set *0x4002086C = 0x00001947

# MDDR->core.ddrc.ODT_PARAM_1_CR
set *0x40020870 = 0x00000010

# MDDR->core.ddrc.ODT_PARAM_2_CR
set *0x40020874 = 0x00000000

# MDDR->core.ddrc.ADDR_MAP_COL_3_CR
set *0x40020878 = 0x00003300

# MDDR->core.ddrc.MODE_REG_RD_WR_CR
set *0x4002087C = 0x00000000

# MDDR->core.ddrc.MODE_REG_DATA_CR
set *0x40020880 = 0x00000000

# MDDR->core.ddrc.PWR_SAVE_1_CR
set *0x40020884 = 0x00000506

# MDDR->core.ddrc.PWR_SAVE_2_CR
set *0x40020888 = 0x00000000

# MDDR->core.ddrc.ZQ_LONG_TIME_CR
set *0x4002088C = 0x00000200

# MDDR->core.ddrc.ZQ_SHORT_TIME_CR
set *0x40020890 = 0x00000040

# MDDR->core.ddrc.ZQ_SHORT_INT_REFRESH_MARGIN_CR[0]
set *0x40020894 = 0x00000012

# MDDR->core.ddrc.ZQ_SHORT_INT_REFRESH_MARGIN_CR[1]
set *0x40020898 = 0x00000002

# MDDR->core.ddrc.PERF_PARAM_1_CR
set *0x4002089C = 0x00004002

# MDDR->core.ddrc.HPR_QUEUE_PARAM_CR[0]
set *0x400208A0 = 0x000080F8

# MDDR->core.ddrc.HPR_QUEUE_PARAM_CR[1]
set *0x400208A4 = 0x00000007

# MDDR->core.ddrc.LPR_QUEUE_PARAM_CR[0]
set *0x400208A8 = 0x000080F8

# MDDR->core.ddrc.LPR_QUEUE_PARAM_CR[1]
set *0x400208AC = 0x00000007

# MDDR->core.ddrc.WR_QUEUE_PARAM_CR
set *0x400208B0 = 0x00000200

# MDDR->core.ddrc.PERF_PARAM_2_CR
set *0x400208B4 = 0x00000400

# MDDR->core.ddrc.PERF_PARAM_3_CR
set *0x400208B8 = 0x00000000

# MDDR->core.ddrc.DFI_RDDATA_EN_CR
set *0x400208BC = 0x00000005

# MDDR->core.ddrc.DFI_MIN_CTRLUPD_TIMING_CR
set *0x400208C0 = 0x00000003

# MDDR->core.ddrc.DFI_MAX_CTRLUPD_TIMING_CR
set *0x400208C4 = 0x00000040

# MDDR->core.ddrc.DFI_WR_LVL_CONTROL_CR[0]
set *0x400208C8 = 0x00000000

# MDDR->core.ddrc.DFI_WR_LVL_CONTROL_CR[1]
set *0x400208CC = 0x00000000

# MDDR->core.ddrc.DFI_RD_LVL_CONTROL_CR[0]
set *0x400208D0 = 0x00000000

# MDDR->core.ddrc.DFI_RD_LVL_CONTROL_CR[1]
set *0x400208D4 = 0x00000000

# MDDR->core.ddrc.DFI_CTRLUPD_TIME_INTERVAL_CR
set *0x400208D8 = 0x00000309

# MDDR->core.ddrc.AXI_FABRIC_PRI_ID_CR
set *0x400208E0 = 0x00000000

# MDDR->core.ddrc.ECC_INT_CLR_REG
set *0x40020940 = 0x00000000

# MDDR->core.phy.LOOPBACK_TEST_CR
set *0x40020A1C  =0x00000000

# MDDR->core.phy.CTRL_SLAVE_RATIO_CR
set *0x40020A24 = 0x00000080

# MDDR->core.phy.DATA_SLICE_IN_USE_CR
set *0x40020A30 = 0x00000013

# MDDR->core.phy.DQ_OFFSET_CR[0]
set *0x40020A38 = 0x00000000

# MDDR->core.phy.DQ_OFFSET_CR[2]
set *0x40020A40 = 0x00000000

# MDDR->core.phy.DLL_LOCK_DIFF_CR
set *0x40020A48 = 0x0000000B

# MDDR->core.phy.FIFO_WE_SLAVE_RATIO_CR[0]
set *0x40020A5C = 0x00000080

# MDDR->core.phy.FIFO_WE_SLAVE_RATIO_CR[1]
set *0x40020A60 = 0x00002004

# MDDR->core.phy.FIFO_WE_SLAVE_RATIO_CR[2]
set *0x40020A64 = 0x00000100

# MDDR->core.phy.FIFO_WE_SLAVE_RATIO_CR[3]
set *0x40020A68 = 0x00000008

# MDDR->core.phy.LOCAL_ODT_CR
set *0x40020A80 = 0x00000001

# MDDR->core.phy.RD_DQS_SLAVE_RATIO_CR[0]
set *0x40020A98 = 0x00004050

# MDDR->core.phy.RD_DQS_SLAVE_RATIO_CR[1]
set *0x40020A9C = 0x00000501

# MDDR->core.phy.RD_DQS_SLAVE_RATIO_CR[2]
set *0x40020AA0 = 0x00005014

# MDDR->core.phy.WR_DATA_SLAVE_RATIO_CR[0]
set *0x40020AD8 = 0x00000050

# MDDR->core.phy.WR_DATA_SLAVE_RATIO_CR[1]
set *0x40020ADC = 0x00000501

# MDDR->core.phy.WR_DATA_SLAVE_RATIO_CR[2]
set *0x40020AE0 = 0x00005010

# MDDR->core.phy.WR_RD_RL_CR
set *0x40020AFC = 0x00000043

# MDDR->core.phy.RDC_WE_TO_RE_DELAY_CR
set *0x40020B04 = 0x00000003

# MDDR->core.phy.USE_FIXED_RE_CR
set *0x40020B08 = 0x00000001

# MDDR->core.phy.USE_RANK0_DELAYS_CR
set *0x40020B0C = 0x00000001

# MDDR->core.phy.CONFIG_CR
set *0x40020B14 = 0x00000000

# MDDR->core.phy.DYN_RESET_CR
set *0x40020B1C = 0x00000001

# MDDR->core.ddrc.DYN_SOFT_RESET_CR
set *0x40020800 = 0x00000001

# Wait for reset to take effect
set $ready = *0x400207fc
while ($ready == 0) {
	set $ready = *0x400207fc	
}

end

#----------------------------------------
# Configure the DDR memory controller
# Called from debugger script before
# Loading program to DDR
#----------------------------------------

define configure_external_ram
    printf "\nConfiguring external RAM. \n"
    
    # Don't restrict memory access to just regions defined in linker script
    set mem inaccessible-by-default off
    
    if (&__smartfusion2_memory_remap == $SF2_REMAP_DDR)
        configure_mddr
        # Remap external DDR memory to address 0x00000000
        # and flush the cache in case it is enabled
        set *$SF2_ESRAM_CR      = 0x00000000
        set *$SF2_ENVM_REMAP_CR = 0x00000000
        set *$SF2_DDR_CR        = 0x00000001
        set *$SF2_FLUSH_CR      = 0x00000001
    end

end
