UartStatusRegister
formatf call:[formatf] noreturn:[formatf]
AdcAccumulator
formatf call:[formatf] noreturn:[formatf]
AdcFifo
CGraphBaudDividers
formatf call:[formatf] noreturn:[formatf]
CGraphMonitorAdcCommandStatusRegister
formatf call:[formatf] noreturn:[formatf]
CGraphFWHardwareControlRegister
formatf call:[formatf] noreturn:[formatf]
CGraphFWMotorControlStatusRegister
formatf call:[formatf] noreturn:[formatf]
CGraphFWPositionSenseRegister
formatf call:[formatf] noreturn:[formatf]
CGraphFWPositionStepRegister
MidStep call:[abs,min,return] noreturn:[return]
formatf call:[MidStep,formatf] noreturn:[formatf]
IUart
IUart
puts call:[putcqq] noreturn:[putcqq]
IUartParser
IUartParser
puts call:[putcqq] noreturn:[putcqq]
Cmd call:[strlen] noreturn:[strlen]
BinaryCmd
IProtocol
IProtocol
IPacket
IPacket
BinaryUartCallbacks
BinaryUartCallbacks
InvalidPacket
UnHandledPacket
EveryPacket
BufferOverflow
BinaryUart
Debug
Init call:[FooterLen,HeaderLen,formatf,memset,return] noreturn:[return]
Process call:[ProcessByte,dataready,getcqq,return] noreturn:[return]
ProcessByte call:[BufferOverflow,DoesPayloadTypeMatch,EveryPacket,FindPacketEnd,FindPacketStart,FooterLen,HeaderLen,InvalidPacket,IsBroadcastSerialNum,IsValid,MaxPayloadLength,PayloadLen,PayloadOffset,PayloadType,Response,SerialNum,UnHandledPacket,formatf,return] noreturn:[EveryPacket,InvalidPacket,UnHandledPacket,formatf,return]
TxBinaryPacket call:[MakePacket,formatf,printf,putcqq] noreturn:[printf,putcqq]
formatf call:[formatf,printf] noreturn:[printf]
TxBinaryPacket call:[TxBinaryPacket,formatf] noreturn:[TxBinaryPacket,formatf]
RTS call:[return] noreturn:[return]
RTSCallback
uart_pinout_fpga
uart_pinout_fpga
dataready call:[return] noreturn:[return]
getcqq call:[formatf,return] noreturn:[formatf,return]
putcqq call:[return] noreturn:[return]
depth call:[return] noreturn:[return]
init call:[return] noreturn:[return]
deinit
flushoutput
purgeinput
connected call:[return] noreturn:[return]
isopen call:[return] noreturn:[return]
Monitor
Monitor call:[return] noreturn:[return]
CountsToVolts call:[return] noreturn:[return]
formatf call:[formatf] noreturn:[formatf]
ads1258sample
ads1258sample
formatf call:[formatf] noreturn:[formatf]
ads1258cmdheader
ads1258cmdheader
operator!= call:[return] noreturn:[return]
config0register
config0register
operator!= call:[return] noreturn:[return]
sformatf call:[sformatf] noreturn:[sformatf]
config1register
config1register
operator!= call:[return] noreturn:[return]
sformatf call:[sformatf] noreturn:[sformatf]
muxschregister
muxschregister
operator!= call:[return] noreturn:[return]
sformatf call:[sformatf] noreturn:[sformatf]
sysreadregister
sysreadregister
operator!= call:[return] noreturn:[return]
sformatf call:[sformatf] noreturn:[sformatf]
TempLM35
VoltsToDegCFast call:[return] noreturn:[return]
VoltsToDegCAccurate call:[return] noreturn:[return]
PinoutMonitorAdc
PinoutMonitorAdc
GetAdcReadChannel global:[FW,MonitorAdcFpgaAdcChannelAddr] call:[return] noreturn:[return]
SetAdcReadChannel global:[FW,MonitorAdcFpgaAdcChannelAddr]
busy global:[FW] call:[return] noreturn:[return]
waitbusytimeout call:[busy,delayus,formatf] noreturn:[delayus,formatf]
enable global:[FW]
transmit global:[FW] call:[waitbusytimeout]
receive global:[FW] call:[return,waitbusytimeout] noreturn:[return]
nDrdy global:[FW] call:[return] noreturn:[return]
setclkpolarity
setclkphase
MonitorAdcCalibratedInput
MonitorAdcCalibratedInput
MonitorAdcCalibratedInput
Calibrate
ReadCalibrated call:[CountsToVolts,return] noreturn:[return]
GetGain call:[return] noreturn:[return]
GetOffset call:[return] noreturn:[return]
CGraphFWMonitorAdc
CGraphFWMonitorAdc
GetMonitor call:[return] noreturn:[return]
SetMonitor
Init call:[AddScanChannel,ClearScanChannels,CommitScanChannels,Init,ReadRegister,StartChannelScan,WriteRegister,fflush,formatf] noreturn:[fflush,formatf]
Process call:[AutoScan,CountsToVolts,GetLastSample,IsScanChannel,ProcessAllUarts,formatf] noreturn:[formatf]
GetP1V2 global:[P1V2Calibrate] call:[ReadCalibrated,return] noreturn:[return]
GetP2V2 global:[P2V2Calibrate] call:[ReadCalibrated,return] noreturn:[return]
GetP28V global:[P28VCalibrate] call:[ReadCalibrated,return] noreturn:[return]
GetP2V5 global:[P2V5Calibrate] call:[ReadCalibrated,return] noreturn:[return]
GetP6V global:[P6VCalibrate] call:[ReadCalibrated,return] noreturn:[return]
GetP5V global:[P5VCalibrate] call:[ReadCalibrated,return] noreturn:[return]
GetP3V3D global:[P3V3DCalibrate] call:[ReadCalibrated,return] noreturn:[return]
GetP4V3 global:[P4V3Calibrate] call:[ReadCalibrated,return] noreturn:[return]
GetP2I2 global:[P2I2Calibrate] call:[ReadCalibrated,return] noreturn:[return]
GetP4I3 global:[P4I3Calibrate] call:[ReadCalibrated,return] noreturn:[return]
GetP6I global:[P6ICalibrate] call:[ReadCalibrated,return] noreturn:[return]
GetAux0 global:[Aux0Calibrate] call:[ReadCalibrated,return] noreturn:[return]
GetAux1 global:[Aux1Calibrate] call:[ReadCalibrated,return] noreturn:[return]
GetAux2 global:[Aux1Calibrate] call:[ReadCalibrated,return] noreturn:[return]
GetAmbientLight global:[AmbientLightCalibrate] call:[ReadCalibrated,return] noreturn:[return]
GetTemperature global:[TemperatureCalibrate] call:[ReadCalibrated,return] noreturn:[return]
GetP1V2Raw
GetP2V2Raw
GetP28VRaw
GetP2V5Raw
GetP6VRaw
GetP5VRaw
GetP3V3DRaw
GetP4V3Raw
GetP2I2Raw
GetP4I3Raw
GetP6IRaw
GetAux0Raw
GetAux1Raw
GetAux2Raw
GetAmbientLightRaw
GetTemperatureRaw
SaveCals call:[formatf,sizeof] noreturn:[sizeof]
RestoreCals call:[formatf,sizeof] noreturn:[sizeof]
main global:[DbgUart485_0,DbgUartUsb,FPGAUartPinout0,FPGAUartPinoutUsb,FW,MonitorAdc] call:[Init,Process,ProcessAllUarts,SetEcho,SetMonitor,ShowBuildParameters,formatf,offsetof,putcqq,return,setvbuf] noreturn:[ProcessAllUarts,return]
ads1258 < PinoutMonitorAdc > call:[setclkphase,setclkpolarity] noreturn:[setclkphase]
ads1258 < PinoutMonitorAdc >
CountsToVolts call:[return] noreturn:[return]
ConvertOnceDiff call:[ReadLastChannel,ReadRegister,SendCommand,WriteRegister,ads1258cmdheader,config0,delayus,formatf,muxsch,return] noreturn:[return]
ClearScanChannels
GetScanChannelsMask call:[return] noreturn:[return]
SetScanChannelsMask
AddScanChannel call:[GetScanChannelsMask,SetScanChannelsMask] noreturn:[SetScanChannelsMask]
SetScanChannels
IsScanChannel call:[GetScanChannelsMask,return] noreturn:[return]
NumScanChannels call:[GetScanChannelsMask,return] noreturn:[return]
CommitScanChannels call:[ReadRegister,WriteRegister,formatf] noreturn:[formatf]
StartChannelScan call:[SendCommand,WriteRegister,ads1258cmdheader,config0,return] noreturn:[return]
Scan call:[ReadLastChannel,SendCommand,ads1258cmdheader,return] noreturn:[return]
AutoScan call:[ReadLastChannel,return] noreturn:[return]
GetLastSample
Init call:[ReadRegister,SendCommand,WriteRegister,ads1258cmdheader,config0,config1,delayus,enable,formatf,return,sysread] noreturn:[WriteRegister,delayus,return]
spi_busmsg call:[delayus,enable,waitbusytimeout] noreturn:[enable]
spi_busmsg call:[delayus,enable,waitbusytimeout] noreturn:[delayus]
txb call:[transmit] noreturn:[transmit]
rxb call:[receive,return] noreturn:[return]
WriteRegister call:[txb] noreturn:[txb]
ReadLastChannel call:[return,rxb,txb] noreturn:[return]
ReadRegister call:[return,rxb,txb] noreturn:[return]
ReadRegister call:[rxb,txb] noreturn:[rxb]
SendCommand call:[txb] noreturn:[txb]
TerminalUart < 16 , 4096 >
Init call:[clear,memset,return] noreturn:[return]
Prompt call:[puts] noreturn:[puts]
Prompt
SetVerbose
SetEcho
StdOutEcho
SetCrLfOrLf
SetBlockOnTxBuffFull
SetPrefix
Flush call:[ProcessTx,memset] noreturn:[ProcessTx]
put call:[putcqq,return] noreturn:[putcqq,return]
puts call:[put] noreturn:[put]
formatf call:[puts,sformatf,va_end,va_start] noreturn:[va_end]
ProcessTx call:[RTS,empty,pop,putcqq,return] noreturn:[putcqq,return]
ProcessRx call:[ParseCmd,maybegetline,puts,return] noreturn:[ParseCmd,puts,return]
Process call:[ProcessRx,ProcessTx,return] noreturn:[return]
eof call:[maybegetc,return] noreturn:[return]
get call:[getcqq,return] noreturn:[return]
maybegetc global:[CHAR_TAB] call:[dataready,getcqq,putcqq,return,stdio_hook_putc] noreturn:[putcqq,return,stdio_hook_putc]
maybegetline global:[CHAR_BAK,CHAR_DEL,CHAR_ESC,CHAR_TAB] call:[maybegetc,putcqq,return,strnlen] noreturn:[putcqq,return]
next
fixedqueue < char , 16 >
empty
full call:[next,return] noreturn:[return]
max call:[return] noreturn:[return]
len
clear
front
back
pop call:[empty,next,return] noreturn:[return]
push call:[full,next,return] noreturn:[return]
