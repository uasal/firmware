<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.1">
  <compound kind="file">
    <name>ads1258.h</name>
    <path>/home/summer/projects/CGraph/firmware/include/adc/</path>
    <filename>ads1258_8h.html</filename>
    <includes id="Delay_8h" name="Delay.h" local="yes" imported="no">Delay.h</includes>
    <class kind="union">ads1258details::ads1258status</class>
    <class kind="union">ads1258details::ads1258sample</class>
    <class kind="union">ads1258details::ads1258cmdheader</class>
    <class kind="union">ads1258details::config0register</class>
    <class kind="union">ads1258details::config1register</class>
    <class kind="union">ads1258details::muxschregister</class>
    <class kind="union">ads1258details::sysreadregister</class>
    <class kind="struct">ads1258</class>
    <class kind="struct">ads1258::spi_busmsg</class>
    <namespace>ads1258details</namespace>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>CountsToVolts</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>ac86c4a65afef2109821adba8a146926c</anchor>
      <arglist>(const int32_t &amp;Counts, const double &amp;AdcVRef)</arglist>
    </member>
    <member kind="function">
      <type>union ads1258details::ads1258status</type>
      <name>__attribute__</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>ad69b89d96d223c044d342104f6f95ec3</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type>struct @8</type>
      <name>__attribute__</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>accb2b9d3dff24683161adaabc0d9bf5d</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>formatf</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>aac4a82c72fa3b8a5f87bfa525126205b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ads1258sample</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a8bbf28359d8b2541aba46728fa8678c5</anchor>
      <arglist>(uint32_t &amp;val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ads1258sample</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a2bfbed9d2795e7d192f7836a2cef44ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ads1258cmdheader</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a44638dffb2126b1461b127fd78d5d726</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ads1258cmdheader</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>adb61eebcab7766103502710dbcb17f5d</anchor>
      <arglist>(uint8_t c, uint8_t m, uint8_t a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>aaeada20a65010f0774f64141876308d4</anchor>
      <arglist>(ads1258cmdheader &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>config0register</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>ae3357617a43bc276b59c7e8400f93c6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>config0register</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a3a1b27e8ea7c2b269e069e87686c5180</anchor>
      <arglist>(uint8_t a, uint8_t b, uint8_t c, uint8_t d, uint8_t e, uint8_t f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>aa68610d87b4ba46145a07feacf6b7e58</anchor>
      <arglist>(config0register &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>config1register</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a59719b9d00c23e78cfc12653e0490e24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>config1register</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a3af6b46aff097a4547901ae11afbc987</anchor>
      <arglist>(uint8_t a, uint8_t b, uint8_t c, uint8_t d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a28e4c82447718ef2932a2f342fbc83e1</anchor>
      <arglist>(config1register &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>muxschregister</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a2887b422db726b962655fbfeee37324e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>muxschregister</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a3dd45794a5fdbf8aa52e061c1e274956</anchor>
      <arglist>(uint8_t a, uint8_t b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a6efc7d6a021127110361128ed71f5c7c</anchor>
      <arglist>(muxschregister &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sysreadregister</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a8740d951d98d1b2b5456a5968ca7514e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sysreadregister</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a514e91f23e8977125f977d6b6c90b8af</anchor>
      <arglist>(uint8_t a, uint8_t b, uint8_t c, uint8_t d, uint8_t e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a85178432e78c6f408b97657d24cbc099</anchor>
      <arglist>(sysreadregister &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>const int32_t</type>
      <name>CountPosMax</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a94ec3917c6cfb04420e13489f9ab391e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int32_t</type>
      <name>CountPosVRef</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>ac0bc019df46f540b57dfc4260e4d6e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int32_t</type>
      <name>CountZero</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a47f79866dfb09e5c8615d4c00b1ab5bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int32_t</type>
      <name>CountNegVRef</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>aee4fd3c15a9f608cc178e0abfdbb54fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int32_t</type>
      <name>CountNegMin</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>aa0e9045f518b06349f0d72efae65d85e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int32_t</type>
      <name>CountVRefVccDenominator</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>ac996141ddc744ca3e72412ce9d842e0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int32_t</type>
      <name>CountGainDenominator</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>affcacf14e5afa779933ff71701b092cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>channel</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a715f5cb061d11eb75981741eda4dafcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>isbrownout</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>aab204eca0cf9658d127b6d575a072079</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>isclipped</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a572e802f18fe442c7d6a8fc2f5ec3db3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>isnew</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>af519d8fb4f98f049644dd8568aca6677</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>all</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>af61f8246015db4f0a85a942ac747131e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>zero</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a09777e6a5ad91ffd82a9975efe33de2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>one</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>ae921cf33e84ab31133c94ece3b6af147</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>two</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>aa3e36882c660f2b977563045539e3a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>three</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>ad822b50a38d16ba26516380d72eeea7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>sample</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a26adade2cc728132b49d34103346b631</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ads1258status</type>
      <name>status</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>aff251facbcc9240b47fafda164302bd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>cmdtype_chanreaddirect</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a24a7cfc65ba0dc7ed65968e17b1d5301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>cmdtype_chanreadregister</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a39d8f5806160607bc56c341c14254b4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>cmdtype_registerread</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>aed20304b46d0f13e3ef6e316df9c7ac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>cmdtype_registerwrite</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>afe1addcf345788863c9e43affb716aca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>cmdtype_pulseconvert</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>aea10694ac8f1290304e0d3004dc3bb01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>cmdtype_reserved</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>ab2745bb8caa20705214d93e791820446</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>cmdtype_reset</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a8876f430cc3ff0feadce9b369acb6ca2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>cmdtype_chanreaddirectalt</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a5259cc039a7eda1e2bbe16702687cc7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>register_config0</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>addd34f78b79a8448adc902a97a44a87f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>register_config1</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a95b75e693aebd4d1273a358b36bf246b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>register_muxsch</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a49f05b321b9ad7604e92a93a07ae9265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>register_muxdif</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>ab5ba2e2b93dceddb2492c9cac049706a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>register_muxsg0</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a360abd691ec7a474fb749311f9627d4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>register_muxsg1</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>aa8b055500a099ab91fc9d8b249f3fe82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>register_sysread</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a5bc2cf9283c48876da3c9203a385ecea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>register_gpioc</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a7868e416beaaf746fd4411266f580b75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>register_gpiod</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>aae75b67e2e457e9d9482512db8df197b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>register_idnum</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>af34cf7bbfbcc9fac89abf091220be710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>address</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>af3f726014b044194def151079f1f2d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>multiple</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>aef451c0c5d9b7931f5c6faa603f29d9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>cmdtype</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a595b72e7c0895fd09f4bce57f6ee7825</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>alsomustbezero</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a43cc47d7cb51d8be01e4a24b203c08a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>stat</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a3e0101ab4f197aedba71e5ed14c6bf20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>chop</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>ae5b922fbe9bd1e1939b543813d2c0a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>clkout</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>ae12c051a0c26fab2360f442ca7f5dba2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>bypass</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>ab9db0440c25feb3e3898f8615c9f5d93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>muxmod</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>ae369794bf5978ccd7cd48508cdd1e927</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>spiresettimeout</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>ac8cc010b0bf6465c9dcce3a465c9e5eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>mustbezero</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a4653ca72480bfd4967335b87d2b22091</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>datarate</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>ae43cdedfa65fee43c251fb7a46a4ac32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>sensorbiascurrent</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a120360c6c479a735c210710e0084b4a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>delay</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a70fbd315df33bf9039e036725b569e7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>idlemode</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a2fb3ef1bb6db44f432cc28147a6d58f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>chan_posin</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>aa1e1100d3be9e16151bef92db9dfd960</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>chan_negin</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a4eeb3539891e2f9f83b214a2eb3a2062</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>scan_offset</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>ab45acd2fcbbe09ce9049d9580129faa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>reserve2</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a184bd7574d1161029b980dea64a3b9d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>scan_vcc</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a163d2009a9f8f4bbad5ec1175e864dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>scan_temp</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>affa303cfbf9a2698c9e92aa6823bc68a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>scan_gain</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a6c29b9d3b9e91d4284435f2d207b3422</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>scan_ref</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>a87353190d6d9c115bda4a2c5bd63b543</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>reserve1</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>ae60eec7f17bb301e027ed4b343cb8177</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>reserve0</name>
      <anchorfile>ads1258_8h.html</anchorfile>
      <anchor>ae92bcee56df4a27475425685757a3c16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_diff0</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>ad6dd0c00376acd4f3e43e00b3c99907d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_diff1</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a0e15738cb063644cbb9216298cda9df1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_diff2</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>ac155af35ae1612285fc06d04fe1cbabc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_diff3</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a456a00c3eb54198fde7de929cf73628d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_diff4</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>afce396f611c5e333eda61cc07c0dc081</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_diff5</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a4380d4c4d750f05f38f94aa7b8f07ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_diff6</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a496ad75c368e58a3bf80cb1d5d584e42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_diff7</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a83439930ce45c1bdaac87821cc54a3e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se0</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>aa0dc2b562b9e90964cdeb2fccaf1627a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se1</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>af2caeb8ddf836d4f54559bb6ef0d8ec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se2</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>aaba9fdb5a11301b8875bd55496768ba0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se3</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a04d2255100365d41d53d2e0869896b55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se4</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a8adde10e6ea86f3f43d99b7e8ca9ddf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se5</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>ac265d8a19337356f6bb490a7b5782540</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se6</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a1c594e601419345b06bfadc311ebb8ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se7</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a262a07edc5293f16fd851bf03aa03679</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se8</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>affef09c61ec30862725c24a709eff94c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se9</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a753373ad54627d1bbe20ce570a8e884a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se10</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>aa231ce40385fba5052a1a58c7dc7fe6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se11</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>ad1bfcf2160d76ca0c5c12754519cebfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se12</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a0b9c3d462d7159caa52bd8e55aeaac93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se13</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>aab776c2868d0935a10bb4a2f1874f798</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se14</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a1962625d026ebb93ba3363735f4218b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se15</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a7ea79f36d850327fe172dcba5548700c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_offset</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a6f61fd3fb6c0608974cab6d803061203</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_zeroed</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a1443321c2f01d7eaa9779424191ea31e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_vcc</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>aa491d2ca26601f1948758ffe7ffbae8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_temp</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a985283d4173dbccb7b37a0e9a58adddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_gain</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>abc1198ef40a721271e06cb73eab9f973</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_ref</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>ab0667e53d9af114a6a6be78fc6c37c57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>ads1258numchannels</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a9f52a007170fa8cdcff306d109b8be99</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AsciiCmdUserInterfaceLinux.cpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/uart/</path>
    <filename>AsciiCmdUserInterfaceLinux_8cpp.html</filename>
    <includes id="CmdSystem_8hpp" name="CmdSystem.hpp" local="yes" imported="no">uart/CmdSystem.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>stdio_hook_putc</name>
      <anchorfile>AsciiCmdUserInterfaceLinux_8cpp.html</anchorfile>
      <anchor>ae38351e5c1109c5ce8e709b8b7d71ba4</anchor>
      <arglist>(int c)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>StdInClientThread</name>
      <anchorfile>AsciiCmdUserInterfaceLinux_8cpp.html</anchorfile>
      <anchor>a8e6447f1320392efc308cbf259c0827a</anchor>
      <arglist>(void *argument)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>StartUserInterface</name>
      <anchorfile>AsciiCmdUserInterfaceLinux_8cpp.html</anchorfile>
      <anchor>afcda4dedfc669a74848ccc03ef5b0cef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ProcessUserInterface</name>
      <anchorfile>AsciiCmdUserInterfaceLinux_8cpp.html</anchorfile>
      <anchor>af6bb8d1b921393ea995d9fb4234c7df3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Wait50</name>
      <anchorfile>AsciiCmdUserInterfaceLinux_8cpp.html</anchorfile>
      <anchor>ad7c191ddec91ddb0f058ff037940df58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>strupr</name>
      <anchorfile>AsciiCmdUserInterfaceLinux_8cpp.html</anchorfile>
      <anchor>a30da742ecd74e7787464853cb67205f7</anchor>
      <arglist>(char *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParseConfigFile</name>
      <anchorfile>AsciiCmdUserInterfaceLinux_8cpp.html</anchorfile>
      <anchor>a6aef2377cea5ca7becf3cdda0f6b0075</anchor>
      <arglist>(const char *ConfigFileName)</arglist>
    </member>
    <member kind="variable">
      <type>const Cmd</type>
      <name>AsciiCmds</name>
      <anchorfile>AsciiCmdUserInterfaceLinux_8cpp.html</anchorfile>
      <anchor>ad0c91f9ba14475061a70898b18dfa76c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>NumAsciiCmds</name>
      <anchorfile>AsciiCmdUserInterfaceLinux_8cpp.html</anchorfile>
      <anchor>ad4b053f9f9c27e806f53ab6c99f55bc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>linelen</name>
      <anchorfile>AsciiCmdUserInterfaceLinux_8cpp.html</anchorfile>
      <anchor>a8f771d1f3aa6007f5dbd90b7d7bd2070</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>newline</name>
      <anchorfile>AsciiCmdUserInterfaceLinux_8cpp.html</anchorfile>
      <anchor>a5e1a07804adbb8144b32aa8415d229a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>linemaxlen</name>
      <anchorfile>AsciiCmdUserInterfaceLinux_8cpp.html</anchorfile>
      <anchor>aca531d79fdf76265d8f193f4e4e23b70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>line</name>
      <anchorfile>AsciiCmdUserInterfaceLinux_8cpp.html</anchorfile>
      <anchor>a2a038bc4ecbc39f2662a2ebf174197c2</anchor>
      <arglist>[linemaxlen]</arglist>
    </member>
    <member kind="variable">
      <type>pthread_mutex_t</type>
      <name>linelock</name>
      <anchorfile>AsciiCmdUserInterfaceLinux_8cpp.html</anchorfile>
      <anchor>a49e79d712dfb4a9f7baacf131ecd6ff3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AsciiCmdUserInterfaceLinux.h</name>
    <path>/home/summer/projects/CGraph/firmware/include/uart/</path>
    <filename>AsciiCmdUserInterfaceLinux_8h.html</filename>
    <includes id="CmdSystem_8hpp" name="CmdSystem.hpp" local="yes" imported="no">uart/CmdSystem.hpp</includes>
    <member kind="function">
      <type>void *</type>
      <name>StdInClientThread</name>
      <anchorfile>AsciiCmdUserInterfaceLinux_8h.html</anchorfile>
      <anchor>a0cdb8064b0843f9721bc11531a832fc8</anchor>
      <arglist>(void *argument)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>StartUserInterface</name>
      <anchorfile>AsciiCmdUserInterfaceLinux_8h.html</anchorfile>
      <anchor>afcda4dedfc669a74848ccc03ef5b0cef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ProcessUserInterface</name>
      <anchorfile>AsciiCmdUserInterfaceLinux_8h.html</anchorfile>
      <anchor>af6bb8d1b921393ea995d9fb4234c7df3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ParseConfigFile</name>
      <anchorfile>AsciiCmdUserInterfaceLinux_8h.html</anchorfile>
      <anchor>a6aef2377cea5ca7becf3cdda0f6b0075</anchor>
      <arglist>(const char *ConfigFileName)</arglist>
    </member>
    <member kind="variable">
      <type>const Cmd</type>
      <name>AsciiCmds</name>
      <anchorfile>AsciiCmdUserInterfaceLinux_8h.html</anchorfile>
      <anchor>ad0c91f9ba14475061a70898b18dfa76c</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>NumAsciiCmds</name>
      <anchorfile>AsciiCmdUserInterfaceLinux_8h.html</anchorfile>
      <anchor>ad4b053f9f9c27e806f53ab6c99f55bc3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BinaryUart.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/uart/</path>
    <filename>BinaryUart_8hpp.html</filename>
    <includes id="fixedqueue_8hpp" name="fixedqueue.hpp" local="yes" imported="no">fixedqueue.hpp</includes>
    <includes id="IUart_8h" name="IUart.h" local="yes" imported="no">uart/IUart.h</includes>
    <includes id="CmdSystem_8hpp" name="CmdSystem.hpp" local="yes" imported="no">uart/CmdSystem.hpp</includes>
    <includes id="IProtocol_8hpp" name="IProtocol.hpp" local="yes" imported="no">uart/IProtocol.hpp</includes>
    <includes id="IPacket_8hpp" name="IPacket.hpp" local="yes" imported="no">uart/IPacket.hpp</includes>
    <includes id="IUartParser_8hpp" name="IUartParser.hpp" local="yes" imported="no">uart/IUartParser.hpp</includes>
    <class kind="struct">BinaryUartCallbacks</class>
    <class kind="struct">BinaryUart</class>
    <member kind="function">
      <type>__inline__ void</type>
      <name>TxBinaryPacket</name>
      <anchorfile>BinaryUart_8hpp.html</anchorfile>
      <anchor>ae47920159a0fa225774850d555e408f6</anchor>
      <arglist>(const void *TxPktContext, const uint16_t PayloadTypeToken, const uint32_t SerialNumber, const void *PayloadData, const size_t PayloadLen)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CGraphCommon.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/cgraph/</path>
    <filename>CGraphCommon_8hpp.html</filename>
    <includes id="UartStatusRegister_8hpp" name="UartStatusRegister.hpp" local="yes" imported="no">uart/UartStatusRegister.hpp</includes>
    <class kind="union">AdcAccumulator</class>
    <class kind="union">AdcTimestamp</class>
    <class kind="union">AdcFifo</class>
    <class kind="union">CGraphBaudDividers</class>
    <class kind="union">CGraphMonitorAdcCommandStatusRegister</class>
    <member kind="function">
      <type>union AdcAccumulator</type>
      <name>__attribute__</name>
      <anchorfile>CGraphCommon_8hpp.html</anchorfile>
      <anchor>ac70f9b23ca5061b57ea75f896d8f1a18</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AdcAccumulator</name>
      <anchorfile>CGraphCommon_8hpp.html</anchorfile>
      <anchor>ac90b21bf256898b135aca3223548d9a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>formatf</name>
      <anchorfile>CGraphCommon_8hpp.html</anchorfile>
      <anchor>a9f573dbd37f866eb7c33792daf23f413</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AdcFifo</name>
      <anchorfile>CGraphCommon_8hpp.html</anchorfile>
      <anchor>a07469c69af788cfd3a81e2429f117c11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphBaudDividers</name>
      <anchorfile>CGraphCommon_8hpp.html</anchorfile>
      <anchor>a699e386c5d2ff1c767494ffd82dff55f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphMonitorAdcCommandStatusRegister</name>
      <anchorfile>CGraphCommon_8hpp.html</anchorfile>
      <anchor>ad39e468348181a5669fb2804b0fa9f55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int64_t</type>
      <name>Samples</name>
      <anchorfile>CGraphCommon_8hpp.html</anchorfile>
      <anchor>a841e5e5b6db28a02ed610cd8b26fc8d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64_t</type>
      <name>reserved</name>
      <anchorfile>CGraphCommon_8hpp.html</anchorfile>
      <anchor>afea634b42a4b00cbff69501573736ced</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>NumAccums</name>
      <anchorfile>CGraphCommon_8hpp.html</anchorfile>
      <anchor>a05aab2d266937c20c1f5800d7350d418</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64_t</type>
      <name>all</name>
      <anchorfile>CGraphCommon_8hpp.html</anchorfile>
      <anchor>a7a41c6ef718cad373b525faf8cb8fa7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>SubsecondTicks</name>
      <anchorfile>CGraphCommon_8hpp.html</anchorfile>
      <anchor>aa2a21d47cd215c32825da9c7028ce123</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UnixTimeLsbs</name>
      <anchorfile>CGraphCommon_8hpp.html</anchorfile>
      <anchor>a26392104bebbe8177d38030c4c5949ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>Sample</name>
      <anchorfile>CGraphCommon_8hpp.html</anchorfile>
      <anchor>ab328df69ce4b83d11dc705e2d728c1b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcTimestamp</type>
      <name>Timestamp</name>
      <anchorfile>CGraphCommon_8hpp.html</anchorfile>
      <anchor>aeeca56b4f44b82f4fee2fb64a1e109b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Divider0</name>
      <anchorfile>CGraphCommon_8hpp.html</anchorfile>
      <anchor>ad2d624e1a5acab3c427d2545bccb2846</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Divider1</name>
      <anchorfile>CGraphCommon_8hpp.html</anchorfile>
      <anchor>a7c93e4e793afbbe27b607a659ba29dfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Divider2</name>
      <anchorfile>CGraphCommon_8hpp.html</anchorfile>
      <anchor>a7166a2e6d1d8fa2b71264bcb05b47106</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Divider3</name>
      <anchorfile>CGraphCommon_8hpp.html</anchorfile>
      <anchor>af834f85cbbbf6ec7ae7a45037963bf89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>FrameEnable</name>
      <anchorfile>CGraphCommon_8hpp.html</anchorfile>
      <anchor>ae70b5b546821443a19c48eeab69aa6f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>TransactionComplete</name>
      <anchorfile>CGraphCommon_8hpp.html</anchorfile>
      <anchor>a0e22826a0a62f240f190a7f11bb9b4a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>nDrdy</name>
      <anchorfile>CGraphCommon_8hpp.html</anchorfile>
      <anchor>ac20bc44baaf139b60bec7a16d6e9cb58</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CGraphDeprecatedPZTHardwareInterface.cpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/cgraph/</path>
    <filename>CGraphDeprecatedPZTHardwareInterface_8cpp.html</filename>
    <includes id="CGraphFSMHardwareInterface_8hpp" name="CGraphFSMHardwareInterface.hpp" local="yes" imported="no">CGraphFSMHardwareInterface.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>FPGA_MEM_ADDR</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8cpp.html</anchorfile>
      <anchor>a80fd14f27e03612c669c66e42082fdf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FPGA_MAP_MASK</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8cpp.html</anchorfile>
      <anchor>a60985fedab27865c3c71beb3818a03bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CGraphDeprecatedPZTHardwareInterface.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/cgraph/</path>
    <filename>CGraphDeprecatedPZTHardwareInterface_8hpp.html</filename>
    <includes id="UartStatusRegister_8hpp" name="UartStatusRegister.hpp" local="yes" imported="no">uart/UartStatusRegister.hpp</includes>
    <includes id="CGraphCommon_8hpp" name="CGraphCommon.hpp" local="yes" imported="no">CGraphCommon.hpp</includes>
    <class kind="union">CGraphFSMHardwareControlRegister</class>
    <class kind="union">CGraphFSMHardwareStatusRegister</class>
    <class kind="struct">CGraphFSMHardwareInterface</class>
    <class kind="class">CGraphFSMProtoHardwareMmapper</class>
    <member kind="function">
      <type>union CGraphFSMHardwareControlRegister</type>
      <name>__attribute__</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a6e5287cf8752b0711265e855d74ea226</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphFSMHardwareControlRegister</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a6851dd04984ad1ca42c5738bfa7244e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphFSMHardwareStatusRegister</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a172eb1f078cf015d9dac3ad41c23fee4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>HighVoltageEnable</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a1ffa9bb2e148fb9f6b26c59876a9e53c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>P1p2VEnable</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>ae9b48a07ef18d31d46474e19860674c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>P3p3VDEnable</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>ab076cbb0bf4b351442adad47522e6018</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>PAnalogVEnable</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a6b24f0643fbc41c1bbc3fbcb5d6be9fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>SyncAdcs</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a882231f6c61df2982aa4776ae8d765b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>ForceChopper</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>ae076f1746bdc721017b8ffe463e13559</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>ChopperNonInverted</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a12b4625a4af602b9e8ae3a0f876222f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>AdcDownsampleRatio</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>aefa94a3d14c11daab57261db143e450c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>all</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a7a41c6ef718cad373b525faf8cb8fa7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PPSDetected</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>aa982d3ed464731e4e1879f55c6984da4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>HVFaultA</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a740b8cec4bb76937d4e1f4d233330086</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>HVFaultB</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a7c855444406f7c7ee8b96f7e50b3bacd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>HVFaultC</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>abdd31ab05d80c5055116762e64b87d3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DeviceSerialNumber</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a543823278820ea2cea98b1b303acd6eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>FpgaFirmwareBuildNumber</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a71913a0046a5b77a2336fa9e0285c166</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UnixSeconds</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a077b0aa29c5a790b43c913b1611d0107</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>IdealTicksPerSecond</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a84e76d810b44fa1f03ad1ccabc9c3d01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ActualTicksLastSecond</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>af600e624ab66902b085b75e34e567b72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ClockTicksThisSecondAddr</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>aa9b7f1b68555d253c3eaddf66e19e9bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ClockSteeringDacSetpoint</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a0eda2a4a12792681c8c6350f4c369f90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DacASetpoint</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a58a70b0274b5527df59aa1d2835ebfab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DacBSetpoint</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a647fab2a6b1d44b0ee7fd899e9cdccdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DacCSetpoint</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a804cc754c375554b94fb5ff097b8f709</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>AdcAAccumulator</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>abf9f30641ce7555868806cbeb852264e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>AdcBAccumulator</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a84c9f74803b7a6fe78bd6126f887c9cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>AdcCAccumulator</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>af1fc7d822fcc8939a016491993aad074</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcFifo</type>
      <name>AdcAFifo</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>ac6d9905f5e1271f0b1644bf3aee03e27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcFifo</type>
      <name>AdcBFifo</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>adcd253ef73c5ae7a5c046c908f09c373</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcFifo</type>
      <name>AdcCFifo</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>af6ef0de9205986fb137f53b1ba767297</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFSMHardwareControlRegister</type>
      <name>ControlRegister</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>aad99e1d56e13f0ce92c51c3d1c8a02af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFSMHardwareStatusRegister</type>
      <name>StatusRegister</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a16a2b5ff60415acad56c9d862e4732e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>PPSRtcPhaseComparator</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>abc79d1fcfa283598169f53e5a77d1b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>PPSAdcPhaseComparator</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a586e815948a0aa5f55a67c08902269f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>MonitorAdcAccumulator</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a540711cfe47e638431d674e6ebcc2128</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>reserved</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>aa43c4c21b173ada1b6b7568956f0d650</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo2</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a6d636b6127f48a3f35bf956ac69e3b6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UartStatusRegister</type>
      <name>UartStatusRegister2</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a73a653f38955ddba3e65baea3927aa2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo1</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a428072691c48821e578f5b5260caaa5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UartStatusRegister</type>
      <name>UartStatusRegister1</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a7c6ef995b9656d76c14b039d125657f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo0</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a39fb669147db05a6367b97a2c8f12a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UartStatusRegister</type>
      <name>UartStatusRegister0</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>ade21fe5713fd4e496e0a5ed0f3d3ca49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>BaudDivider0</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a47bfd18d8205ca1f1bd090d7c1c46955</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>BaudDivider1</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a92f7f32ce8c23bcff011dd351724c4ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>BaudDivider2</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a398b1f4bf17842e75c2a3c7fa2ec787d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>BaudDivider3</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a73fb96f4b8f88a0dbca1d780d0681828</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>MonitorAdcReadChannel</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a19c56d402b0171f47d6ef5fb65232c28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>MonitorAdcSpiTransactionRegister</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a28df7edaa2a9764356147c4153634548</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphMonitorAdcCommandStatusRegister</type>
      <name>MonitorAdcSpiCommandStatusRegister</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a67577dbcd41c5aaac609e73837d18a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint32_t</type>
      <name>DacFullScale</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>af7d09dcc8e7d5337b93436d6327788e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>DacDriverFullScaleOutputVoltage</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a78845d2c22a0bbda40168036365b820c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>PZTDriverFullScaleOutputTravel</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>a0bed98c577786a52a5ca851ff3639dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>class CGraphFSMProtoHardwareMmapper</type>
      <name>__attribute__</name>
      <anchorfile>CGraphDeprecatedPZTHardwareInterface_8hpp.html</anchorfile>
      <anchor>aa3995d0e62042afcea610c7ed7cb3588</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CGraphDMHardwareInterface.cpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/cgraph/</path>
    <filename>CGraphDMHardwareInterface_8cpp.html</filename>
    <includes id="CGraphDMHardwareInterface_8hpp" name="CGraphDMHardwareInterface.hpp" local="yes" imported="no">CGraphDMHardwareInterface.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>FPGA_MEM_ADDR</name>
      <anchorfile>CGraphDMHardwareInterface_8cpp.html</anchorfile>
      <anchor>a80fd14f27e03612c669c66e42082fdf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FPGA_MAP_MASK</name>
      <anchorfile>CGraphDMHardwareInterface_8cpp.html</anchorfile>
      <anchor>a60985fedab27865c3c71beb3818a03bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CGraphDMHardwareInterface.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/cgraph/</path>
    <filename>CGraphDMHardwareInterface_8hpp.html</filename>
    <includes id="CGraphFSMHardwareInterface_8hpp" name="CGraphFSMHardwareInterface.hpp" local="yes" imported="no">CGraphFSMHardwareInterface.hpp</includes>
    <class kind="union">CGraphDMCIHardwareControlRegister</class>
    <class kind="union">CGraphDMCIHardwareStatusRegister</class>
    <class kind="union">CGraphDMCIUartStatusRegister</class>
    <class kind="struct">CGraphDMCIHardwareInterface</class>
    <class kind="class">CGraphDMCIProtoHardwareMmapper</class>
    <member kind="function">
      <type>union CGraphDMCIHardwareControlRegister</type>
      <name>__attribute__</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>abe0f5dc5f8fa33b70d6e7fa249c15731</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphDMCIHardwareControlRegister</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>ae50d77a1d87321e4cc5b4a33e21f6d24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphDMCIHardwareStatusRegister</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a68fc2978387fcabaf46dcd4c24347d4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphDMCIUartStatusRegister</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>af989149ace52bad4cddbdff91733b7af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>formatf</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a9f573dbd37f866eb7c33792daf23f413</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>HighVoltageEnable</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a1ffa9bb2e148fb9f6b26c59876a9e53c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>PowerEnable</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a89a4ad57cae87fc70b0b9f4e51da52a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>all</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a7a41c6ef718cad373b525faf8cb8fa7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PPSDetected</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>aa982d3ed464731e4e1879f55c6984da4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>HVFault</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>add307f836fd9505aa4936468eebf5943</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>VNegFault</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a2d62d9dc0531cb1f1e9e749f969ad6df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>V1Fault</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a1efa0c48e19dbac386ea0f32ad562183</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>V3DmFault</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a6df0c5fbe2de48cabfa6e2fc14d1bdd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>V3FpgaFault</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a716005f69b136d832847d25847a796f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>V3AuxFault</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>aa975cf3e57a022ada3818303f294abff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>V5Fault</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a54aadb54cd0386ba7cac3df9551ae4a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>V6Fault</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>ac68532e4c6ddb8f0969a323565981421</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>V9Fault</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a860c971c1097b9178d0b092f9cfb4253</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartRxFifoEmpty</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a293eb66eeec0d00405e2c491dd0a3d03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartRxFifoFull</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>aff60225802f8145d9d37615949551f04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartTxFifoEmpty</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a7781b20682514c259f00cae85a693613</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartTxFifoFull</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>af80ea389dcbab6089c15dfd0e1a8b1e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>reserved1</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>aef9bb556c1530f5d648fd57e73b9a105</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartRxFifoCount</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>ad4b6d9b96697bb694e23ae3d34a36422</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartTxFifoCount</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a74a443e16c155d80d96f6b7ab5cf4c3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartRxFifoCountHi</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>ac79acfb72a0a50f47a5d59e29b4fc972</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartTxFifoCountHi</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a5acdbf34c4c915e5ae3a582c6e41f4e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>reserved2</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>ae673672452e4741c4ab7c174af880a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DeviceSerialNumber</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a543823278820ea2cea98b1b303acd6eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>FpgaFirmwareBuildNumber</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a71913a0046a5b77a2336fa9e0285c166</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UnixSeconds</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a077b0aa29c5a790b43c913b1611d0107</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>IdealTicksPerSecond</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a84e76d810b44fa1f03ad1ccabc9c3d01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ActualTicksLastSecond</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>af600e624ab66902b085b75e34e567b72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ClockTicksThisSecondAddr</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>aa9b7f1b68555d253c3eaddf66e19e9bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ClockSteeringDacSetpoint</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a0eda2a4a12792681c8c6350f4c369f90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DacChannelIndex</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a8e1aaf187f3e1015f8cf339342a7d744</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DacSetpoint</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>ae4c50b2dd5da86c3ebcda4eda725c482</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphDMCIHardwareControlRegister</type>
      <name>ControlRegister</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>aa5cbb700357b9bb0bb2a6dc1d22d58b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphDMCIHardwareStatusRegister</type>
      <name>StatusRegister</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a060c75d6b43e7e8d4d844567a4039be9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>PPSRtcPhaseComparator</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>abc79d1fcfa283598169f53e5a77d1b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>PPSAdcPhaseComparator</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a586e815948a0aa5f55a67c08902269f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>MonitorAdc0Accumulator</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a53da91a19b1aafd291e4273c369549b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>MonitorAdc0ReadChannel</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a4b17713bce7fb5199cd75e0e6c8e90f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>MonitorAdc1Accumulator</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>aca11662f19402a306afb6931e5138526</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>MonitorAdc1ReadChannel</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a2a8f553f2b6c14e9c28d48318e983310</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>DMController0MonitorAdcAccumulator</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a887521fd90f03576af8ca5979e03b54b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DMController0MonitorAdcReadChannel</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>aca09f279bf8ca0ca30675847b4faba95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>DMController1MonitorAdcAccumulator</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>aaad381a7832851f97cf17c1348749bdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DMController1MonitorAdcReadChannel</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a050ee349341fe41c8debad55fd3c2b5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>DMController2MonitorAdcAccumulator</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>ad766f01cbce1260614f73860cd180f1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DMController2MonitorAdcReadChannel</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>aeb9029ea4cb68ebcbbeb4f0bbc383b18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>DMController3MonitorAdcAccumulator</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>ae961c28624d867ac471cf81916e57b88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DMController3MonitorAdcReadChannel</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>ae224fec779c5b54302cfbfbfedca9a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>DMController4MonitorAdcAccumulator</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>aeb09f6c2b8b4de3a55dea40db7dbccd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DMController4MonitorAdcReadChannel</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>ac4edac558792b3834a1f7e60dbc800a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>DMController5MonitorAdcAccumulator</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>af2b08fc954bf4d42b0f68a9dd914bc91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DMController5MonitorAdcReadChannel</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>ab0c5abe533e7b24dc4960ad7dc642cfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo0</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a39fb669147db05a6367b97a2c8f12a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphDMCIUartStatusRegister</type>
      <name>UartStatusRegister0</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a5f06da458ca78365c3c71e2486f2538e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo1</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a428072691c48821e578f5b5260caaa5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphDMCIUartStatusRegister</type>
      <name>UartStatusRegister1</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>afea3a587a3f6a408e1dac4193a79317f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo2</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a6d636b6127f48a3f35bf956ac69e3b6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphDMCIUartStatusRegister</type>
      <name>UartStatusRegister2</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>afbcafa439db920ccdff753abafb3c40b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo3</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a3bd824d8dbb3df8e8bbc93ec0547515c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphDMCIUartStatusRegister</type>
      <name>UartStatusRegister3</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a1135489747a7b5ef3d4762be9f2e5141</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>BaudDivider0</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a47bfd18d8205ca1f1bd090d7c1c46955</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>BaudDivider1</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a92f7f32ce8c23bcff011dd351724c4ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>BaudDivider2</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a398b1f4bf17842e75c2a3c7fa2ec787d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>BaudDivider3</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a73fb96f4b8f88a0dbca1d780d0681828</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>SpiExtBusAddrOut</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>ae965658e99332606b314f61cd15a7f70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>SpiExtBusAddrIn</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>aed4ae92ec076f8766bc7e6a312da381b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>SpiExtBusDataOut</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>acd59335c0cfe9929e9b2d391d807b5f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>SpiExtBusDataIn</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a220845970f0978709d0f2469517c441a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>reserved</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a3e7bc79b205ceeedecb0ca1265c7f3cb</anchor>
      <arglist>[208]</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DacSetpoints</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a91a8a3eca6e0a699224bda5d61c46547</anchor>
      <arglist>[960]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint32_t</type>
      <name>DacFullScale</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>af7d09dcc8e7d5337b93436d6327788e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>DacDriverFullScaleOutputVoltage</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a78845d2c22a0bbda40168036365b820c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>DMCIDriverFullScaleOutputTravel</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a4e7120394b535e2e69ef1978c7eaec2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>class CGraphDMCIProtoHardwareMmapper</type>
      <name>__attribute__</name>
      <anchorfile>CGraphDMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a75b1f2ed3c2248475a72f05b4a5b74be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CGraphFSMHardwareInterface.cpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/cgraph/</path>
    <filename>CGraphFSMHardwareInterface_8cpp.html</filename>
    <includes id="CGraphFSMHardwareInterface_8hpp" name="CGraphFSMHardwareInterface.hpp" local="yes" imported="no">CGraphFSMHardwareInterface.hpp</includes>
    <member kind="variable">
      <type>CGraphFSMHardwareInterface *</type>
      <name>FSM</name>
      <anchorfile>CGraphFSMHardwareInterface_8cpp.html</anchorfile>
      <anchor>aa1fb4ddd1aaa6ad87a102512c3a2c825</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CGraphFSMHardwareInterface.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/cgraph/</path>
    <filename>CGraphFSMHardwareInterface_8hpp.html</filename>
    <includes id="UartStatusRegister_8hpp" name="UartStatusRegister.hpp" local="yes" imported="no">uart/UartStatusRegister.hpp</includes>
    <includes id="CGraphCommon_8hpp" name="CGraphCommon.hpp" local="yes" imported="no">cgraph/CGraphCommon.hpp</includes>
    <class kind="union">CGraphFSMHardwareControlRegister</class>
    <class kind="union">CGraphFSMHardwareStatusRegister</class>
    <class kind="struct">CGraphFSMHardwareInterface</class>
    <class kind="class">CGraphFSMProtoHardwareMmapper</class>
    <member kind="function">
      <type>union CGraphFSMHardwareControlRegister</type>
      <name>__attribute__</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a6e5287cf8752b0711265e855d74ea226</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphFSMHardwareControlRegister</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a6851dd04984ad1ca42c5738bfa7244e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphFSMHardwareStatusRegister</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a172eb1f078cf015d9dac3ad41c23fee4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>HighVoltageEnable</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a1ffa9bb2e148fb9f6b26c59876a9e53c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>P1p2VEnable</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>ae9b48a07ef18d31d46474e19860674c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>P3p3VDEnable</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>ab076cbb0bf4b351442adad47522e6018</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>PAnalogVEnable</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a6b24f0643fbc41c1bbc3fbcb5d6be9fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>SyncAdcs</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a882231f6c61df2982aa4776ae8d765b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>ForceChopper</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>ae076f1746bdc721017b8ffe463e13559</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>ChopperNonInverted</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a12b4625a4af602b9e8ae3a0f876222f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>AdcDownsampleRatio</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>aefa94a3d14c11daab57261db143e450c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>all</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a7a41c6ef718cad373b525faf8cb8fa7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PPSDetected</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>aa982d3ed464731e4e1879f55c6984da4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>HVFaultA</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a740b8cec4bb76937d4e1f4d233330086</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>HVFaultB</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a7c855444406f7c7ee8b96f7e50b3bacd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>HVFaultC</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>abdd31ab05d80c5055116762e64b87d3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DeviceSerialNumber</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a543823278820ea2cea98b1b303acd6eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>FpgaFirmwareBuildNumber</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a71913a0046a5b77a2336fa9e0285c166</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UnixSeconds</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a077b0aa29c5a790b43c913b1611d0107</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>IdealTicksPerSecond</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a84e76d810b44fa1f03ad1ccabc9c3d01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ActualTicksLastSecond</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>af600e624ab66902b085b75e34e567b72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ClockTicksThisSecondAddr</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>aa9b7f1b68555d253c3eaddf66e19e9bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ClockSteeringDacSetpoint</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a0eda2a4a12792681c8c6350f4c369f90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>reserved1</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>aef9bb556c1530f5d648fd57e73b9a105</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFSMHardwareControlRegister</type>
      <name>ControlRegister</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>aad99e1d56e13f0ce92c51c3d1c8a02af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>reserved2</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>ae673672452e4741c4ab7c174af880a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>reserved3</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a8ded643b2be45ebba2b5bef1026cc69d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DacASetpoint</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a58a70b0274b5527df59aa1d2835ebfab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DacBSetpoint</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a647fab2a6b1d44b0ee7fd899e9cdccdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DacCSetpoint</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a804cc754c375554b94fb5ff097b8f709</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DacDSetpoint</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>ae6aeb963112f72498af1930e475a6c82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>AdcAAccumulator</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>abf9f30641ce7555868806cbeb852264e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>AdcBAccumulator</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a84c9f74803b7a6fe78bd6126f887c9cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>AdcCAccumulator</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>af1fc7d822fcc8939a016491993aad074</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>AdcDAccumulator</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a9e665aa043d67336ca5aaf3c69679b0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>MonitorAdcAccumulator</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a540711cfe47e638431d674e6ebcc2128</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>MonitorAdcReadChannel</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a19c56d402b0171f47d6ef5fb65232c28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>MonitorAdcSpiTransactionRegister</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a28df7edaa2a9764356147c4153634548</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphMonitorAdcCommandStatusRegister</type>
      <name>MonitorAdcSpiCommandStatusRegister</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a67577dbcd41c5aaac609e73837d18a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphBaudDividers</type>
      <name>BaudDividers</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>abc384d2390d3ab9b017baa1edea77b09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo0</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a39fb669147db05a6367b97a2c8f12a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UartStatusRegister</type>
      <name>UartStatusRegister0</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>ade21fe5713fd4e496e0a5ed0f3d3ca49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo0ReadData</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a409757c6f1fdce19861890aa78c82a8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo1</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a428072691c48821e578f5b5260caaa5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UartStatusRegister</type>
      <name>UartStatusRegister1</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a7c6ef995b9656d76c14b039d125657f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo1ReadData</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a97aa357dafe49d5da51db2376b2493ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo2</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a6d636b6127f48a3f35bf956ac69e3b6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UartStatusRegister</type>
      <name>UartStatusRegister2</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a73a653f38955ddba3e65baea3927aa2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo2ReadData</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>ac5ca4f503cefb17087ca3ee391ee9e07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo3</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a3bd824d8dbb3df8e8bbc93ec0547515c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UartStatusRegister</type>
      <name>UartStatusRegister3</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>ae677765c65ce85ae796451efdd5ddec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo3ReadData</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a4e1e66c56b59f210440e90462bf6a706</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifoLab</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a66b92d04192e76e523b4740dc21a1561</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UartStatusRegister</type>
      <name>UartStatusRegisterLab</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>ae76e2d9b890b8b431d2e3aaa3ca87891</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifoLabReadData</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>ad246e9bafec216461c48ead05ca6267f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ExtSpiAddrOut</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>aa32cd347bcfdaa0ff1acf99f22cbf6e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ExtSpiAddrIn</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a8cc32d5855bc35aca87da119abb189bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ExtSpiXfer</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a5dd52c443b6f5ed05f834bb9115d1778</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ExtSpiReadback</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a5d3131d767396e85f9ff1ab46a23bb0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint32_t</type>
      <name>DacFullScale</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>af7d09dcc8e7d5337b93436d6327788e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>DacDriverFullScaleOutputVoltage</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a78845d2c22a0bbda40168036365b820c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>PZTDriverFullScaleOutputTravel</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>a0bed98c577786a52a5ca851ff3639dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>class CGraphFSMProtoHardwareMmapper</type>
      <name>__attribute__</name>
      <anchorfile>CGraphFSMHardwareInterface_8hpp.html</anchorfile>
      <anchor>aa3995d0e62042afcea610c7ed7cb3588</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CGraphFWHardwareInterface.cpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/cgraph/</path>
    <filename>CGraphFWHardwareInterface_8cpp.html</filename>
    <includes id="CGraphFWHardwareInterface_8hpp" name="CGraphFWHardwareInterface.hpp" local="yes" imported="no">CGraphFWHardwareInterface.hpp</includes>
    <member kind="variable">
      <type>CGraphFWHardwareInterface *</type>
      <name>FW</name>
      <anchorfile>CGraphFWHardwareInterface_8cpp.html</anchorfile>
      <anchor>a70b8824cc3c12e074900e5c8e49975fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CGraphFWHardwareInterface.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/cgraph/</path>
    <filename>CGraphFWHardwareInterface_8hpp.html</filename>
    <includes id="UartStatusRegister_8hpp" name="UartStatusRegister.hpp" local="yes" imported="no">uart/UartStatusRegister.hpp</includes>
    <includes id="CGraphCommon_8hpp" name="CGraphCommon.hpp" local="yes" imported="no">cgraph/CGraphCommon.hpp</includes>
    <class kind="union">CGraphFWHardwareControlRegister</class>
    <class kind="union">CGraphFWMotorControlStatusRegister</class>
    <class kind="union">CGraphFWPositionSenseRegister</class>
    <class kind="union">CGraphFWPositionStepRegister</class>
    <class kind="struct">CGraphFWHardwareInterface</class>
    <member kind="function">
      <type>union CGraphFWHardwareControlRegister</type>
      <name>__attribute__</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>abfe0a637da01cccb39ebc98c7d5fabe5</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphFWHardwareControlRegister</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a4f99bd03c2810b6f7015ed88f41c1bc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>formatf</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a9f573dbd37f866eb7c33792daf23f413</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphFWMotorControlStatusRegister</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a5a9e32981267db178a6a7010bca334a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphFWPositionSenseRegister</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a54e98f4f0573691dbee4bb20de7a907c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphFWPositionStepRegister</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a568dfce2a3f6467c8f408130dfb82dfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int16_t</type>
      <name>MidStep</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a4f6426f8e50a0fd960f28f696c7d0b8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PosLedsEnA</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a7b46e00dfd40e8a614ce3f7a4a54f202</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PosLedsEnB</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a2d813eb1b8f34d6a5110d4ba44dbf446</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>MotorEnable</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a1e8ce2098d0e6b638bcb070b3cd53209</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ResetSteps</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a6174a7b859e79dedd7429c3fd9a6e803</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>MotorAPlus</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a49c7a7b8eb5d00e554d56e25395d1ef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>MotorAMinus</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>aa21e7eaee6689e50c7aa4bc7e6237498</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>MotorBPlus</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>ae496e742c4f28c1b0b2a3ef4967cd763</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>MotorBMinus</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>af3e0b2336809f071d3e1d77889a994b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Fault1V</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a4591125a520e4f68d2a11cb785b84b97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Fault3V</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a5490ff4bce56ab630b26b7714e119143</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Fault5V</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a60d513d7dd94f4c53d393a965c3e8b24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PowernEn5V</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>ad92dcd79af619d77da346f1b832809ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PowerCycd</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>ade5c33e9b3c91b990909ee1224a6f5ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>LedR</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>aee62617d524e93abf5690b6a724efb27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>LedG</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>adacac334291a8d490b906339a30ba94b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>LedB</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a613e7f953022a19aeeb178b074c0137b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Uart0OE</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a8851c1125bbd9c7d2a4cd7b22833c800</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Uart1OE</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a39170c1dd7e9ac1bda05e3d7d4e92279</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Uart2OE</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>ad7546d7989cd343920fa3078ab37b920</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Uart3OE</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a173c9dd7aa46f73e5e30489633d19eb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Ux1SelJmp</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a93489d2a7b04b63da093195592442d4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Ux2SelJmp</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>ab5e0375ee712b58abbea73cf1e6e2617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>all</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a940c332e339bf3f9e28267da875e8d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16_t</type>
      <name>SeekStep</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a1829835581680d6588b3d4d354845688</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16_t</type>
      <name>CurrentStep</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>af5a6600b8768155620abbfcaae55f2bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PosSenseHomeA</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a1aaf36175615394b08280e1866b59af8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PosSenseBit0A</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>ab9547fb2c3c62c4dfd70cd3a7c22b993</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PosSenseBit1A</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a8582976ec5aa853d474ba3c01c3fa841</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PosSenseBit2A</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a99996d0ee2c0c6472934c9d2219c39b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PosSenseHomeB</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a39a890091e0991edec6e2b487976a9e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PosSenseBit0B</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>ad5c998a41ed56a0211bd9f9bd9308fcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PosSenseBit1B</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a583add8e2b8c23d8a0351caa8b36b01e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PosSenseBit2B</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>aadaa6cf287458bbb4199b1ce8261c17e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PosSenseA</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a41946a7d478334cd55e90814ab0f5303</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PosSenseB</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>aeb97a0b3fd584467a87d01bf5f315614</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16_t</type>
      <name>OnStep</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>adf980713af479678cf150063d00870d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>reserved1</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a6b89b86dfe0266be2fc46cf46f6e7b72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16_t</type>
      <name>OffStep</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>abc17feb9ed55e2ced1b65b8bb5d291f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>reserved2</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a0fc429b055e74830a4583ec37f5c3846</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DeviceSerialNumber</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a543823278820ea2cea98b1b303acd6eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>FpgaFirmwareBuildNumber</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a71913a0046a5b77a2336fa9e0285c166</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UnixSeconds</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a077b0aa29c5a790b43c913b1611d0107</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>IdealTicksPerSecond</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a84e76d810b44fa1f03ad1ccabc9c3d01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ActualTicksLastSecond</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>af600e624ab66902b085b75e34e567b72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ClockTicksThisSecondAddr</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>aa9b7f1b68555d253c3eaddf66e19e9bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ClockSteeringDacSetpoint</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a0eda2a4a12792681c8c6350f4c369f90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>PPSRtcPhaseComparator</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>abc79d1fcfa283598169f53e5a77d1b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWHardwareControlRegister</type>
      <name>ControlRegister</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a03c9e402fa6fe31f6c0c70468a31050d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWMotorControlStatusRegister</type>
      <name>MotorControlStatus</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>aa84bd81ecebcc5e4059f661815fe9805</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionSenseRegister</type>
      <name>PositionSensors</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a573f6c8b66d4c6d8741ea94a8abaea0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>MonitorAdcAccumulator</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a540711cfe47e638431d674e6ebcc2128</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>MonitorAdcReadChannel</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a19c56d402b0171f47d6ef5fb65232c28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>MonitorAdcSpiTransactionRegister</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a28df7edaa2a9764356147c4153634548</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphMonitorAdcCommandStatusRegister</type>
      <name>MonitorAdcSpiCommandStatusRegister</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a67577dbcd41c5aaac609e73837d18a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphBaudDividers</type>
      <name>BaudDividers</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>abc384d2390d3ab9b017baa1edea77b09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo0</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a39fb669147db05a6367b97a2c8f12a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UartStatusRegister</type>
      <name>UartStatusRegister0</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>ade21fe5713fd4e496e0a5ed0f3d3ca49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo0ReadData</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a409757c6f1fdce19861890aa78c82a8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo1</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a428072691c48821e578f5b5260caaa5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UartStatusRegister</type>
      <name>UartStatusRegister1</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a7c6ef995b9656d76c14b039d125657f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo1ReadData</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a97aa357dafe49d5da51db2376b2493ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo2</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a6d636b6127f48a3f35bf956ac69e3b6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UartStatusRegister</type>
      <name>UartStatusRegister2</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a73a653f38955ddba3e65baea3927aa2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo2ReadData</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>ac5ca4f503cefb17087ca3ee391ee9e07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo3</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a3bd824d8dbb3df8e8bbc93ec0547515c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UartStatusRegister</type>
      <name>UartStatusRegister3</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>ae677765c65ce85ae796451efdd5ddec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo3ReadData</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a4e1e66c56b59f210440e90462bf6a706</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifoUsb</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a698848949974b3bca3579edf0d5ed718</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UartStatusRegister</type>
      <name>UartStatusRegisterUsb</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a5870d2b86c53a6b480caff473f125c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifoUsbReadData</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>aa5ddf138925a12f7afd7d65dc4f35658</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifoGps</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a965615e6351bc46f89da45acc142cee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UartStatusRegister</type>
      <name>UartStatusRegisterGps</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>add1e4778fb3ccce4a48ec9e9a07058d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifoGpsReadData</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>ace4869fede63f0480e8c509dbdf0af64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDetHomeA</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>aa13104b91e8419c23526ac9f7b498dca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDetA0</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a457f63375672330918ca211003fe57be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDetA1</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a0d859a36f5d53dba0140d67986c3d475</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDetA2</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a4cb84c79bec5cdad7692c8f8f745457c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDetHomeB</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a733268c28d634266ba885a6622e78508</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDetB0</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a954c83eb5e574dafb7956550647cdf7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDetB1</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a86db3ddf522030da6e95e9725c53a64b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDetB2</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>ae571c786a6ee9026ed15e1707e5a1054</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet0A</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a763e8c86f4a87ed848b84fdd7732d39d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet1A</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a828064404d5cb64c1b9d898b6ddeb5db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet2A</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a4c6fd0c9324832c1c693e6ec0a53b383</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet3A</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>adfde7cfde8ebf4ef390ab9e6891c439e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet4A</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a212e38032a5efb78018a289f76047653</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet5A</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>adbf1dec925e58688a0afef2c902d0051</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet6A</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a8f13e0cecd9e636398a16b45e688cfe1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet7A</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a2b0ca222ca1ce9dd1bd0b0eb3c940def</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet0B</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>ad026af673948a17fd40b498dbd3b2744</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet1B</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a2e41a75fd346cc8a7e872accc79998a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet2B</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>ab04126723027a63386a9ea262f802bd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet3B</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a97533b996d670b0445ce418ed34e38b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet4B</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a372c1753fe2d953af71ab23802d7c28f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet5B</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>ac1a7729786c45558276b35c9162b15f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet6B</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a42bcf2588d591d5e691efa66ccab3318</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet7B</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>accee8b0a5747a4433426b90a6502cb71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWHardwareInterface *</type>
      <name>FW</name>
      <anchorfile>CGraphFWHardwareInterface_8hpp.html</anchorfile>
      <anchor>a70b8824cc3c12e074900e5c8e49975fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CGraphPacket.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/cgraph/</path>
    <filename>CGraphPacket_8hpp.html</filename>
    <includes id="IPacket_8hpp" name="IPacket.hpp" local="yes" imported="no">uart/IPacket.hpp</includes>
    <includes id="Crc32Bzip2_8h" name="Crc32Bzip2.h" local="yes" imported="no">uart/Crc32Bzip2.h</includes>
    <class kind="struct">CGraphPacketHeader</class>
    <class kind="struct">CGraphPacketFooter</class>
    <class kind="class">CGraphPacket</class>
    <class kind="struct">CGraphVersionPayload</class>
    <class kind="struct">CGraphHardFaultPayload</class>
    <class kind="struct">CGraphFSMTelemetryPayload</class>
    <class kind="struct">CGraphDMTelemetryPayload</class>
    <class kind="struct">CGraphFWTelemetryPayload</class>
    <member kind="define">
      <type>#define</type>
      <name>_IPacket_H_</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>a401cb9e4affb56260cca0793b28affac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FWFilterSelectPositions</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>aa4fc6a4c12a79c1292b2c01b4b218fc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FW_MOVING</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>aa4fc6a4c12a79c1292b2c01b4b218fc3ad8d965f0a7eaec0a1e671873739f8fa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FW_SUNSAFE</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>aa4fc6a4c12a79c1292b2c01b4b218fc3a61749a714c053f06f3a115c2857f83c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILTERWHEEL_ONE</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>aa4fc6a4c12a79c1292b2c01b4b218fc3aab56024fd0c210f515fd46287858540c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILTERWHEEL_TWO</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>aa4fc6a4c12a79c1292b2c01b4b218fc3a31e38ce6d0542d9571e92c80da0a3450</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILTERWHEEL_THREE</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>aa4fc6a4c12a79c1292b2c01b4b218fc3a365051c8ebd1ddc4dc970fdab10a5b87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILTERWHEEL_FOUR</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>aa4fc6a4c12a79c1292b2c01b4b218fc3a9efed8e9ccd8e15d5b7885d2e7ecf8ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILTERWHEEL_FIVE</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>aa4fc6a4c12a79c1292b2c01b4b218fc3a01e027b8329a6813ecbe9b5b610c7cff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILTERWHEEL_SIX</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>aa4fc6a4c12a79c1292b2c01b4b218fc3af55dc5460f65d6946f07e10b6347c54e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILTERWHEEL_SEVEN</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>aa4fc6a4c12a79c1292b2c01b4b218fc3a01f4b9fbb8ea986201145872e5aef554</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILTERWHEEL_EIGHT</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>aa4fc6a4c12a79c1292b2c01b4b218fc3aab0b1bae1bddab67f8dee7a53dc81430</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>struct CGraphPacketHeader</type>
      <name>__attribute__</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>a49678b01e64719360b60b588febeea62</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphPacketHeader</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>a303872f9ec2ea39f681f83a572cce743</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphPacketHeader</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>a2cb815641db2f790c96709e9466a8ee5</anchor>
      <arglist>(uint16_t packettype, uint16_t payloadtype, uint16_t payloadlen)</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>PayloadData</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>a61802ba1931ce2d0f5737550fae3aea8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>PayloadDataNonConst</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>ad9adf0e72cffaef1d45c39a0a0c10256</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>formatf</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>a9f573dbd37f866eb7c33792daf23f413</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphPacketFooter</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>a74484d4dda83dc5d0357021243551e87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint32_t</type>
      <name>CGraphMagikPacketStartToken</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>ab76a8079c6313c9a8909b4d40cc8866c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PacketStartToken</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>a688b5493d4c1e8cacef34cad8c768a1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>PayloadType</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>ad6c751e98dcdac3f5ee6f7dd7c0ea65d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>PayloadLen</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>af11405db7da0b07c17c2f8f6a352f116</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint32_t</type>
      <name>CGraphMagikPacketEndToken</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>a062d17f50dbc323f903b9972272758cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>CRC32BZIP2</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>aa5ad9224dd6f0f6563579b5937b2068b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PacketEndToken</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>a8871f1a7530b7434b084cfadfa07d25c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphPacket</type>
      <name>__attribute__</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>a344a33fc8d99e9c38ac6728dd51cf573</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>CGraphPayloadTypeVersionDeprecated</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>a22a26895954bea7770783d2dfc935cc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>CGraphPayloadTypeVersion</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>aef431d0e80acb8fccac2aca323682767</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>CGraphPayloadTypeBaudClock</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>a249cae06b22611d5519be6036ce007dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>CGraphPayloadTypeBaudDividers</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>aeacf73ad10ff6c4601448a95545a2965</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>CGraphPayloadTypeHardFault</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>a3a7834c57fbb99eebf3d0f2462162bf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>CGraphPayloadTypeFSMDacs</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>a9aa99c3ce9e57a7f20b944c7d22f5615</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>CGraphPayloadTypeFSMDacsDeprecated</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>a2f3282c4be1e331646b7a5024557ed89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>CGraphPayloadTypeFSMDacsFloatingPoint</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>a63e4f75ebf5fa64d52ea12a5ac95ddfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>CGraphPayloadTypeFSMDacsFloatingPointDeprecated</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>a0e10346861de6c27d782883efb62abac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>CGraphPayloadTypeFSMAdcs</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>a51d9a9b14d962e4bf49a2f7fea13af57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>CGraphPayloadTypeFSMAdcsDeprecated</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>ad09c4d8c777619d5fa5b7d373c3ec19d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>CGraphPayloadTypeFSMAdcsFloatingPoint</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>acf1ff4a4878411b84d5bb3fd63568648</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>CGraphPayloadTypeFSMAdcsFloatingPointDeprecated</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>a25b1d08c64a16892d175616fd150ae8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>CGraphPayloadTypeFSMTelemetry</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>ae8feb742b68aa8729469f9e0114e1000</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>CGraphPayloadTypeFSMStatusDeprecated</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>a37207addc8eefa08bb8ac50d4ec95e92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>CGraphPayloadTypeDMDac</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>a393c47385e27213682d1ac8b27d90381</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>CGraphPayloadTypeDMTelemetry</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>ab236e999bd22d2325c1b239da9e5e273</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>CGraphPayloadTypeDMHVSwitch</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>aea6e070129c897c336b2a52a90cc6b5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>CGraphPayloadTypeDMDacConfig</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>ad207ec2b39c6947ca6734af8489c08bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>CGraphPayloadTypeFWHardwareControlStatus</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>a0ab1dde59e28a85502113cc8c2ec85a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>CGraphPayloadTypeFWMotorControlStatus</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>a42672e7ea452bd35b3d3d2ceced5cffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>CGraphPayloadTypeFWPositionSenseControlStatus</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>aecd667d0f4f4aaa394ae1f41e65fa342</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>CGraphPayloadTypeFWPositionSteps</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>a214dfc4d5e9567e8d679af032efe5250</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>CGraphPayloadTypeFWTelemetry</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>a71a4fc912c5cc9539209cee3fbc3e210</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>CGraphPayloadTypeFWFilterSelect</name>
      <anchorfile>CGraphPacket_8hpp.html</anchorfile>
      <anchor>af99a1fedeaf7648c73e93fdd8b1c8afe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CmdSystem.cpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/uart/</path>
    <filename>CmdSystem_8cpp.html</filename>
    <includes id="CmdSystem_8hpp" name="CmdSystem.hpp" local="yes" imported="no">CmdSystem.hpp</includes>
    <member kind="function">
      <type>bool</type>
      <name>ParseCmd</name>
      <anchorfile>CmdSystem_8cpp.html</anchorfile>
      <anchor>a7c413a3979dc73f18c1be2d641135602</anchor>
      <arglist>(const char *LineIn, const unsigned int LineLen, const Cmd *Cmds, const size_t NumCmds, const bool Quiet, const char *Prefix, const unsigned int PrefixLen, const bool Binary, const void *Argument)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HelpCmds</name>
      <anchorfile>CmdSystem_8cpp.html</anchorfile>
      <anchor>a9e7f55c4524cd66f572c4a746fba5830</anchor>
      <arglist>(const Cmd *Cmds, const size_t NumCmds)</arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>MaxCmdNameLen</name>
      <anchorfile>CmdSystem_8cpp.html</anchorfile>
      <anchor>a823b0dc3d2f7c2fc12ee1bece06ee03d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static char</type>
      <name>LineInUpperCase</name>
      <anchorfile>CmdSystem_8cpp.html</anchorfile>
      <anchor>a4e06df43d5e7fbb98198c3af8369b15a</anchor>
      <arglist>[MaxCmdNameLen]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CmdSystem.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/uart/</path>
    <filename>CmdSystem_8hpp.html</filename>
    <class kind="struct">Cmd</class>
    <class kind="struct">BinaryCmd</class>
    <member kind="function">
      <type>bool</type>
      <name>ParseCmd</name>
      <anchorfile>CmdSystem_8hpp.html</anchorfile>
      <anchor>a9c6c1857624ad60747cadfccb32d4b9a</anchor>
      <arglist>(const char *LineIn, const unsigned int LineLen, const Cmd *Cmds, const size_t NumCmds, const bool Quiet=false, const char *Prefix=(const char *)(0), const unsigned int PrefixLen=0, const bool Binary=false, const void *Argument=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ParseBinaryCmd</name>
      <anchorfile>CmdSystem_8hpp.html</anchorfile>
      <anchor>ad0b1343157c3f259b6ab279001241a3d</anchor>
      <arglist>(const char *LineIn, const unsigned int LineLen, const BinaryCmd *Cmds, const size_t NumCmds, const bool Quiet=false, const char *Prefix=(const char *)(0), const unsigned int PrefixLen=0, const bool Binary=false, const void *Argument=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>HelpCmds</name>
      <anchorfile>CmdSystem_8hpp.html</anchorfile>
      <anchor>a9e7f55c4524cd66f572c4a746fba5830</anchor>
      <arglist>(const Cmd *Cmds, const size_t NumCmds)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Crc32Bzip2.c</name>
    <path>/home/summer/projects/CGraph/firmware/include/uart/</path>
    <filename>Crc32Bzip2_8c.html</filename>
    <member kind="function">
      <type>uint32_t</type>
      <name>CRC32BZIP2</name>
      <anchorfile>Crc32Bzip2_8c.html</anchorfile>
      <anchor>a9c110ad21d0c5174487bceeea4abdbc7</anchor>
      <arglist>(const uint8_t *data, const size_t length)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Crc32Bzip2.h</name>
    <path>/home/summer/projects/CGraph/firmware/include/uart/</path>
    <filename>Crc32Bzip2_8h.html</filename>
    <member kind="function">
      <type>uint32_t</type>
      <name>CRC32BZIP2</name>
      <anchorfile>Crc32Bzip2_8h.html</anchorfile>
      <anchor>a9c110ad21d0c5174487bceeea4abdbc7</anchor>
      <arglist>(const uint8_t *data, const size_t length)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Dac8830.h</name>
    <path>/home/summer/projects/CGraph/firmware/include/adc/</path>
    <filename>Dac8830_8h.html</filename>
    <class kind="struct">Dac8830</class>
  </compound>
  <compound kind="file">
    <name>Delay.h</name>
    <path>/home/summer/projects/CGraph/firmware/include/</path>
    <filename>Delay_8h.html</filename>
    <member kind="function">
      <type>void</type>
      <name>delayus</name>
      <anchorfile>Delay_8h.html</anchorfile>
      <anchor>a3bdb063fa6daf4ed6f77bfefa94a0027</anchor>
      <arglist>(const unsigned long microseconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delayms</name>
      <anchorfile>Delay_8h.html</anchorfile>
      <anchor>a94749ad3d68fd683c79257d1bca4a932</anchor>
      <arglist>(const unsigned long milliseconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delays</name>
      <anchorfile>Delay_8h.html</anchorfile>
      <anchor>a9ddcbe6043988c52648cd7d4041a1978</anchor>
      <arglist>(const unsigned long seconds)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DelayLinux.cpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/</path>
    <filename>DelayLinux_8cpp.html</filename>
    <includes id="Delay_8h" name="Delay.h" local="yes" imported="no">Delay.h</includes>
    <member kind="function">
      <type>void</type>
      <name>delayus</name>
      <anchorfile>DelayLinux_8cpp.html</anchorfile>
      <anchor>a3bdb063fa6daf4ed6f77bfefa94a0027</anchor>
      <arglist>(const unsigned long microseconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delayms</name>
      <anchorfile>DelayLinux_8cpp.html</anchorfile>
      <anchor>a94749ad3d68fd683c79257d1bca4a932</anchor>
      <arglist>(const unsigned long milliseconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delays</name>
      <anchorfile>DelayLinux_8cpp.html</anchorfile>
      <anchor>a9ddcbe6043988c52648cd7d4041a1978</anchor>
      <arglist>(const unsigned long seconds)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EzThread.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/</path>
    <filename>EzThread_8hpp.html</filename>
    <includes id="Delay_8h" name="Delay.h" local="yes" imported="no">Delay.h</includes>
    <class kind="class">EzThread</class>
  </compound>
  <compound kind="file">
    <name>fixedlist.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/</path>
    <filename>fixedlist_8hpp.html</filename>
    <class kind="class">fixedlist</class>
  </compound>
  <compound kind="file">
    <name>fixedlistlite.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/</path>
    <filename>fixedlistlite_8hpp.html</filename>
    <class kind="class">fixedlistlite</class>
  </compound>
  <compound kind="file">
    <name>fixedqueue.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/</path>
    <filename>fixedqueue_8hpp.html</filename>
    <class kind="class">fixedqueue</class>
  </compound>
  <compound kind="file">
    <name>fixedqueue_mt.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/</path>
    <filename>fixedqueue__mt_8hpp.html</filename>
    <class kind="class">fixedqueue_mt</class>
  </compound>
  <compound kind="file">
    <name>IPacket.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/uart/</path>
    <filename>IPacket_8hpp.html</filename>
    <class kind="class">IPacket</class>
  </compound>
  <compound kind="file">
    <name>IProtocol.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/uart/</path>
    <filename>IProtocol_8hpp.html</filename>
    <class kind="class">IProtocol</class>
    <member kind="define">
      <type>#define</type>
      <name>_IProtocol_H_</name>
      <anchorfile>IProtocol_8hpp.html</anchorfile>
      <anchor>a2acb39930a79868906017c08c2aa547e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IUart.h</name>
    <path>/home/summer/projects/CGraph/firmware/include/uart/</path>
    <filename>IUart_8h.html</filename>
    <class kind="class">IUart</class>
  </compound>
  <compound kind="file">
    <name>IUartParser.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/uart/</path>
    <filename>IUartParser_8hpp.html</filename>
    <includes id="IUart_8h" name="IUart.h" local="yes" imported="no">uart/IUart.h</includes>
    <class kind="class">IUartParser</class>
    <member kind="define">
      <type>#define</type>
      <name>_IUartParser_H_</name>
      <anchorfile>IUartParser_8hpp.html</anchorfile>
      <anchor>a8ebfd48784a5412d9a6afd31b01a0f6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>linux_pinout_circular_buffer.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/uart/</path>
    <filename>linux__pinout__circular__buffer_8hpp.html</filename>
    <includes id="IUart_8h" name="IUart.h" local="yes" imported="no">IUart.h</includes>
    <class kind="class">linux_pinout_circular_buffer</class>
  </compound>
  <compound kind="file">
    <name>linux_pinout_circular_buffer_bytes.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/uart/</path>
    <filename>linux__pinout__circular__buffer__bytes_8hpp.html</filename>
    <includes id="IUart_8h" name="IUart.h" local="yes" imported="no">IUart.h</includes>
    <class kind="class">linux_pinout_circular_buffer</class>
  </compound>
  <compound kind="file">
    <name>linux_pinout_circular_uart.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/uart/</path>
    <filename>linux__pinout__circular__uart_8hpp.html</filename>
    <includes id="IUart_8h" name="IUart.h" local="yes" imported="no">IUart.h</includes>
    <class kind="class">linux_pinout_circular_uart</class>
  </compound>
  <compound kind="file">
    <name>linux_pinout_client_socket.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/uart/</path>
    <filename>linux__pinout__client__socket_8hpp.html</filename>
    <includes id="IUart_8h" name="IUart.h" local="yes" imported="no">IUart.h</includes>
    <class kind="class">linux_pinout_client_socket</class>
    <member kind="define">
      <type>#define</type>
      <name>HOST_NAME_SIZE</name>
      <anchorfile>linux__pinout__client__socket_8hpp.html</anchorfile>
      <anchor>a797a7243dfb617f0dcc6aa4a0425ab5c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>linux_pinout_file.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/uart/</path>
    <filename>linux__pinout__file_8hpp.html</filename>
    <includes id="IUart_8h" name="IUart.h" local="yes" imported="no">IUart.h</includes>
    <class kind="class">linux_pinout_file</class>
  </compound>
  <compound kind="file">
    <name>linux_pinout_named_pipe.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/uart/</path>
    <filename>linux__pinout__named__pipe_8hpp.html</filename>
    <includes id="IUart_8h" name="IUart.h" local="yes" imported="no">IUart.h</includes>
    <class kind="class">linux_pinout_named_pipe</class>
  </compound>
  <compound kind="file">
    <name>linux_pinout_server_socket.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/uart/</path>
    <filename>linux__pinout__server__socket_8hpp.html</filename>
    <includes id="IUart_8h" name="IUart.h" local="yes" imported="no">IUart.h</includes>
    <class kind="class">linux_pinout_server_socket</class>
    <member kind="define">
      <type>#define</type>
      <name>HOST_NAME_SIZE</name>
      <anchorfile>linux__pinout__server__socket_8hpp.html</anchorfile>
      <anchor>a797a7243dfb617f0dcc6aa4a0425ab5c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>linux_pinout_stdio.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/uart/</path>
    <filename>linux__pinout__stdio_8hpp.html</filename>
    <includes id="IUart_8h" name="IUart.h" local="yes" imported="no">IUart.h</includes>
    <class kind="class">linux_pinout_stdio</class>
  </compound>
  <compound kind="file">
    <name>linux_pinout_uart.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/uart/</path>
    <filename>linux__pinout__uart_8hpp.html</filename>
    <includes id="IUart_8h" name="IUart.h" local="yes" imported="no">IUart.h</includes>
    <class kind="class">linux_pinout_uart</class>
  </compound>
  <compound kind="file">
    <name>lt244x.h</name>
    <path>/home/summer/projects/CGraph/firmware/include/adc/</path>
    <filename>lt244x_8h.html</filename>
    <includes id="Delay_8h" name="Delay.h" local="yes" imported="no">Delay.h</includes>
    <class kind="union">lt244xdetails::channel</class>
    <class kind="union">lt244xdetails::configregister</class>
    <class kind="union">lt244xdetails::lt244x_sample</class>
    <class kind="struct">lt244x</class>
    <namespace>lt244xdetails</namespace>
    <member kind="function">
      <type>union lt244xdetails::channel</type>
      <name>__attribute__</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>a19912fa47c0c2f76dd813fa1af42ba8c</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type>struct @24</type>
      <name>__attribute__</name>
      <anchorfile>lt244x_8h.html</anchorfile>
      <anchor>a5fcedb4e7a6bd0a08a6ba824768d5492</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>channel</name>
      <anchorfile>lt244x_8h.html</anchorfile>
      <anchor>a6fbbbfcaf139ba9908baa4b0fe030a59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>channel</name>
      <anchorfile>lt244x_8h.html</anchorfile>
      <anchor>ac91c05ff21a976d6ee091aec4a9f99b3</anchor>
      <arglist>(const uint8_t singleended, const uint8_t chanbit0, const uint8_t chanbits123)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>configregister</name>
      <anchorfile>lt244x_8h.html</anchorfile>
      <anchor>a234ff9b9829c89e872422e85d31177ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>lt244x_8h.html</anchorfile>
      <anchor>aba1020106342dea27dc545c103899e15</anchor>
      <arglist>(configregister &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const configregister &amp;</type>
      <name>operator=</name>
      <anchorfile>lt244x_8h.html</anchorfile>
      <anchor>a8a87cf5a1af5e54c829b75fa3459ba43</anchor>
      <arglist>(const channel rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lt244x_sample</name>
      <anchorfile>lt244x_8h.html</anchorfile>
      <anchor>ab5044ab7fc1c06920a3e04cfc1d391b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>lt244x_8h.html</anchorfile>
      <anchor>ab80ae82587af5fb3144393ca046957c3</anchor>
      <arglist>(lt244x_sample &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overrange</name>
      <anchorfile>lt244x_8h.html</anchorfile>
      <anchor>a669520d8a49558831216bc08218e02ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>underrange</name>
      <anchorfile>lt244x_8h.html</anchorfile>
      <anchor>adbf7dc87020e78ff14749e04cdb6b16f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CountsToVolts</name>
      <anchorfile>lt244x_8h.html</anchorfile>
      <anchor>ac975ade85eff98d4343c8fd510a517b5</anchor>
      <arglist>(const lt244xdetails::lt244x_sample &amp;Counts, const double &amp;AdcVRef) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>formatf</name>
      <anchorfile>lt244x_8h.html</anchorfile>
      <anchor>a6d15a129218f002b274e03281dca51f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int32_t</type>
      <name>CountPosVRef</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>a3951b32a4c79c5c1739a34dd293a0726</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int32_t</type>
      <name>CountZero</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>ac56d195d7ba99aabebe8c06503861f85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int32_t</type>
      <name>CountNegVRef</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>a8300e1afaced3982afe5b16d432194e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>ChannelBits123</name>
      <anchorfile>lt244x_8h.html</anchorfile>
      <anchor>a4ad6e941fe5eaec3a4ae41a6acc2eb65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>ChanBit0orInvertDiffChan</name>
      <anchorfile>lt244x_8h.html</anchorfile>
      <anchor>a4d1d5477d971d76c76488fc6fcc36391</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>SingleEnded</name>
      <anchorfile>lt244x_8h.html</anchorfile>
      <anchor>a75ca4175bd56a232c0624a3af06ba789</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>reserved</name>
      <anchorfile>lt244x_8h.html</anchorfile>
      <anchor>afea634b42a4b00cbff69501573736ced</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>all</name>
      <anchorfile>lt244x_8h.html</anchorfile>
      <anchor>a7a41c6ef718cad373b525faf8cb8fa7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>DataRateNoChange</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>a01305207e22fcb7553a95fa7f29cd1b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>DataRateFClkDiv64</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>a9108e24c537ff39cedbc24bffd39d19b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>DataRateFClkDiv128</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>ab00d315250014fe23a5576ff9a4d2b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>DataRateFClkDiv256</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>a1b522324cbbe0730dcf4da1b4bdc35ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>DataRateFClkDiv512</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>ae2db9955539adf03f472b157d020ad7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>DataRateFClkDiv1024</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>ae341e79c4377d64498c4e83b83a566ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>DataRateFClkDiv2048</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>a9411557168501388ae9e4d974d8a8267</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>DataRateFClkDiv4096</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>af35c2bd735fa3a0468f3c93b583ad761</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>DataRateFClkDiv8192</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>aa7eee7fa306a43a5129f3740d3669a9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>DataRateFClkDiv16384</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>a12df95270d32fbe2d60618da7464a372</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>DataRateFClkDiv32768_60Hz50HzNull</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>a2ac3d2892620eaddc91b0395e04088b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DoubleSpeedAndOneCycleLatency</name>
      <anchorfile>lt244x_8h.html</anchorfile>
      <anchor>a1b4fc04bab9bb415c057deec451d2e12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DataRate</name>
      <anchorfile>lt244x_8h.html</anchorfile>
      <anchor>afad2dfb2eceea80b314e374a84b961b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Enable</name>
      <anchorfile>lt244x_8h.html</anchorfile>
      <anchor>affeaaeb5fc4bbc782c09b47bef36490f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>AlwaysZero</name>
      <anchorfile>lt244x_8h.html</anchorfile>
      <anchor>a874f820bbcb72fbc211ebbdb81adb60e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>AlwaysOne</name>
      <anchorfile>lt244x_8h.html</anchorfile>
      <anchor>af47b056cff36eea9b12ef6086c42d042</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>bytes</name>
      <anchorfile>lt244x_8h.html</anchorfile>
      <anchor>a819b2c23bfd133882581f257658ab8b0</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>sample</name>
      <anchorfile>lt244x_8h.html</anchorfile>
      <anchor>a26adade2cc728132b49d34103346b631</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>OverrangeIfSameAsMsb</name>
      <anchorfile>lt244x_8h.html</anchorfile>
      <anchor>aca0d09c61d3c5de0323a5cba8fa892b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>StillConverting</name>
      <anchorfile>lt244x_8h.html</anchorfile>
      <anchor>af682027f84d6d458dcf6b4574cef745f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lt244x_accum.h</name>
    <path>/home/summer/projects/CGraph/firmware/include/adc/</path>
    <filename>lt244x__accum_8h.html</filename>
    <includes id="lt244x_8h" name="lt244x.h" local="yes" imported="no">lt244x.h</includes>
    <class kind="union">Ltc244xAccumulator</class>
    <class kind="union">Ltc244xAccumulatorChannel</class>
    <class kind="struct">lt244x_accum</class>
    <member kind="function">
      <type>union Ltc244xAccumulator</type>
      <name>__attribute__</name>
      <anchorfile>lt244x__accum_8h.html</anchorfile>
      <anchor>a0c14e92f5fadc978d5c4d0f8d7ab6d2c</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ltc244xAccumulator</name>
      <anchorfile>lt244x__accum_8h.html</anchorfile>
      <anchor>a4940b320070a73995e23786e57d66331</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CountsToVolts</name>
      <anchorfile>lt244x__accum_8h.html</anchorfile>
      <anchor>ab489e1aa1b19828962506244f4df3d46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>formatf</name>
      <anchorfile>lt244x__accum_8h.html</anchorfile>
      <anchor>a9f573dbd37f866eb7c33792daf23f413</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ltc244xAccumulatorChannel</name>
      <anchorfile>lt244x__accum_8h.html</anchorfile>
      <anchor>a4d1ee5d9199725cb42950fa87413314b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ltc244xAccumulatorChannel</name>
      <anchorfile>lt244x__accum_8h.html</anchorfile>
      <anchor>a99a5253275bd211ec23098313091d1cb</anchor>
      <arglist>(const uint8_t singleended, const uint8_t chanbit0, const uint8_t chanbits123)</arglist>
    </member>
    <member kind="variable">
      <type>int64_t</type>
      <name>Sample</name>
      <anchorfile>lt244x__accum_8h.html</anchorfile>
      <anchor>ab328df69ce4b83d11dc705e2d728c1b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64_t</type>
      <name>reserved</name>
      <anchorfile>lt244x__accum_8h.html</anchorfile>
      <anchor>acb7bc06bed6f6408d719334fc41698c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>NumAccums</name>
      <anchorfile>lt244x__accum_8h.html</anchorfile>
      <anchor>a05aab2d266937c20c1f5800d7350d418</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64_t</type>
      <name>all</name>
      <anchorfile>lt244x__accum_8h.html</anchorfile>
      <anchor>af61f8246015db4f0a85a942ac747131e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>ChannelBits123</name>
      <anchorfile>lt244x__accum_8h.html</anchorfile>
      <anchor>a4ad6e941fe5eaec3a4ae41a6acc2eb65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>ChanBit0orInvertDiffChan</name>
      <anchorfile>lt244x__accum_8h.html</anchorfile>
      <anchor>a4d1d5477d971d76c76488fc6fcc36391</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>SingleEnded</name>
      <anchorfile>lt244x__accum_8h.html</anchorfile>
      <anchor>a75ca4175bd56a232c0624a3af06ba789</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct lt244x_accum</type>
      <name>__attribute__</name>
      <anchorfile>lt244x__accum_8h.html</anchorfile>
      <anchor>a7e9e9466b5d8b180f3bf9ed7125ae7ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stdintle.cpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/</path>
    <filename>stdintle_8cpp.html</filename>
    <includes id="stdintle_8h" name="stdintle.h" local="yes" imported="no">stdintle.h</includes>
    <member kind="function">
      <type>uint16_t</type>
      <name>endianswap_uint16_t</name>
      <anchorfile>stdintle_8cpp.html</anchorfile>
      <anchor>af49d942e6c8d3b30e5c7b5a52c19f50a</anchor>
      <arglist>(const uint8_t *src)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>endianswap_uint32_t</name>
      <anchorfile>stdintle_8cpp.html</anchorfile>
      <anchor>a777e4f357e6d0f4a575de24761e37806</anchor>
      <arglist>(const uint8_t *src)</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>endianswap_uint64_t</name>
      <anchorfile>stdintle_8cpp.html</anchorfile>
      <anchor>a69d103d1de227de4380764b747cc6666</anchor>
      <arglist>(const uint8_t *src)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>endianswap_float</name>
      <anchorfile>stdintle_8cpp.html</anchorfile>
      <anchor>a85adb2fbca57bd533923617404858ec1</anchor>
      <arglist>(const uint8_t *src)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>endianswap_double</name>
      <anchorfile>stdintle_8cpp.html</anchorfile>
      <anchor>ab7e1cc84c2e524ce788e17d96bc261fc</anchor>
      <arglist>(const uint8_t *src)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>endianswap_double_arm7</name>
      <anchorfile>stdintle_8cpp.html</anchorfile>
      <anchor>ac8546050c88db5fd3e1e223cf8a6f9eb</anchor>
      <arglist>(const uint8_t *src)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>endianswap_doublehalves_arm7</name>
      <anchorfile>stdintle_8cpp.html</anchorfile>
      <anchor>a2fb2a169251a30781201341119841413</anchor>
      <arglist>(const double &amp;source)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stdintle.h</name>
    <path>/home/summer/projects/CGraph/firmware/include/</path>
    <filename>stdintle_8h.html</filename>
    <class kind="struct">uint16be_t</class>
    <class kind="struct">uint32be_t</class>
    <class kind="union">floatbe_t</class>
    <class kind="union">doublebe_t</class>
    <member kind="function">
      <type>uint16_t</type>
      <name>endianswap_uint16_t</name>
      <anchorfile>stdintle_8h.html</anchorfile>
      <anchor>af49d942e6c8d3b30e5c7b5a52c19f50a</anchor>
      <arglist>(const uint8_t *src)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>endianswap_uint32_t</name>
      <anchorfile>stdintle_8h.html</anchorfile>
      <anchor>a777e4f357e6d0f4a575de24761e37806</anchor>
      <arglist>(const uint8_t *src)</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>endianswap_uint64_t</name>
      <anchorfile>stdintle_8h.html</anchorfile>
      <anchor>a69d103d1de227de4380764b747cc6666</anchor>
      <arglist>(const uint8_t *src)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>endianswap_float</name>
      <anchorfile>stdintle_8h.html</anchorfile>
      <anchor>a85adb2fbca57bd533923617404858ec1</anchor>
      <arglist>(const uint8_t *src)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>endianswap_double</name>
      <anchorfile>stdintle_8h.html</anchorfile>
      <anchor>ab7e1cc84c2e524ce788e17d96bc261fc</anchor>
      <arglist>(const uint8_t *src)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>endianswap_double_arm7</name>
      <anchorfile>stdintle_8h.html</anchorfile>
      <anchor>ac8546050c88db5fd3e1e223cf8a6f9eb</anchor>
      <arglist>(const uint8_t *src)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>endianswap_doublehalves_arm7</name>
      <anchorfile>stdintle_8h.html</anchorfile>
      <anchor>a64daa870023b66582c5bc8f0f1f052b2</anchor>
      <arglist>(const double &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>struct uint16be_t</type>
      <name>__attribute__</name>
      <anchorfile>stdintle_8h.html</anchorfile>
      <anchor>a325c0058de85a39b81fd0e26315224b6</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>le</name>
      <anchorfile>stdintle_8h.html</anchorfile>
      <anchor>a29cd27cf12b224b18c597720e7da2a3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>one</name>
      <anchorfile>stdintle_8h.html</anchorfile>
      <anchor>ae921cf33e84ab31133c94ece3b6af147</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>two</name>
      <anchorfile>stdintle_8h.html</anchorfile>
      <anchor>aa3e36882c660f2b977563045539e3a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>three</name>
      <anchorfile>stdintle_8h.html</anchorfile>
      <anchor>ad822b50a38d16ba26516380d72eeea7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>four</name>
      <anchorfile>stdintle_8h.html</anchorfile>
      <anchor>a94a18ad3132f55bd0ac94f6a4a0b4dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>all</name>
      <anchorfile>stdintle_8h.html</anchorfile>
      <anchor>a940c332e339bf3f9e28267da875e8d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>five</name>
      <anchorfile>stdintle_8h.html</anchorfile>
      <anchor>ae5bb9b53e4a942ca8bf85aed68d99537</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>six</name>
      <anchorfile>stdintle_8h.html</anchorfile>
      <anchor>a9b9549832d04f1977ecb26ec0b01cff9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>seven</name>
      <anchorfile>stdintle_8h.html</anchorfile>
      <anchor>a2b34b0120fc2116b3e1aebaff803aa49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>eight</name>
      <anchorfile>stdintle_8h.html</anchorfile>
      <anchor>a236117da42fac12a9f449176d042d7b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TerminalUart.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/uart/</path>
    <filename>TerminalUart_8hpp.html</filename>
    <includes id="fixedqueue_8hpp" name="fixedqueue.hpp" local="yes" imported="no">fixedqueue.hpp</includes>
    <includes id="IUart_8h" name="IUart.h" local="yes" imported="no">uart/IUart.h</includes>
    <includes id="IUartParser_8hpp" name="IUartParser.hpp" local="yes" imported="no">uart/IUartParser.hpp</includes>
    <includes id="CmdSystem_8hpp" name="CmdSystem.hpp" local="yes" imported="no">uart/CmdSystem.hpp</includes>
    <class kind="struct">RTSCallback</class>
    <class kind="struct">TerminalUart</class>
    <member kind="define">
      <type>#define</type>
      <name>_TerminalUart_H_</name>
      <anchorfile>TerminalUart_8hpp.html</anchorfile>
      <anchor>af93fc8c223e3ab28c6b6ecb8798ac47f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>stdio_hook_putc</name>
      <anchorfile>TerminalUart_8hpp.html</anchorfile>
      <anchor>a067b400372fcd5636313d4977641a102</anchor>
      <arglist>(int ch)</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>CHAR_BAK</name>
      <anchorfile>TerminalUart_8hpp.html</anchorfile>
      <anchor>ac0979e5e310890d9e3ec9b9edc04da04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>CHAR_DEL</name>
      <anchorfile>TerminalUart_8hpp.html</anchorfile>
      <anchor>a88489f8e5fbf18c99cc4359e552f1ece</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>CHAR_ESC</name>
      <anchorfile>TerminalUart_8hpp.html</anchorfile>
      <anchor>a43d8fb6578e67b2bdb1a47bb395d2413</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>CHAR_TAB</name>
      <anchorfile>TerminalUart_8hpp.html</anchorfile>
      <anchor>a0fa521642fccc3e7e0689de377d9a1e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static RTSCallback</type>
      <name>NoRTS</name>
      <anchorfile>TerminalUart_8hpp.html</anchorfile>
      <anchor>aee5d46034e5de46f4f4e9cb9fd2bb233</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>NoPrefix</name>
      <anchorfile>TerminalUart_8hpp.html</anchorfile>
      <anchor>aae7374c2b49e6a448be061d30c117a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *(*</type>
      <name>NoPrompt</name>
      <anchorfile>TerminalUart_8hpp.html</anchorfile>
      <anchor>afcd9819e95dc7b86122ab5fec367bede</anchor>
      <arglist>)() __attribute__((used))=0</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>uart_pinout_fpga.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/uart/</path>
    <filename>uart__pinout__fpga_8hpp.html</filename>
    <includes id="Delay_8h" name="Delay.h" local="yes" imported="no">Delay.h</includes>
    <includes id="IUart_8h" name="IUart.h" local="yes" imported="no">uart/IUart.h</includes>
    <includes id="UartStatusRegister_8hpp" name="UartStatusRegister.hpp" local="yes" imported="no">uart/UartStatusRegister.hpp</includes>
    <class kind="class">uart_pinout_fpga</class>
  </compound>
  <compound kind="file">
    <name>UartParserTable.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/uart/</path>
    <filename>UartParserTable_8hpp.html</filename>
    <includes id="IUartParser_8hpp" name="IUartParser.hpp" local="yes" imported="no">uart/IUartParser.hpp</includes>
    <includes id="BinaryUart_8hpp" name="BinaryUart.hpp" local="yes" imported="no">uart/BinaryUart.hpp</includes>
    <includes id="TerminalUart_8hpp" name="TerminalUart.hpp" local="yes" imported="no">uart/TerminalUart.hpp</includes>
    <member kind="variable">
      <type>IUartParser *const</type>
      <name>UartParsers</name>
      <anchorfile>UartParserTable_8hpp.html</anchorfile>
      <anchor>a3329578ec06acc23cff5107a5c4f520d</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>NumUartParsers</name>
      <anchorfile>UartParserTable_8hpp.html</anchorfile>
      <anchor>a45d1e83748e1299fdb86ec67cd127bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BinaryUart *const</type>
      <name>BinaryUartParsers</name>
      <anchorfile>UartParserTable_8hpp.html</anchorfile>
      <anchor>a59b5a6b5e9d8d9ea68fa950ef033240f</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>NumBinaryUartParsers</name>
      <anchorfile>UartParserTable_8hpp.html</anchorfile>
      <anchor>aa0b6e48aaf7a924cb4f71c490ac95a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TerminalUart&lt; 16, 4096 &gt; *const</type>
      <name>AsciiUartParsers</name>
      <anchorfile>UartParserTable_8hpp.html</anchorfile>
      <anchor>ad80598151253b9d7fae208669e9cabc8</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>NumAsciiUartParsers</name>
      <anchorfile>UartParserTable_8hpp.html</anchorfile>
      <anchor>a37f4ee3070c72cfe33b946f87a36662f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UartStatusRegister.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/uart/</path>
    <filename>UartStatusRegister_8hpp.html</filename>
    <class kind="union">UartStatusRegister</class>
    <member kind="function">
      <type>union UartStatusRegister</type>
      <name>__attribute__</name>
      <anchorfile>UartStatusRegister_8hpp.html</anchorfile>
      <anchor>ad75c1d93ff23e8dbbbcd4b851fc11bb1</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UartStatusRegister</name>
      <anchorfile>UartStatusRegister_8hpp.html</anchorfile>
      <anchor>a253aa3fe4a56c64eedf53e47ea0fa099</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>formatf</name>
      <anchorfile>UartStatusRegister_8hpp.html</anchorfile>
      <anchor>a9f573dbd37f866eb7c33792daf23f413</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>RxFifoEmpty</name>
      <anchorfile>UartStatusRegister_8hpp.html</anchorfile>
      <anchor>aae0278475f7fa7d1ca77120bc7c204c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>RxFifoFull</name>
      <anchorfile>UartStatusRegister_8hpp.html</anchorfile>
      <anchor>a55d44937f1bb579bc380907ca8cf9ab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>TxFifoEmpty</name>
      <anchorfile>UartStatusRegister_8hpp.html</anchorfile>
      <anchor>a0e34ae7a51016dfd522ac164a59ace40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>TxFifoFull</name>
      <anchorfile>UartStatusRegister_8hpp.html</anchorfile>
      <anchor>ab9291b7f44ed3df3433ff93dd7dc077c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>reserved1</name>
      <anchorfile>UartStatusRegister_8hpp.html</anchorfile>
      <anchor>aef9bb556c1530f5d648fd57e73b9a105</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>RxFifoCount</name>
      <anchorfile>UartStatusRegister_8hpp.html</anchorfile>
      <anchor>a9d887b242e12f5849cf82c64a0abbb62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>TxFifoCount</name>
      <anchorfile>UartStatusRegister_8hpp.html</anchorfile>
      <anchor>a5f5fde4fc42003cbac2636dc91636366</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>reserved2</name>
      <anchorfile>UartStatusRegister_8hpp.html</anchorfile>
      <anchor>ae673672452e4741c4ab7c174af880a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>all</name>
      <anchorfile>UartStatusRegister_8hpp.html</anchorfile>
      <anchor>a7a41c6ef718cad373b525faf8cb8fa7b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>win32_pinout_uart.hpp</name>
    <path>/home/summer/projects/CGraph/firmware/include/uart/</path>
    <filename>win32__pinout__uart_8hpp.html</filename>
    <includes id="IUart_8h" name="IUart.h" local="yes" imported="no">IUart.h</includes>
    <class kind="class">win32_pinout_uart</class>
  </compound>
  <compound kind="union">
    <name>AdcAccumulator</name>
    <filename>unionAdcAccumulator.html</filename>
    <member kind="function">
      <type>struct AdcAccumulator::@33</type>
      <name>__attribute__</name>
      <anchorfile>unionAdcAccumulator.html</anchorfile>
      <anchor>a376de68ae02c103dbcec8fe96ceb44eb</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AdcAccumulator</name>
      <anchorfile>unionAdcAccumulator.html</anchorfile>
      <anchor>a2d3f8fba51f21ac649c92594841d95ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>formatf</name>
      <anchorfile>unionAdcAccumulator.html</anchorfile>
      <anchor>a69703f3cd1c657dc169caec7234f1941</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>uint64_t</type>
      <name>all</name>
      <anchorfile>unionAdcAccumulator.html</anchorfile>
      <anchor>aab850de2e8e87c6af7fbddecd6a0409e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64_t</type>
      <name>Samples</name>
      <anchorfile>unionAdcAccumulator.html</anchorfile>
      <anchor>a91dfbb756d7da52ffc614ea5ba416cd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64_t</type>
      <name>reserved</name>
      <anchorfile>unionAdcAccumulator.html</anchorfile>
      <anchor>a01037736a74f14828fb46ae30a8c5131</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>NumAccums</name>
      <anchorfile>unionAdcAccumulator.html</anchorfile>
      <anchor>a9bf5957199f8fe2d672cc4ce59b4a7f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>AdcFifo</name>
    <filename>unionAdcFifo.html</filename>
    <member kind="function">
      <type>struct AdcFifo::@37</type>
      <name>__attribute__</name>
      <anchorfile>unionAdcFifo.html</anchorfile>
      <anchor>a74a90683108d18b2f96fc7ac278b7048</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AdcFifo</name>
      <anchorfile>unionAdcFifo.html</anchorfile>
      <anchor>ab2be36f2672b7d93b585f0cbf3f9229f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>uint64_t</type>
      <name>all</name>
      <anchorfile>unionAdcFifo.html</anchorfile>
      <anchor>abdc4fe0c8e1c73d4d872e9c52c14e709</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>Sample</name>
      <anchorfile>unionAdcFifo.html</anchorfile>
      <anchor>a825547aff1eb52291c956ed89295c112</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcTimestamp</type>
      <name>Timestamp</name>
      <anchorfile>unionAdcFifo.html</anchorfile>
      <anchor>ad1cce7e464ee1101e3ebbc94785cefc9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>AdcTimestamp</name>
    <filename>unionAdcTimestamp.html</filename>
    <member kind="function">
      <type>struct AdcTimestamp::@35</type>
      <name>__attribute__</name>
      <anchorfile>unionAdcTimestamp.html</anchorfile>
      <anchor>ae78230e6ac0688a4ff9ecdfa505dc4b3</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>all</name>
      <anchorfile>unionAdcTimestamp.html</anchorfile>
      <anchor>a90d7e48086274f1b34ea930a548fcacb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>SubsecondTicks</name>
      <anchorfile>unionAdcTimestamp.html</anchorfile>
      <anchor>aaed3a779fe94b599aad0d1f51ecbca8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UnixTimeLsbs</name>
      <anchorfile>unionAdcTimestamp.html</anchorfile>
      <anchor>a68e634112f2f109083aa892178adf63d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ads1258</name>
    <filename>structads1258.html</filename>
    <templarg></templarg>
    <base>spipinout</base>
    <class kind="struct">ads1258::spi_busmsg</class>
    <member kind="function">
      <type></type>
      <name>ads1258</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>a9de2101fd2dc461394f0458a1cce11ae</anchor>
      <arglist>(const double adcvref)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ads1258</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>a2234f8daf999e9b541506d311e00eccd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CountsToVolts</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>a3334ad3fe768d5ccbef38d5ee18d8210</anchor>
      <arglist>(const int32_t &amp;Counts) const</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>ConvertOnceDiff</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>aae9a5742f62f9910aae8fad1dbc9a7b7</anchor>
      <arglist>(uint8_t chanpos, uint8_t channeg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ClearScanChannels</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>ac2db17ea7d66aa523697301733f7fe60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>GetScanChannelsMask</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>ac4ce3dc5dd3c8710c3691edd664a7ea0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetScanChannelsMask</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>a703822a9fe58bec3aa8d1e943cab9def</anchor>
      <arglist>(const uint32_t Mask)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AddScanChannel</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>a3a864d37e9319682f8f98c6262e0d666</anchor>
      <arglist>(const unsigned int chan)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetScanChannels</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>ad38492cd682e7817f82a77cdfc744287</anchor>
      <arglist>(const uint8_t chan_diff, const uint8_t chan_se_lo, const uint8_t chan_se_hi, const uint8_t chan_internal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsScanChannel</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>a60a53ddedd935bf37c0801fa50ab2e09</anchor>
      <arglist>(const unsigned int chan)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>NumScanChannels</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>a04738847c1d5b7e666a55ae4f13fc90c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CommitScanChannels</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>a08ebb96e0a031ba6fcb869e8a86c6474</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>StartChannelScan</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>adbd5c79ea8ddf627cb403b62edec28e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Scan</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>a0ba47263f8c0df7f79bd5a83add8dba8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AutoScan</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>ac05d60cbd632e70f0995143d16b1ee60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>GetLastSample</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>a5c1eae0f8d9280a261d24a2d939ea5a7</anchor>
      <arglist>(const uint8_t channel, ads1258details::ads1258sample &amp;sample)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint8_t</type>
      <name>Init</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>afbcfcf94600fc9ad75e8df52a523769d</anchor>
      <arglist>(uint8_t gpio_output_mask=gpio_output_mask_all_outputs)</arglist>
    </member>
    <member kind="function">
      <type>__inline__ void</type>
      <name>WriteRegister</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>a18b0bfed153f94e3b4a02b144e3fbfb1</anchor>
      <arglist>(const uint8_t addr, const uint8_t val)</arglist>
    </member>
    <member kind="function">
      <type>__inline__ ads1258details::ads1258sample</type>
      <name>ReadLastChannel</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>a97f562e798bea1a79e82e57205761f2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>__inline__ uint8_t</type>
      <name>ReadRegister</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>a1211e458bd1f4942ba829760ee01e64f</anchor>
      <arglist>(const uint8_t addr)</arglist>
    </member>
    <member kind="function">
      <type>__inline__ void</type>
      <name>ReadRegister</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>a5936a2aefe689689bbbd8e68f0a11402</anchor>
      <arglist>(const uint8_t addr, uint8_t &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>__inline__ void</type>
      <name>SendCommand</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>af779bcc667bb18d5dc5ed17755197399</anchor>
      <arglist>(ads1258details::ads1258cmdheader cmd)</arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>AdcVRef</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>ae1f8f8c6095e67e4215d26f311bacdf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>gpio_output_mask_all_outputs</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>a912bc8def60c07693f9e5b6989761301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>gpio_output_mask_all_inputs</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>ab2b9fe10dc9137f7510593b5a520dd01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>inputtypedifferential</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>a78b8371f4d6ab8f4390daf8670909f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>inputtypesingleended</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>a53bd2d2a5338a9946b165a16b4cb18f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>InitOK</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>a5a20b1f7fff790675b15fe581aa715c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>__inline__ void</type>
      <name>txb</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>afba45d5d78910623c6272b601805d9ab</anchor>
      <arglist>(uint8_t byte)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>__inline__ uint8_t</type>
      <name>rxb</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>a9a99d1d39a170953bd90c42f10d7bc2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ads1258details::ads1258sample</type>
      <name>lastsamples</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>a8728de28361b09af6ca286d51729fccd</anchor>
      <arglist>[ads1258details::ads1258numchannels]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint8_t</type>
      <name>ScanChansDiff</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>a468d4bc343c362318dd8d2be1b6a245a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint8_t</type>
      <name>ScanChansSELo</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>a3274a4d58bda8cdfe0466cfe8808deb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint8_t</type>
      <name>ScanChansSEHi</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>a8bfcdb4cec0ec7cc74c1a9b814bd872c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint8_t</type>
      <name>ScanChansInternal</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>a1a8017df038e6d0cb30c40c43c92f8c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>struct ads1258::spi_busmsg</type>
      <name>__attribute__</name>
      <anchorfile>structads1258.html</anchorfile>
      <anchor>a5de17252bf02db773ff196a42ff34637</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>ads1258details::ads1258cmdheader</name>
    <filename>unionads1258details_1_1ads1258cmdheader.html</filename>
    <member kind="function">
      <type>struct ads1258details::ads1258cmdheader::@13</type>
      <name>__attribute__</name>
      <anchorfile>unionads1258details_1_1ads1258cmdheader.html</anchorfile>
      <anchor>a45bf3512668834930db365ad8e97fa30</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ads1258cmdheader</name>
      <anchorfile>unionads1258details_1_1ads1258cmdheader.html</anchorfile>
      <anchor>a3cfbc71eda4c3ef99a8b9ab7770dab84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ads1258cmdheader</name>
      <anchorfile>unionads1258details_1_1ads1258cmdheader.html</anchorfile>
      <anchor>aaf4ef72b9d7d60ec48d0827b9994f279</anchor>
      <arglist>(uint8_t c, uint8_t m, uint8_t a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>unionads1258details_1_1ads1258cmdheader.html</anchorfile>
      <anchor>a251bcf4e8e0b7a91558fef325839b549</anchor>
      <arglist>(ads1258cmdheader &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>all</name>
      <anchorfile>unionads1258details_1_1ads1258cmdheader.html</anchorfile>
      <anchor>a8e09157179f6a40a78a3b35a8011b071</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>address</name>
      <anchorfile>unionads1258details_1_1ads1258cmdheader.html</anchorfile>
      <anchor>a51f4b20adf0f298de30c9c897a07c2a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>multiple</name>
      <anchorfile>unionads1258details_1_1ads1258cmdheader.html</anchorfile>
      <anchor>a201432ba01df99f71079c86a20d0178f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>cmdtype</name>
      <anchorfile>unionads1258details_1_1ads1258cmdheader.html</anchorfile>
      <anchor>af7f2ef8b76abb158d6bebc57ad75bd2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>ads1258details::ads1258sample</name>
    <filename>unionads1258details_1_1ads1258sample.html</filename>
    <member kind="function">
      <type>struct ads1258details::ads1258sample::@9</type>
      <name>__attribute__</name>
      <anchorfile>unionads1258details_1_1ads1258sample.html</anchorfile>
      <anchor>af31baa6884a2f34e8f0d22339d366959</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type>struct ads1258details::ads1258sample::@10</type>
      <name>__attribute__</name>
      <anchorfile>unionads1258details_1_1ads1258sample.html</anchorfile>
      <anchor>ae910cdad5dc37b9f4a53edfe7560c9d4</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ads1258sample</name>
      <anchorfile>unionads1258details_1_1ads1258sample.html</anchorfile>
      <anchor>ac7bb9e6dcc7f09b0505cca3a4b64d002</anchor>
      <arglist>(uint32_t &amp;val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ads1258sample</name>
      <anchorfile>unionads1258details_1_1ads1258sample.html</anchorfile>
      <anchor>aab8dcf9f3b338e143a3ee1f688bffdce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>formatf</name>
      <anchorfile>unionads1258details_1_1ads1258sample.html</anchorfile>
      <anchor>ac348ec86bf6fcf8cc71a6981a6fcf4c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>all</name>
      <anchorfile>unionads1258details_1_1ads1258sample.html</anchorfile>
      <anchor>a05ca871afb15f2e3bc45ef203f49657e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>zero</name>
      <anchorfile>unionads1258details_1_1ads1258sample.html</anchorfile>
      <anchor>ad346128c89639a41fa8783e601acbe0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>one</name>
      <anchorfile>unionads1258details_1_1ads1258sample.html</anchorfile>
      <anchor>a019afb2468f1051f8634926f71979a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>two</name>
      <anchorfile>unionads1258details_1_1ads1258sample.html</anchorfile>
      <anchor>ac56669632056559814423952fcf52b1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>three</name>
      <anchorfile>unionads1258details_1_1ads1258sample.html</anchorfile>
      <anchor>a7752afb129c97894e5c3bcbc7ca787e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>sample</name>
      <anchorfile>unionads1258details_1_1ads1258sample.html</anchorfile>
      <anchor>aa1f88c5d476ab8051f17cde66304da2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ads1258status</type>
      <name>status</name>
      <anchorfile>unionads1258details_1_1ads1258sample.html</anchorfile>
      <anchor>aba0d753e15e94b102277f849d9e2a50d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>ads1258details::ads1258status</name>
    <filename>unionads1258details_1_1ads1258status.html</filename>
    <member kind="function">
      <type>struct ads1258details::ads1258status::@7</type>
      <name>__attribute__</name>
      <anchorfile>unionads1258details_1_1ads1258status.html</anchorfile>
      <anchor>a8cb2f68d6eba9186f06fdad97d916059</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>formatf</name>
      <anchorfile>unionads1258details_1_1ads1258status.html</anchorfile>
      <anchor>a29ce033d1be89e5b772785559b341ba9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>all</name>
      <anchorfile>unionads1258details_1_1ads1258status.html</anchorfile>
      <anchor>a912552c152e902636c9df85bbfffb189</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>channel</name>
      <anchorfile>unionads1258details_1_1ads1258status.html</anchorfile>
      <anchor>a08354c4a694c75f51880844d0649f1ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>isbrownout</name>
      <anchorfile>unionads1258details_1_1ads1258status.html</anchorfile>
      <anchor>af669c68bf1a878b676d7163f860c93ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>isclipped</name>
      <anchorfile>unionads1258details_1_1ads1258status.html</anchorfile>
      <anchor>a7bab8b4e55e76849da0d9771e7dbf25a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>isnew</name>
      <anchorfile>unionads1258details_1_1ads1258status.html</anchorfile>
      <anchor>a3b0c7263fc0237e4818b3998c152f8dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BinaryCmd</name>
    <filename>structBinaryCmd.html</filename>
    <member kind="function">
      <type></type>
      <name>BinaryCmd</name>
      <anchorfile>structBinaryCmd.html</anchorfile>
      <anchor>a6ba591e35febbbde19f66d412f5e07d5</anchor>
      <arglist>(const uint32_t name, const char *help, int8_t(*resp)(const uint32_t, char const *, const size_t, const void *))</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Name</name>
      <anchorfile>structBinaryCmd.html</anchorfile>
      <anchor>acee56ddb23baa8ecb6764cadb1d7431f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char const  *</type>
      <name>Help</name>
      <anchorfile>structBinaryCmd.html</anchorfile>
      <anchor>a16f29a225aebfc3c5d4c8d08dedcd241</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int8_t(*</type>
      <name>Response</name>
      <anchorfile>structBinaryCmd.html</anchorfile>
      <anchor>a599d034641cca72fb5a8c0abdd9f0ef8</anchor>
      <arglist>)(const uint32_t, char const *, const size_t, const void *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BinaryUart</name>
    <filename>structBinaryUart.html</filename>
    <base>IUartParser</base>
    <member kind="function">
      <type></type>
      <name>BinaryUart</name>
      <anchorfile>structBinaryUart.html</anchorfile>
      <anchor>a8258918913fd0bec31fc50328ff4a90e</anchor>
      <arglist>(struct IUart &amp;pinout, struct IPacket &amp;packet, const BinaryCmd *cmds, const size_t numcmds, struct BinaryUartCallbacks &amp;callbacks, const bool verbose=true, const uint64_t serialnum=InvalidSerialNumber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Debug</name>
      <anchorfile>structBinaryUart.html</anchorfile>
      <anchor>a6aaa3db8e8941233f4e7613320adc8c8</anchor>
      <arglist>(bool dbg)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Init</name>
      <anchorfile>structBinaryUart.html</anchorfile>
      <anchor>a9f31f5fc34ded23c2e2e7bd587f8d05c</anchor>
      <arglist>(uint32_t serialnum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Process</name>
      <anchorfile>structBinaryUart.html</anchorfile>
      <anchor>ae23233ce8d26eda13449eb5777d94c16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ProcessByte</name>
      <anchorfile>structBinaryUart.html</anchorfile>
      <anchor>af95847c26eed8a0c29e319e5e49d7a65</anchor>
      <arglist>(const char c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>TxBinaryPacket</name>
      <anchorfile>structBinaryUart.html</anchorfile>
      <anchor>af2b967da5f2ec2c10607f9572c69dfba</anchor>
      <arglist>(const uint16_t PayloadType, const uint32_t SerialNumber, const void *PayloadData, const size_t PayloadLen) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>formatf</name>
      <anchorfile>structBinaryUart.html</anchorfile>
      <anchor>a1b97f089ceb8177a9d9c4bd3f947da75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>RxBuffer</name>
      <anchorfile>structBinaryUart.html</anchorfile>
      <anchor>a23374ba3a10149e41d7e384db6c56d92</anchor>
      <arglist>[RxBufferLenBytes]</arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>RxCount</name>
      <anchorfile>structBinaryUart.html</anchorfile>
      <anchor>aaa8f09c9917dfe497019750410b85034</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IPacket &amp;</type>
      <name>Packet</name>
      <anchorfile>structBinaryUart.html</anchorfile>
      <anchor>a6904e784bc6c2d425f0480dcebfc4630</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BinaryCmd *</type>
      <name>Cmds</name>
      <anchorfile>structBinaryUart.html</anchorfile>
      <anchor>ae342400a1511f162dba839d19489f989</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>NumCmds</name>
      <anchorfile>structBinaryUart.html</anchorfile>
      <anchor>a05d557949d44aeb4bbccc7ba81ed1c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BinaryUartCallbacks &amp;</type>
      <name>Callbacks</name>
      <anchorfile>structBinaryUart.html</anchorfile>
      <anchor>a7fb8b25834dec0d1703f7dfd20a6b59a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>debug</name>
      <anchorfile>structBinaryUart.html</anchorfile>
      <anchor>aa6ee61a1225c8499de6540de5fb83bdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>InPacket</name>
      <anchorfile>structBinaryUart.html</anchorfile>
      <anchor>a1fb5dda68613df8a9869bbcd88cd32aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>PacketStart</name>
      <anchorfile>structBinaryUart.html</anchorfile>
      <anchor>ad94791edbb64e08618f394a21bfcced0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>PacketLen</name>
      <anchorfile>structBinaryUart.html</anchorfile>
      <anchor>afa4229c789de3acb2e716db614bd0f1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64_t</type>
      <name>SerialNum</name>
      <anchorfile>structBinaryUart.html</anchorfile>
      <anchor>a8008833011b2f1180272702e96af91c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>RxBufferLenBytes</name>
      <anchorfile>structBinaryUart.html</anchorfile>
      <anchor>ae34ed1f9ad53abc2a482c0d8e3bbc5c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>TxBufferLenBytes</name>
      <anchorfile>structBinaryUart.html</anchorfile>
      <anchor>a1ada4322ebb498f1198cf4a323899722</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint64_t</type>
      <name>InvalidSerialNumber</name>
      <anchorfile>structBinaryUart.html</anchorfile>
      <anchor>ac5fa531e1a02ae3279e1c8a4e0643cd6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BinaryUartCallbacks</name>
    <filename>structBinaryUartCallbacks.html</filename>
    <member kind="function">
      <type></type>
      <name>BinaryUartCallbacks</name>
      <anchorfile>structBinaryUartCallbacks.html</anchorfile>
      <anchor>aa8f46b494124a1f44717efd8e40ade7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BinaryUartCallbacks</name>
      <anchorfile>structBinaryUartCallbacks.html</anchorfile>
      <anchor>a1d1803a16b1b2e3e715043f64b781600</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>InvalidPacket</name>
      <anchorfile>structBinaryUartCallbacks.html</anchorfile>
      <anchor>a61b30efec2c972e1b05aff498997e173</anchor>
      <arglist>(const uint8_t *Buffer, const size_t &amp;BufferLen)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>UnHandledPacket</name>
      <anchorfile>structBinaryUartCallbacks.html</anchorfile>
      <anchor>a2ef2d961f39fd01758fb0f21f5850bda</anchor>
      <arglist>(const IPacket *Packet, const size_t &amp;PacketLen)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>EveryPacket</name>
      <anchorfile>structBinaryUartCallbacks.html</anchorfile>
      <anchor>a508d662c0d5228df5049e092aed51770</anchor>
      <arglist>(const IPacket *Packet, const size_t &amp;PacketLen)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>BufferOverflow</name>
      <anchorfile>structBinaryUartCallbacks.html</anchorfile>
      <anchor>addd4c0dc575fa60d305d2a37df619003</anchor>
      <arglist>(const uint8_t *Buffer, const size_t &amp;BufferLen)</arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>CGraphBaudDividers</name>
    <filename>unionCGraphBaudDividers.html</filename>
    <member kind="function">
      <type>struct CGraphBaudDividers::@39</type>
      <name>__attribute__</name>
      <anchorfile>unionCGraphBaudDividers.html</anchorfile>
      <anchor>a81856bf4f912b6e677eaf64a1eb31c42</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphBaudDividers</name>
      <anchorfile>unionCGraphBaudDividers.html</anchorfile>
      <anchor>a10e0ded2c01d1558da19ae2950b98817</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>formatf</name>
      <anchorfile>unionCGraphBaudDividers.html</anchorfile>
      <anchor>af86a340f6df212e7eee0e9cce824238a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>all</name>
      <anchorfile>unionCGraphBaudDividers.html</anchorfile>
      <anchor>a465f335c51d6750d9f891bfd2ab2ffe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Divider0</name>
      <anchorfile>unionCGraphBaudDividers.html</anchorfile>
      <anchor>ae84ad34d10101f4e57644ef4fdcf1a4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Divider1</name>
      <anchorfile>unionCGraphBaudDividers.html</anchorfile>
      <anchor>ac3c3fd7c4585c785236ca3672cb39ab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Divider2</name>
      <anchorfile>unionCGraphBaudDividers.html</anchorfile>
      <anchor>a087cd586fd23966c6c51656c9635ab0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Divider3</name>
      <anchorfile>unionCGraphBaudDividers.html</anchorfile>
      <anchor>ac4daabe986d17a4761471a33203db776</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>CGraphDMCIHardwareControlRegister</name>
    <filename>unionCGraphDMCIHardwareControlRegister.html</filename>
    <member kind="function">
      <type>struct CGraphDMCIHardwareControlRegister::@47</type>
      <name>__attribute__</name>
      <anchorfile>unionCGraphDMCIHardwareControlRegister.html</anchorfile>
      <anchor>aad5c60ac381eeac90dc6885756bc81fc</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphDMCIHardwareControlRegister</name>
      <anchorfile>unionCGraphDMCIHardwareControlRegister.html</anchorfile>
      <anchor>a53b038d2060d717cd1817feed188d699</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>all</name>
      <anchorfile>unionCGraphDMCIHardwareControlRegister.html</anchorfile>
      <anchor>a21efac0f145fd9c95e6a638a4c95d3e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>HighVoltageEnable</name>
      <anchorfile>unionCGraphDMCIHardwareControlRegister.html</anchorfile>
      <anchor>a583f7764e9ea658240160ed248727e7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>PowerEnable</name>
      <anchorfile>unionCGraphDMCIHardwareControlRegister.html</anchorfile>
      <anchor>a9fb72429a1633531e45f6a2a5212a3cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CGraphDMCIHardwareInterface</name>
    <filename>structCGraphDMCIHardwareInterface.html</filename>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DeviceSerialNumber</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>ae866ec9f91f646efaa8964637f5d275b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>FpgaFirmwareBuildNumber</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a326bc854b2a520f821488c6d9cbb9d8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UnixSeconds</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a7912a4b23e21ae617be9d4c1af0ce1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>IdealTicksPerSecond</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>ab758bc4714a0cb98b38c0d1032622308</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ActualTicksLastSecond</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a8f08a36cf8ef72a2bc809dab74219f2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ClockTicksThisSecondAddr</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a8b022b204d2cf9f2bd5e00c6574f8557</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ClockSteeringDacSetpoint</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a49754a3f6f5319d5ecf4e8543c225319</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DacChannelIndex</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a0913f0147d830652e8f1b7739db632c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DacSetpoint</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>ad5e513e5736bb14794ab78fd382d0fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphDMCIHardwareControlRegister</type>
      <name>ControlRegister</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>ada3802710b39c677eb2d2330ba646b2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphDMCIHardwareStatusRegister</type>
      <name>StatusRegister</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a97e0475613a1c9738c328e7e17b1e385</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>PPSRtcPhaseComparator</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a9a1a3e29d0933dc7ede4ca0ebf483820</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>PPSAdcPhaseComparator</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a55018f7c12eae54ac81309d78b4a5178</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>MonitorAdc0Accumulator</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>ab248de68c2111863178b52bcfdb214f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>MonitorAdc0ReadChannel</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>aeded9b864867fd0246ac109f9df5f638</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>MonitorAdc1Accumulator</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a2627ebcd87128c4fd45ab55b7a77e3e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>MonitorAdc1ReadChannel</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a52b1c00926dfe23d40f4bb7de683a902</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>DMController0MonitorAdcAccumulator</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a1b0fdf758b1f485587b65bb46b66830d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DMController0MonitorAdcReadChannel</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>afa17ea9a8d58a0c6b2d1f35149ff7fce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>DMController1MonitorAdcAccumulator</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>ad4b79ce19c1d7cd4ebebbab1fa0e59e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DMController1MonitorAdcReadChannel</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>ab00998743228d1bc16bfa83fd997dcc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>DMController2MonitorAdcAccumulator</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>ae240441d86539f3ae93ea454c298d07a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DMController2MonitorAdcReadChannel</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a1feeda84ecbe6819c27a5c263d821483</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>DMController3MonitorAdcAccumulator</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>ab691fdf46d6ae4c8648cd5d1b21b8a8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DMController3MonitorAdcReadChannel</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>ab58914b67859d3a7012903eff0e7806e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>DMController4MonitorAdcAccumulator</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a689cd5ef7b8d11f685e8d7d66514fd8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DMController4MonitorAdcReadChannel</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>ab6346fcc603a95f75bb8ac472b923575</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>DMController5MonitorAdcAccumulator</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>adab2cee770c7e41ecdd06dafb2837590</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DMController5MonitorAdcReadChannel</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a991c6dee1339b5f5350f0642b1bab8cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo0</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a7f49403fce36477b95d96782da3dcb5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphDMCIUartStatusRegister</type>
      <name>UartStatusRegister0</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a34bd50bf0cac71fa90993a3942a490d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo1</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a4e53e14dd6c86f1a6b1954b27aef9feb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphDMCIUartStatusRegister</type>
      <name>UartStatusRegister1</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a063008d0347ecedb2fd28e97d09390b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo2</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>ad43a9beb2e6908e8b1c3927f17af2eac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphDMCIUartStatusRegister</type>
      <name>UartStatusRegister2</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>ae08f9dda58436d1000eea5671b23a9b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo3</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a2644c90dacb3b2bdddb15b9f61575c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphDMCIUartStatusRegister</type>
      <name>UartStatusRegister3</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a1c8cffe6481b1bd4097fec6067747f40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>BaudDivider0</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a5c40d022136bd28f2774b84a82ab24b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>BaudDivider1</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>ab83f6b3133cffbf3bd00ebc4abb30ee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>BaudDivider2</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a3e48f6b6f4a5fae913dc1472b509c062</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>BaudDivider3</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a6397788011d4cbf3e9590b1fc655b289</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>SpiExtBusAddrOut</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a37de0f12f3fd79b698f28ee6cdfe845a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>SpiExtBusAddrIn</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a77ec49718ab3b039486c20b8c311e641</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>SpiExtBusDataOut</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a1b3c06581c5e6d0ce14764998fbb3b41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>SpiExtBusDataIn</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a09a17755b31344773158170fa64d9b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>reserved</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>aac6995d9d276b34d600f282a5890a043</anchor>
      <arglist>[208]</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DacSetpoints</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a8e5dc34d34a1208a63300bfabc253203</anchor>
      <arglist>[960]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint32_t</type>
      <name>DacFullScale</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a3e689196dba621206dae58f0fde2c37e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>DacDriverFullScaleOutputVoltage</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a8841b489e01a9217994c945888d495b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>DMCIDriverFullScaleOutputTravel</name>
      <anchorfile>structCGraphDMCIHardwareInterface.html</anchorfile>
      <anchor>a880d0bad93d521169d7f2ab06ade5940</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>CGraphDMCIHardwareStatusRegister</name>
    <filename>unionCGraphDMCIHardwareStatusRegister.html</filename>
    <member kind="function">
      <type>struct CGraphDMCIHardwareStatusRegister::@49</type>
      <name>__attribute__</name>
      <anchorfile>unionCGraphDMCIHardwareStatusRegister.html</anchorfile>
      <anchor>a2d69e8b2bea0f2399bd810b32deb937a</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphDMCIHardwareStatusRegister</name>
      <anchorfile>unionCGraphDMCIHardwareStatusRegister.html</anchorfile>
      <anchor>abe13292a09605bb096b62244f963afcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>all</name>
      <anchorfile>unionCGraphDMCIHardwareStatusRegister.html</anchorfile>
      <anchor>a39586a9c539dcdf0e0a8910eba6b4539</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PPSDetected</name>
      <anchorfile>unionCGraphDMCIHardwareStatusRegister.html</anchorfile>
      <anchor>a84637391df9f24c2afcc267803d18fe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>HVFault</name>
      <anchorfile>unionCGraphDMCIHardwareStatusRegister.html</anchorfile>
      <anchor>acc837dc6618433113804d1fafc532157</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>VNegFault</name>
      <anchorfile>unionCGraphDMCIHardwareStatusRegister.html</anchorfile>
      <anchor>a8d32261fc37980c51af8a4ba3983c4c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>V1Fault</name>
      <anchorfile>unionCGraphDMCIHardwareStatusRegister.html</anchorfile>
      <anchor>ade9e4e2acadcd72699e11250bcda8bf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>V3DmFault</name>
      <anchorfile>unionCGraphDMCIHardwareStatusRegister.html</anchorfile>
      <anchor>af2a8b8c454cbdc2be8d4946d9ffc5a99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>V3FpgaFault</name>
      <anchorfile>unionCGraphDMCIHardwareStatusRegister.html</anchorfile>
      <anchor>ab3b8efa7bbaf6c19a60e2ced1bd780e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>V3AuxFault</name>
      <anchorfile>unionCGraphDMCIHardwareStatusRegister.html</anchorfile>
      <anchor>afaa096d2943953f29b24e69d4e78fb8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>V5Fault</name>
      <anchorfile>unionCGraphDMCIHardwareStatusRegister.html</anchorfile>
      <anchor>aceb2edbb82bfdf167eb716e38b78fc65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>V6Fault</name>
      <anchorfile>unionCGraphDMCIHardwareStatusRegister.html</anchorfile>
      <anchor>a7913920a4ae1b7d673439ed44bdcc27f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>V9Fault</name>
      <anchorfile>unionCGraphDMCIHardwareStatusRegister.html</anchorfile>
      <anchor>a2b76c233c2600f34f9442e7bc740df87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CGraphDMCIProtoHardwareMmapper</name>
    <filename>classCGraphDMCIProtoHardwareMmapper.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>open</name>
      <anchorfile>classCGraphDMCIProtoHardwareMmapper.html</anchorfile>
      <anchor>a4edf82c561222ae589bf06807d2e52f7</anchor>
      <arglist>(int &amp;FpgaHandle, CGraphDMCIHardwareInterface *&amp;FpgaBus)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>close</name>
      <anchorfile>classCGraphDMCIProtoHardwareMmapper.html</anchorfile>
      <anchor>a3016604968e9b26bbeac0e5a71fef8d2</anchor>
      <arglist>(int &amp;FpgaHandle, CGraphDMCIHardwareInterface *&amp;FpgaBus)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>read</name>
      <anchorfile>classCGraphDMCIProtoHardwareMmapper.html</anchorfile>
      <anchor>a66013dde59c315a64b06694b60accdad</anchor>
      <arglist>(const CGraphDMCIHardwareInterface *FpgaBus, const size_t Address, void *Buffer, const size_t Len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>write</name>
      <anchorfile>classCGraphDMCIProtoHardwareMmapper.html</anchorfile>
      <anchor>a8a11a10bce218306c9ade22ce74c9272</anchor>
      <arglist>(CGraphDMCIHardwareInterface *FpgaBus, const size_t Address, const void *Buffer, const size_t Len)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const off_t</type>
      <name>FpgaMmapAdress</name>
      <anchorfile>classCGraphDMCIProtoHardwareMmapper.html</anchorfile>
      <anchor>ae98becb273cbe10b2d335d9400cae437</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const off_t</type>
      <name>FpgaMmapMask</name>
      <anchorfile>classCGraphDMCIProtoHardwareMmapper.html</anchorfile>
      <anchor>a1938662d267d77942916dfb075f38451</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>FpgaBusEmulationPathName</name>
      <anchorfile>classCGraphDMCIProtoHardwareMmapper.html</anchorfile>
      <anchor>a62308fec0c72b7d64eb2880be6b74f11</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>CGraphDMCIUartStatusRegister</name>
    <filename>unionCGraphDMCIUartStatusRegister.html</filename>
    <member kind="function">
      <type>struct CGraphDMCIUartStatusRegister::@51</type>
      <name>__attribute__</name>
      <anchorfile>unionCGraphDMCIUartStatusRegister.html</anchorfile>
      <anchor>a178f7d2bb40bbb9471b82468d8e4b3cd</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphDMCIUartStatusRegister</name>
      <anchorfile>unionCGraphDMCIUartStatusRegister.html</anchorfile>
      <anchor>abe79942ba1437ced4f978b18e24ec880</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>formatf</name>
      <anchorfile>unionCGraphDMCIUartStatusRegister.html</anchorfile>
      <anchor>a06e60b274c3894d14353396ec54f78f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>all</name>
      <anchorfile>unionCGraphDMCIUartStatusRegister.html</anchorfile>
      <anchor>ad07e8efeede85158617dafc9a8dc0e24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartRxFifoEmpty</name>
      <anchorfile>unionCGraphDMCIUartStatusRegister.html</anchorfile>
      <anchor>a024dd599b52c48be7e368b6e0f38de0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartRxFifoFull</name>
      <anchorfile>unionCGraphDMCIUartStatusRegister.html</anchorfile>
      <anchor>a57e1035d81d6e1914654ad7a9ea9f01d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartTxFifoEmpty</name>
      <anchorfile>unionCGraphDMCIUartStatusRegister.html</anchorfile>
      <anchor>aa581eabd4ea4d9d6dc3c769b402d4e66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartTxFifoFull</name>
      <anchorfile>unionCGraphDMCIUartStatusRegister.html</anchorfile>
      <anchor>addf42a2212efe606bdfbf5086be4602e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>reserved1</name>
      <anchorfile>unionCGraphDMCIUartStatusRegister.html</anchorfile>
      <anchor>a278456dd42028b695763e4a094b74838</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartRxFifoCount</name>
      <anchorfile>unionCGraphDMCIUartStatusRegister.html</anchorfile>
      <anchor>acd5c31c0a89873dd195de5c4073560c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartTxFifoCount</name>
      <anchorfile>unionCGraphDMCIUartStatusRegister.html</anchorfile>
      <anchor>a0b962b434055ebd952c31f06b26075a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartRxFifoCountHi</name>
      <anchorfile>unionCGraphDMCIUartStatusRegister.html</anchorfile>
      <anchor>a8ac25b856dc1ed7f5edb2eaeb342115e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartTxFifoCountHi</name>
      <anchorfile>unionCGraphDMCIUartStatusRegister.html</anchorfile>
      <anchor>ad69621384d140352d85eff0d125504c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>reserved2</name>
      <anchorfile>unionCGraphDMCIUartStatusRegister.html</anchorfile>
      <anchor>a245467b3d251f5fb3b87bb0d2a13be41</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CGraphDMTelemetryPayload</name>
    <filename>structCGraphDMTelemetryPayload.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>P1V2</name>
      <anchorfile>structCGraphDMTelemetryPayload.html</anchorfile>
      <anchor>a40ca3d7a1922a55bb43b014f85340ca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P2V2</name>
      <anchorfile>structCGraphDMTelemetryPayload.html</anchorfile>
      <anchor>a9072ef33899cf6c64c6801e65a31ef65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P28V</name>
      <anchorfile>structCGraphDMTelemetryPayload.html</anchorfile>
      <anchor>aabf5e94ad3e6f69c7e63101036feff6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P2V5</name>
      <anchorfile>structCGraphDMTelemetryPayload.html</anchorfile>
      <anchor>ae9229ccc55d75714927c4bda0e4350b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P6V</name>
      <anchorfile>structCGraphDMTelemetryPayload.html</anchorfile>
      <anchor>a2cf2674ccd45c2120fdabdf0d27459e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P5V</name>
      <anchorfile>structCGraphDMTelemetryPayload.html</anchorfile>
      <anchor>a96e323b05b6997c99852e66dda73913c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P3V3D</name>
      <anchorfile>structCGraphDMTelemetryPayload.html</anchorfile>
      <anchor>a7bab9cb994dd1b9e10ab8129e1768939</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P4V3</name>
      <anchorfile>structCGraphDMTelemetryPayload.html</anchorfile>
      <anchor>a459a109a02c832443a46a03a45862e58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P2I2</name>
      <anchorfile>structCGraphDMTelemetryPayload.html</anchorfile>
      <anchor>a2fe43be6757bb688d24fc8adc1b19b1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P4I3</name>
      <anchorfile>structCGraphDMTelemetryPayload.html</anchorfile>
      <anchor>a483542594a18b2be69f036d2ffc813b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P6I</name>
      <anchorfile>structCGraphDMTelemetryPayload.html</anchorfile>
      <anchor>a2605673d4a019966253ee4d34af6f40a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>CGraphFSMHardwareControlRegister</name>
    <filename>unionCGraphFSMHardwareControlRegister.html</filename>
    <member kind="function">
      <type>struct CGraphFSMHardwareControlRegister::@43</type>
      <name>__attribute__</name>
      <anchorfile>unionCGraphFSMHardwareControlRegister.html</anchorfile>
      <anchor>ab7258a9932e7917d899988b32003f325</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphFSMHardwareControlRegister</name>
      <anchorfile>unionCGraphFSMHardwareControlRegister.html</anchorfile>
      <anchor>a4b496a8247aed172ac28f28d436d0a6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>struct CGraphFSMHardwareControlRegister::@53</type>
      <name>__attribute__</name>
      <anchorfile>unionCGraphFSMHardwareControlRegister.html</anchorfile>
      <anchor>a359f3fd5073dc1f8152db38dbcf22de0</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphFSMHardwareControlRegister</name>
      <anchorfile>unionCGraphFSMHardwareControlRegister.html</anchorfile>
      <anchor>a4b496a8247aed172ac28f28d436d0a6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>all</name>
      <anchorfile>unionCGraphFSMHardwareControlRegister.html</anchorfile>
      <anchor>a7cdfb6d45facf20c34b261fda910692f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>HighVoltageEnable</name>
      <anchorfile>unionCGraphFSMHardwareControlRegister.html</anchorfile>
      <anchor>ae2c9c1458b17c23b56ffd573c9487617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>P1p2VEnable</name>
      <anchorfile>unionCGraphFSMHardwareControlRegister.html</anchorfile>
      <anchor>a33a186ffdc6dac2fa6f5df1f83d22d35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>P3p3VDEnable</name>
      <anchorfile>unionCGraphFSMHardwareControlRegister.html</anchorfile>
      <anchor>a104329246b59d58a427f962014675a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>PAnalogVEnable</name>
      <anchorfile>unionCGraphFSMHardwareControlRegister.html</anchorfile>
      <anchor>a013e0520e74e8d4d87741cb6cd4e4858</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>SyncAdcs</name>
      <anchorfile>unionCGraphFSMHardwareControlRegister.html</anchorfile>
      <anchor>aad44dabdfafbfe83fa7c131719527048</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>ForceChopper</name>
      <anchorfile>unionCGraphFSMHardwareControlRegister.html</anchorfile>
      <anchor>a4e83bfcf0e93ebb441a1147b7b396e44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>ChopperNonInverted</name>
      <anchorfile>unionCGraphFSMHardwareControlRegister.html</anchorfile>
      <anchor>ae9fc8aa6f6b344c75389cf9064329bdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>AdcDownsampleRatio</name>
      <anchorfile>unionCGraphFSMHardwareControlRegister.html</anchorfile>
      <anchor>a2daa4d34bb9a0631051436422db9a896</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CGraphFSMHardwareInterface</name>
    <filename>structCGraphFSMHardwareInterface.html</filename>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DeviceSerialNumber</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>ae6d2f73717d6ff781e6c8d374d4c4d54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>FpgaFirmwareBuildNumber</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a6f6534f36dbf3d7d5d6c6df20bc8b4a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UnixSeconds</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>aea132c96c3efad5e6c05ada1ecf6ac72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>IdealTicksPerSecond</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>ad7c760db0c8e6d57deca60f45c7b2e3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ActualTicksLastSecond</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a3a0ef22e178d6d89b991cbdaae268630</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ClockTicksThisSecondAddr</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>ab38644cd2cb639cfd11ace69fc82f0e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ClockSteeringDacSetpoint</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a0c3d40bbcd2aa36c5c3650553b409711</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DacASetpoint</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a72155378abfc6dea6db275ee01f5b212</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DacBSetpoint</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a74a63907f697c263895202d89d228b4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DacCSetpoint</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>aa52b179f181621aff568dc7431ba124f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>AdcAAccumulator</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a1b5f13d02a936fe1ab018192645cd857</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>AdcBAccumulator</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>aff53ee576e39d2aa8f945be64b6e996b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>AdcCAccumulator</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>ac5e91036a32f5883040c95d2f390c4d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcFifo</type>
      <name>AdcAFifo</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>ab0ac467643ee7b51723c956ceab4843a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcFifo</type>
      <name>AdcBFifo</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a7c5ae8f41b791528532c005aaab51653</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcFifo</type>
      <name>AdcCFifo</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>acd492dd39a6babb83e64598c9c066133</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFSMHardwareControlRegister</type>
      <name>ControlRegister</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>adad2914e4a552985b90aa068661417ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFSMHardwareStatusRegister</type>
      <name>StatusRegister</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a308064d55400cef5a798eeb31c8a3cd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>PPSRtcPhaseComparator</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>aa36f19cdf488b75d66eabea571a5c1d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>PPSAdcPhaseComparator</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a8fa78616d410b3c7efba31357c156f4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>MonitorAdcAccumulator</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>ada346ecb7cac5bb54405398a4e4fbc35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>reserved</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a7eee9b638ed93921a025990dbe1ea594</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo2</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a8d7a984aca300f612202be22c8cb9fc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UartStatusRegister</type>
      <name>UartStatusRegister2</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a39b7fc9662fdd9132f5c3e2fdfa408a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo1</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a841640612cb3256b8cf5049b6d368f2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UartStatusRegister</type>
      <name>UartStatusRegister1</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a655d71dce213ba193d2dc69cf6ba379f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo0</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a4db76c9e95c6469af2532d52d901612f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UartStatusRegister</type>
      <name>UartStatusRegister0</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>af366beb3b6cff9ec2dbee047cd56bbb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>BaudDivider0</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a81b3ec805e0769ce42fcd1ec1dd3de8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>BaudDivider1</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>ab8161dcf214059e7b315bba9ccd08f5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>BaudDivider2</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a51ca3cc6008776e9f3dabdc004d13658</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>BaudDivider3</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a5bac4d84f9582e4b66e2f3a812812d50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>MonitorAdcReadChannel</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a2b1caa4cda41beb25c8817238895bc53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>MonitorAdcSpiTransactionRegister</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a91259e668a5307e6755f5885a24934fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphMonitorAdcCommandStatusRegister</type>
      <name>MonitorAdcSpiCommandStatusRegister</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a5c713fbb997f4ef080a3cb724eefafe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>reserved1</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a8219d02afc29336bf6390e51ede21f0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>reserved2</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a055a5b23f013c051dc630e5779c3d8b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>reserved3</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a7079092db89599e99b409e48bc6d0060</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DacDSetpoint</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a5a1b57be25f260210755e071c816dea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>AdcDAccumulator</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a3a704abf6d9e421232628bf65c70659a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphBaudDividers</type>
      <name>BaudDividers</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>af241384a814464b15ba4894f8ef349a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo0ReadData</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>aab7527838df070d0ca39010201095f1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo1ReadData</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a0f18cf66b0d4da3b3ee0194e00053e08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo2ReadData</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>af01b3bdb4568e7544636960458e11bfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo3</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a8847d551c1d84b583ca091c3043a34b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UartStatusRegister</type>
      <name>UartStatusRegister3</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a6102642fac2506f26b8db30f44b0f6c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo3ReadData</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a52ce3656da03542f920b9dae1405e791</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifoLab</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>acb763804a1dc96875cb29d9dfd2e2657</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UartStatusRegister</type>
      <name>UartStatusRegisterLab</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>ae8dcb024feef65d63a132e3df83132ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifoLabReadData</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a260e86f710a8c20b3f7dc632c94dca82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ExtSpiAddrOut</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>af36f9cab606ec94fc4322b51e571150d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ExtSpiAddrIn</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>ab5446cd2205b00e8b97780dde562aa50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ExtSpiXfer</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a60b8a2d385058678cc895e105c1bb780</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ExtSpiReadback</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>ab8e5aee7378512ecf8b4447ecde99152</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint32_t</type>
      <name>DacFullScale</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a2e817d7ba1df75c481840841779e5fea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>DacDriverFullScaleOutputVoltage</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a3dbc7d676c408bd42c9607427218f007</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>PZTDriverFullScaleOutputTravel</name>
      <anchorfile>structCGraphFSMHardwareInterface.html</anchorfile>
      <anchor>a673ab0024bcda644d993b82b8e62f993</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>CGraphFSMHardwareStatusRegister</name>
    <filename>unionCGraphFSMHardwareStatusRegister.html</filename>
    <member kind="function">
      <type>struct CGraphFSMHardwareStatusRegister::@45</type>
      <name>__attribute__</name>
      <anchorfile>unionCGraphFSMHardwareStatusRegister.html</anchorfile>
      <anchor>aead72aa38eece350c847e34529c9a40d</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphFSMHardwareStatusRegister</name>
      <anchorfile>unionCGraphFSMHardwareStatusRegister.html</anchorfile>
      <anchor>a572651fc1b36748d6e83dc27b5d86400</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>struct CGraphFSMHardwareStatusRegister::@55</type>
      <name>__attribute__</name>
      <anchorfile>unionCGraphFSMHardwareStatusRegister.html</anchorfile>
      <anchor>a990a4c3a7073b18276c418b4b1fd8eb7</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphFSMHardwareStatusRegister</name>
      <anchorfile>unionCGraphFSMHardwareStatusRegister.html</anchorfile>
      <anchor>a572651fc1b36748d6e83dc27b5d86400</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>all</name>
      <anchorfile>unionCGraphFSMHardwareStatusRegister.html</anchorfile>
      <anchor>a7b53e0919ee7956e6dbfbd98c24d4dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PPSDetected</name>
      <anchorfile>unionCGraphFSMHardwareStatusRegister.html</anchorfile>
      <anchor>a4fb426c6700609468f9e5ca2f4d2052a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>HVFaultA</name>
      <anchorfile>unionCGraphFSMHardwareStatusRegister.html</anchorfile>
      <anchor>a412d218e89f03589b8f86403e2a8f081</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>HVFaultB</name>
      <anchorfile>unionCGraphFSMHardwareStatusRegister.html</anchorfile>
      <anchor>a83f929f490488e13dd4f0af83a5cea5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>HVFaultC</name>
      <anchorfile>unionCGraphFSMHardwareStatusRegister.html</anchorfile>
      <anchor>a7d61bcee97025b809e79efe256e88b5c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CGraphFSMProtoHardwareMmapper</name>
    <filename>classCGraphFSMProtoHardwareMmapper.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>open</name>
      <anchorfile>classCGraphFSMProtoHardwareMmapper.html</anchorfile>
      <anchor>aa454f38a05cb869e810041d6ab44cde8</anchor>
      <arglist>(int &amp;FpgaHandle, CGraphFSMHardwareInterface *&amp;FpgaBus)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>close</name>
      <anchorfile>classCGraphFSMProtoHardwareMmapper.html</anchorfile>
      <anchor>a7c553a78e34246b0ebfe41defa8e9221</anchor>
      <arglist>(int &amp;FpgaHandle, CGraphFSMHardwareInterface *&amp;FpgaBus)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>read</name>
      <anchorfile>classCGraphFSMProtoHardwareMmapper.html</anchorfile>
      <anchor>af907c67ad6d105dd342cd8b855cb6924</anchor>
      <arglist>(const CGraphFSMHardwareInterface *FpgaBus, const size_t Address, void *Buffer, const size_t Len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>write</name>
      <anchorfile>classCGraphFSMProtoHardwareMmapper.html</anchorfile>
      <anchor>aefddf4627df39239cf26a7401b900bc7</anchor>
      <arglist>(CGraphFSMHardwareInterface *FpgaBus, const size_t Address, const void *Buffer, const size_t Len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>open</name>
      <anchorfile>classCGraphFSMProtoHardwareMmapper.html</anchorfile>
      <anchor>a9218debe366240908f5b44f1fc37100d</anchor>
      <arglist>(int &amp;FpgaHandle, CGraphFSMHardwareInterface *&amp;FpgaBus)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>close</name>
      <anchorfile>classCGraphFSMProtoHardwareMmapper.html</anchorfile>
      <anchor>a584c8749c27a60c95cbf6b9cabd4807f</anchor>
      <arglist>(int &amp;FpgaHandle, CGraphFSMHardwareInterface *&amp;FpgaBus)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>read</name>
      <anchorfile>classCGraphFSMProtoHardwareMmapper.html</anchorfile>
      <anchor>a38eb565f0fd0664a6cdc930a758dcf18</anchor>
      <arglist>(const CGraphFSMHardwareInterface *FpgaBus, const size_t Address, void *Buffer, const size_t Len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>write</name>
      <anchorfile>classCGraphFSMProtoHardwareMmapper.html</anchorfile>
      <anchor>a40ba7313bebfe9c628f74698f532afec</anchor>
      <arglist>(CGraphFSMHardwareInterface *FpgaBus, const size_t Address, const void *Buffer, const size_t Len)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const off_t</type>
      <name>FpgaMmapAdress</name>
      <anchorfile>classCGraphFSMProtoHardwareMmapper.html</anchorfile>
      <anchor>a7c44a40970050bb190e9911bf3e098c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const off_t</type>
      <name>FpgaMmapMask</name>
      <anchorfile>classCGraphFSMProtoHardwareMmapper.html</anchorfile>
      <anchor>a8c09ace0ac6cd39116495b83878d4058</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>FpgaBusEmulationPathName</name>
      <anchorfile>classCGraphFSMProtoHardwareMmapper.html</anchorfile>
      <anchor>a79a8f67dc97a34ebd1dbc33e5fb10959</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CGraphFSMTelemetryPayload</name>
    <filename>structCGraphFSMTelemetryPayload.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>P1V2</name>
      <anchorfile>structCGraphFSMTelemetryPayload.html</anchorfile>
      <anchor>a3b2d6fafe67070b35a1d443ea8dcad7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P2V2</name>
      <anchorfile>structCGraphFSMTelemetryPayload.html</anchorfile>
      <anchor>a38c408f02831f964e75443bdcb7f6428</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P28V</name>
      <anchorfile>structCGraphFSMTelemetryPayload.html</anchorfile>
      <anchor>af803710c297974c1b5fb052fe3647d70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P2V5</name>
      <anchorfile>structCGraphFSMTelemetryPayload.html</anchorfile>
      <anchor>a0036467352e19f91953b0cc7a3b2a154</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P3V3A</name>
      <anchorfile>structCGraphFSMTelemetryPayload.html</anchorfile>
      <anchor>a44fa3679445ffc8ef2af893b1500821d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P6V</name>
      <anchorfile>structCGraphFSMTelemetryPayload.html</anchorfile>
      <anchor>aa3e9d6cd59a62864f9ae18eed15ce468</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P5V</name>
      <anchorfile>structCGraphFSMTelemetryPayload.html</anchorfile>
      <anchor>a2d0fda13e990d300527ac273f8a94d27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P3V3D</name>
      <anchorfile>structCGraphFSMTelemetryPayload.html</anchorfile>
      <anchor>a464c5bfbc00c62dab8332cad07c83e74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P4V3</name>
      <anchorfile>structCGraphFSMTelemetryPayload.html</anchorfile>
      <anchor>a6bc4cb6e1c84855d62c45d3c620b1a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>N5V</name>
      <anchorfile>structCGraphFSMTelemetryPayload.html</anchorfile>
      <anchor>a8856e82e9de54567291d32306da936fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>N6V</name>
      <anchorfile>structCGraphFSMTelemetryPayload.html</anchorfile>
      <anchor>ae20867a79fb526f6549be697ffaf91ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P150V</name>
      <anchorfile>structCGraphFSMTelemetryPayload.html</anchorfile>
      <anchor>aab3783f86ecc26a869cfb31f4d973bd9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>CGraphFWHardwareControlRegister</name>
    <filename>unionCGraphFWHardwareControlRegister.html</filename>
    <member kind="function">
      <type>struct CGraphFWHardwareControlRegister::@57</type>
      <name>__attribute__</name>
      <anchorfile>unionCGraphFWHardwareControlRegister.html</anchorfile>
      <anchor>a84267448af728082358d525eabcf4dc8</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphFWHardwareControlRegister</name>
      <anchorfile>unionCGraphFWHardwareControlRegister.html</anchorfile>
      <anchor>a5d4c15ffc2f5f60447ad518f3a78922a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>formatf</name>
      <anchorfile>unionCGraphFWHardwareControlRegister.html</anchorfile>
      <anchor>a52ea9fb1af308ba2be86c557fef47f81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>all</name>
      <anchorfile>unionCGraphFWHardwareControlRegister.html</anchorfile>
      <anchor>ac53ed9e36eb0cbdc7f3abf8145ce7073</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PosLedsEnA</name>
      <anchorfile>unionCGraphFWHardwareControlRegister.html</anchorfile>
      <anchor>a538b88891dbf5b52ec6a19605f507e31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PosLedsEnB</name>
      <anchorfile>unionCGraphFWHardwareControlRegister.html</anchorfile>
      <anchor>a2a82d71fdf4d43dc6a7aa1be45ee60a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>MotorEnable</name>
      <anchorfile>unionCGraphFWHardwareControlRegister.html</anchorfile>
      <anchor>a87d10a29d177836283abbd18c3f58d15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ResetSteps</name>
      <anchorfile>unionCGraphFWHardwareControlRegister.html</anchorfile>
      <anchor>afc1cb7d2d56aefc59a18687056c5cb8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>MotorAPlus</name>
      <anchorfile>unionCGraphFWHardwareControlRegister.html</anchorfile>
      <anchor>aaa44e53e9809177ccccdadc8d33a919b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>MotorAMinus</name>
      <anchorfile>unionCGraphFWHardwareControlRegister.html</anchorfile>
      <anchor>aa8debb43e68c34c1ff436050ec2df701</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>MotorBPlus</name>
      <anchorfile>unionCGraphFWHardwareControlRegister.html</anchorfile>
      <anchor>a04da17928df29eb5477acfd659415262</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>MotorBMinus</name>
      <anchorfile>unionCGraphFWHardwareControlRegister.html</anchorfile>
      <anchor>ab6fef6cfb29b3f2b48835de7c76b4092</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Fault1V</name>
      <anchorfile>unionCGraphFWHardwareControlRegister.html</anchorfile>
      <anchor>ac9af0f9d50aa50b89a7baf5308f2342a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Fault3V</name>
      <anchorfile>unionCGraphFWHardwareControlRegister.html</anchorfile>
      <anchor>a9876d662cbc29edbb350147750263afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Fault5V</name>
      <anchorfile>unionCGraphFWHardwareControlRegister.html</anchorfile>
      <anchor>a7b0ccc4d7de57fade38c94cd2d8d2d22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PowernEn5V</name>
      <anchorfile>unionCGraphFWHardwareControlRegister.html</anchorfile>
      <anchor>acd58ebcb8d76f6916fc9b68aa2cbc2a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PowerCycd</name>
      <anchorfile>unionCGraphFWHardwareControlRegister.html</anchorfile>
      <anchor>a94efb54a25a7eecb13ff2fecc5b8cf07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>LedR</name>
      <anchorfile>unionCGraphFWHardwareControlRegister.html</anchorfile>
      <anchor>a7242e1e78b4015895b912304252513d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>LedG</name>
      <anchorfile>unionCGraphFWHardwareControlRegister.html</anchorfile>
      <anchor>a106d423cd2c1102a0ddc2047410045f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>LedB</name>
      <anchorfile>unionCGraphFWHardwareControlRegister.html</anchorfile>
      <anchor>a775787e96893def91600da9e9be86174</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Uart0OE</name>
      <anchorfile>unionCGraphFWHardwareControlRegister.html</anchorfile>
      <anchor>ad0cfa167e8a59de2be271bd38309d250</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Uart1OE</name>
      <anchorfile>unionCGraphFWHardwareControlRegister.html</anchorfile>
      <anchor>a3598e82807c29e76ce4150588749d28b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Uart2OE</name>
      <anchorfile>unionCGraphFWHardwareControlRegister.html</anchorfile>
      <anchor>a4cbf1cd7a5266f702240afc845121e9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Uart3OE</name>
      <anchorfile>unionCGraphFWHardwareControlRegister.html</anchorfile>
      <anchor>a25aa3a8962833cb71a0535264451661a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Ux1SelJmp</name>
      <anchorfile>unionCGraphFWHardwareControlRegister.html</anchorfile>
      <anchor>aed1889580bc32fc5cb54d47bfe85bc16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Ux2SelJmp</name>
      <anchorfile>unionCGraphFWHardwareControlRegister.html</anchorfile>
      <anchor>a528b41a0f580435c82ba183553f29f25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CGraphFWHardwareInterface</name>
    <filename>structCGraphFWHardwareInterface.html</filename>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DeviceSerialNumber</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a3b7a50eb25a4ef35f728d492d2cbb887</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>FpgaFirmwareBuildNumber</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a28284795c4b9590f4b2019d60bba739e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UnixSeconds</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a5ffb66f23e21f8aa3f09b3129960bcef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>IdealTicksPerSecond</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>afe772429541ed1fec9d21618015e1472</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ActualTicksLastSecond</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a831cfd98b9e1b9563441d05bd4b26ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ClockTicksThisSecondAddr</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>acb9eb49ccdc4f587166e06afee49af55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ClockSteeringDacSetpoint</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a29be788e563a8ae3f5bbfa67082fe86e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>PPSRtcPhaseComparator</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a56c09a686f4474a6a6442740debaf58b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWHardwareControlRegister</type>
      <name>ControlRegister</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>abe0825b90d1f27a10443f3e4207a202b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWMotorControlStatusRegister</type>
      <name>MotorControlStatus</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a70c9554b6f0609db7f3c4ebc36ee9872</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionSenseRegister</type>
      <name>PositionSensors</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a6cb9c14d0526df5cbb9510e3489fa540</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AdcAccumulator</type>
      <name>MonitorAdcAccumulator</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>aa6f523b88737f7727f4c86ba6d84120e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>MonitorAdcReadChannel</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a82926dea973fe4f6312aec45791a2196</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>MonitorAdcSpiTransactionRegister</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>ac47bb675b157daf6e500e3ed46cae04d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphMonitorAdcCommandStatusRegister</type>
      <name>MonitorAdcSpiCommandStatusRegister</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>ae12716d91286cd89c6d410dd9f7b4e16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphBaudDividers</type>
      <name>BaudDividers</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>ac0c66a521c9215eaea782a75c373e87c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo0</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a8a1dac8d4e7ff15af7c82e97eca757f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UartStatusRegister</type>
      <name>UartStatusRegister0</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a04af619827abd9ae1344428191c8edaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo0ReadData</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a9a3247489056bb518546bebc1355c12f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo1</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a1be7065ec1fefac24cf84fce4f0a95ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UartStatusRegister</type>
      <name>UartStatusRegister1</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a6bea22108a12ad76712bdf76393ad407</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo1ReadData</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a09e038fdf933288851017d7c40c64975</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo2</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a9af8f3f61b1377b61f14095e5faa597c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UartStatusRegister</type>
      <name>UartStatusRegister2</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>aa8f37932950454ee041e68113e4ab130</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo2ReadData</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a964f1d0964aa64d332fb2892ff058607</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo3</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a152e23e078ea9414d34eed8d743cc238</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UartStatusRegister</type>
      <name>UartStatusRegister3</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a1ccec3878bbfb02eae54997979ea025e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifo3ReadData</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a1ffff92b367bdcff54af5c83050a2711</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifoUsb</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a8875121eda005e46a276a8f485f44cc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UartStatusRegister</type>
      <name>UartStatusRegisterUsb</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a92f081eb3494c7514646dd94daa531ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifoUsbReadData</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a7a7d9b94957a8702693940224d47d969</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifoGps</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a90680e40f474e8dd1322cc6104bd50e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UartStatusRegister</type>
      <name>UartStatusRegisterGps</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a7cd9bb9da37652646e12668bf301916f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>UartFifoGpsReadData</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a73f5d63c3bd4b49c75c7aa70636ce2eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDetHomeA</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a5af4e5fecbd6a57e17da51ec9c780f60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDetA0</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>aa75a0af19e390f3f9d0c950f97ba5dfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDetA1</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a6b3d2b47e6981d65e4068e8b415cd8e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDetA2</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a8a3085efb067797254553b5d50d61dd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDetHomeB</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a1b9f64a31edbab0ba298849094a0bdf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDetB0</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>aeb4cc397cf1f52459027667e57cd7abd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDetB1</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a45e63d39c389fd4810dfd958fe38a1e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDetB2</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>abc7de17295ed3a0ea9606d01a6641ea9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet0A</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a801bbc713a7bbc99fcc638e4d94315c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet1A</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>acec4cf463b2b2bdfbfe3dacad8d5474e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet2A</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a4294dba19c6441470f574c4cb83454dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet3A</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>aa342622660379cc21268aee407816a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet4A</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a9c4cc23df4e67d37574bd7fc7d69e096</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet5A</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>ae6db49b9394aa0b35f00afe91ddb3fd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet6A</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>aaa7bdcc72e91db55fe224e7d04e7c815</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet7A</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>afb9856800aae19c05ce45f7d6415840c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet0B</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a424c0a03f0a54b9f99504b52b797a313</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet1B</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>ac6cb17d0e70e38a2ce5640e2a66a6e9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet2B</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a1c00be854c10b57d98e38bd63e143632</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet3B</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>ab94a729e5e259fa4d6310612e57c89d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet4B</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a24ae4630fbeb9d5000e294da09d8822b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet5B</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>ab6c79610d538994a2a4b754d22e557db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet6B</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>a28af78b916193f93afba422416812728</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CGraphFWPositionStepRegister</type>
      <name>PosDet7B</name>
      <anchorfile>structCGraphFWHardwareInterface.html</anchorfile>
      <anchor>ac70c9690aab6964a215bca1e802a04f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>CGraphFWMotorControlStatusRegister</name>
    <filename>unionCGraphFWMotorControlStatusRegister.html</filename>
    <member kind="function">
      <type>struct CGraphFWMotorControlStatusRegister::@59</type>
      <name>__attribute__</name>
      <anchorfile>unionCGraphFWMotorControlStatusRegister.html</anchorfile>
      <anchor>a0a89aa6f877975c1093285582b5adecb</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphFWMotorControlStatusRegister</name>
      <anchorfile>unionCGraphFWMotorControlStatusRegister.html</anchorfile>
      <anchor>a355fff106017989050418a0aec834bfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>formatf</name>
      <anchorfile>unionCGraphFWMotorControlStatusRegister.html</anchorfile>
      <anchor>a1b58ea4328de51ccbb420f197b1c0330</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>all</name>
      <anchorfile>unionCGraphFWMotorControlStatusRegister.html</anchorfile>
      <anchor>a34b7ecaa957315a235d7f162192cfec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16_t</type>
      <name>SeekStep</name>
      <anchorfile>unionCGraphFWMotorControlStatusRegister.html</anchorfile>
      <anchor>acd962f8fa48083be12a61eb2984d1a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16_t</type>
      <name>CurrentStep</name>
      <anchorfile>unionCGraphFWMotorControlStatusRegister.html</anchorfile>
      <anchor>aab95d191ecba15ed79e2adf54e989a8f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>CGraphFWPositionSenseRegister</name>
    <filename>unionCGraphFWPositionSenseRegister.html</filename>
    <member kind="function">
      <type>struct CGraphFWPositionSenseRegister::@61</type>
      <name>__attribute__</name>
      <anchorfile>unionCGraphFWPositionSenseRegister.html</anchorfile>
      <anchor>a3890ac6cbd99cb063119c54285cb6034</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphFWPositionSenseRegister</name>
      <anchorfile>unionCGraphFWPositionSenseRegister.html</anchorfile>
      <anchor>afeaccb81c425649815984a77db18cf67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>formatf</name>
      <anchorfile>unionCGraphFWPositionSenseRegister.html</anchorfile>
      <anchor>af1de41f41b196df83128d835e808950b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>all</name>
      <anchorfile>unionCGraphFWPositionSenseRegister.html</anchorfile>
      <anchor>a93149460e67b3822afbb95ea7c4e6fe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PosSenseHomeA</name>
      <anchorfile>unionCGraphFWPositionSenseRegister.html</anchorfile>
      <anchor>ae35f1b63b457d218acacfda3a7161811</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PosSenseBit0A</name>
      <anchorfile>unionCGraphFWPositionSenseRegister.html</anchorfile>
      <anchor>ae71cd8524e3495f914772024b7d0e174</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PosSenseBit1A</name>
      <anchorfile>unionCGraphFWPositionSenseRegister.html</anchorfile>
      <anchor>ae9b6bb85a7b491a606374b59cd4b56a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PosSenseBit2A</name>
      <anchorfile>unionCGraphFWPositionSenseRegister.html</anchorfile>
      <anchor>ab07d06a5d82fa4da370786b4eb3e810b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PosSenseHomeB</name>
      <anchorfile>unionCGraphFWPositionSenseRegister.html</anchorfile>
      <anchor>a419ba21c3b11bb6d2edd6d67c024fb18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PosSenseBit0B</name>
      <anchorfile>unionCGraphFWPositionSenseRegister.html</anchorfile>
      <anchor>ab62b782e55c0cc94d45ee6beb7e802ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PosSenseBit1B</name>
      <anchorfile>unionCGraphFWPositionSenseRegister.html</anchorfile>
      <anchor>a66b8bf2dce1544f4697e89309ecc5784</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PosSenseBit2B</name>
      <anchorfile>unionCGraphFWPositionSenseRegister.html</anchorfile>
      <anchor>ad0e5c40482d94d55d66a7c984d3081ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PosSenseA</name>
      <anchorfile>unionCGraphFWPositionSenseRegister.html</anchorfile>
      <anchor>a4e67bf536ffa23e9d7be93f3f4d33143</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PosSenseB</name>
      <anchorfile>unionCGraphFWPositionSenseRegister.html</anchorfile>
      <anchor>aa69468bd5bd583ac3f629f0aaff99d47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>CGraphFWPositionStepRegister</name>
    <filename>unionCGraphFWPositionStepRegister.html</filename>
    <member kind="function">
      <type>struct CGraphFWPositionStepRegister::@63</type>
      <name>__attribute__</name>
      <anchorfile>unionCGraphFWPositionStepRegister.html</anchorfile>
      <anchor>a03efb98027126d752932ecc22b55045f</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphFWPositionStepRegister</name>
      <anchorfile>unionCGraphFWPositionStepRegister.html</anchorfile>
      <anchor>a69e558bcc70d6dfa2eae22aa63479003</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int16_t</type>
      <name>MidStep</name>
      <anchorfile>unionCGraphFWPositionStepRegister.html</anchorfile>
      <anchor>a3de48b4625b9d90e490de25b5424a225</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>formatf</name>
      <anchorfile>unionCGraphFWPositionStepRegister.html</anchorfile>
      <anchor>a6ead044afae2773a432152aafd1871a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>uint64_t</type>
      <name>all</name>
      <anchorfile>unionCGraphFWPositionStepRegister.html</anchorfile>
      <anchor>ac5a3e03a6d1e55103b0c5d0e69f1cc56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16_t</type>
      <name>OnStep</name>
      <anchorfile>unionCGraphFWPositionStepRegister.html</anchorfile>
      <anchor>a6ffaf4ae581edc71277d03c13da8dd7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>reserved1</name>
      <anchorfile>unionCGraphFWPositionStepRegister.html</anchorfile>
      <anchor>a1716db4966a6ea515c1c7f2c207f9e78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16_t</type>
      <name>OffStep</name>
      <anchorfile>unionCGraphFWPositionStepRegister.html</anchorfile>
      <anchor>ad5b1387d8c62e94d3977c5923bff435e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>reserved2</name>
      <anchorfile>unionCGraphFWPositionStepRegister.html</anchorfile>
      <anchor>a2b250f67c76b1435a714883c3c0165ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CGraphFWTelemetryPayload</name>
    <filename>structCGraphFWTelemetryPayload.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>P1V2</name>
      <anchorfile>structCGraphFWTelemetryPayload.html</anchorfile>
      <anchor>ab725e4d09b4043612b47b12dba62ea00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P2V2</name>
      <anchorfile>structCGraphFWTelemetryPayload.html</anchorfile>
      <anchor>ad91efbbbe8dde82f75e081fcaf248686</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P28V</name>
      <anchorfile>structCGraphFWTelemetryPayload.html</anchorfile>
      <anchor>aebaba0b8246e516ef24a9e2a4cc920ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P2V5</name>
      <anchorfile>structCGraphFWTelemetryPayload.html</anchorfile>
      <anchor>a39059e34d650d9ea6b310b9402754b22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P6V</name>
      <anchorfile>structCGraphFWTelemetryPayload.html</anchorfile>
      <anchor>a24e5d63dd2a7d879f937a21008b288f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P5V</name>
      <anchorfile>structCGraphFWTelemetryPayload.html</anchorfile>
      <anchor>a75709d1fdd9ee29d23360258c836bd88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P3V3D</name>
      <anchorfile>structCGraphFWTelemetryPayload.html</anchorfile>
      <anchor>ac13970902aff913358f268ff652ba7cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P4V3</name>
      <anchorfile>structCGraphFWTelemetryPayload.html</anchorfile>
      <anchor>aa69091c8e368ff96c54ffb5dd7fcd18b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P2I2</name>
      <anchorfile>structCGraphFWTelemetryPayload.html</anchorfile>
      <anchor>a97a37b3322a0aae20e41e787862ecb7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P4I3</name>
      <anchorfile>structCGraphFWTelemetryPayload.html</anchorfile>
      <anchor>ac010bd1505130469f5bfc175c9b1192d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>P6I</name>
      <anchorfile>structCGraphFWTelemetryPayload.html</anchorfile>
      <anchor>a84286a9d8be2640c29cf2b26566fdcc6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CGraphHardFaultPayload</name>
    <filename>structCGraphHardFaultPayload.html</filename>
    <member kind="function">
      <type>void</type>
      <name>formatf</name>
      <anchorfile>structCGraphHardFaultPayload.html</anchorfile>
      <anchor>a8baefc54eb9cf60897917a9b2b1beb43</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>R0</name>
      <anchorfile>structCGraphHardFaultPayload.html</anchorfile>
      <anchor>ada6fdcbd3c8139a9b10d87fa43001cb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>R1</name>
      <anchorfile>structCGraphHardFaultPayload.html</anchorfile>
      <anchor>af62f33b918bad29abcce9b5a83158875</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>R2</name>
      <anchorfile>structCGraphHardFaultPayload.html</anchorfile>
      <anchor>a67d2b1587d7487b58e8b834a9d422958</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>R3</name>
      <anchorfile>structCGraphHardFaultPayload.html</anchorfile>
      <anchor>ae2e94631e8987191b61e7d2fefe14807</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>R12</name>
      <anchorfile>structCGraphHardFaultPayload.html</anchorfile>
      <anchor>abff13cc86f3520a749d20183bdb70b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>LR</name>
      <anchorfile>structCGraphHardFaultPayload.html</anchorfile>
      <anchor>a30f5b6529fbda3d944a606940cbca9b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PC</name>
      <anchorfile>structCGraphHardFaultPayload.html</anchorfile>
      <anchor>a7d69c95e498c8bfe550881a5339d7ab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PSR</name>
      <anchorfile>structCGraphHardFaultPayload.html</anchorfile>
      <anchor>a09ddfa17867be63422ed0879683c7cb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>BFAR</name>
      <anchorfile>structCGraphHardFaultPayload.html</anchorfile>
      <anchor>a192f9e278becf9b20e34cacbc6a77259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>CFSR</name>
      <anchorfile>structCGraphHardFaultPayload.html</anchorfile>
      <anchor>ae94165483c02fbf683f9a62d7d0861d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>HFSR</name>
      <anchorfile>structCGraphHardFaultPayload.html</anchorfile>
      <anchor>afcfaa3f7ef0cdb0cdac050e3a5add4c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DFSR</name>
      <anchorfile>structCGraphHardFaultPayload.html</anchorfile>
      <anchor>ad46f186e128b8754441e03053565d4a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>AFSR</name>
      <anchorfile>structCGraphHardFaultPayload.html</anchorfile>
      <anchor>ac0412ba656028b467c676a0eb808b50f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>CGraphMonitorAdcCommandStatusRegister</name>
    <filename>unionCGraphMonitorAdcCommandStatusRegister.html</filename>
    <member kind="function">
      <type>struct CGraphMonitorAdcCommandStatusRegister::@41</type>
      <name>__attribute__</name>
      <anchorfile>unionCGraphMonitorAdcCommandStatusRegister.html</anchorfile>
      <anchor>af06a63eaf40e5390b2a16374957cfa97</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphMonitorAdcCommandStatusRegister</name>
      <anchorfile>unionCGraphMonitorAdcCommandStatusRegister.html</anchorfile>
      <anchor>ae7cd3010f69caeb80e2be2da8d5ef8df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>formatf</name>
      <anchorfile>unionCGraphMonitorAdcCommandStatusRegister.html</anchorfile>
      <anchor>abe756e3595ffd187941ff6283362a274</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>all</name>
      <anchorfile>unionCGraphMonitorAdcCommandStatusRegister.html</anchorfile>
      <anchor>a333d95afea980d252fe883c1e81b2c00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>FrameEnable</name>
      <anchorfile>unionCGraphMonitorAdcCommandStatusRegister.html</anchorfile>
      <anchor>aa883b40bcece7427f530fbe54af4c958</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>TransactionComplete</name>
      <anchorfile>unionCGraphMonitorAdcCommandStatusRegister.html</anchorfile>
      <anchor>a91cff43131b91e53ec241df4c49f1ad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>nDrdy</name>
      <anchorfile>unionCGraphMonitorAdcCommandStatusRegister.html</anchorfile>
      <anchor>aea9adec59cce0ec498e60d60d22f207b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CGraphPacket</name>
    <filename>classCGraphPacket.html</filename>
    <base>IPacket</base>
    <member kind="function">
      <type></type>
      <name>CGraphPacket</name>
      <anchorfile>classCGraphPacket.html</anchorfile>
      <anchor>ab11b17d609c4ac02fd548f40e086b8ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CGraphPacket</name>
      <anchorfile>classCGraphPacket.html</anchorfile>
      <anchor>ac4bb585dd9f9ed603dc599ce683406b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>FindPacketStart</name>
      <anchorfile>classCGraphPacket.html</anchorfile>
      <anchor>ac357669fe1388783b9f3862dfd7d013e</anchor>
      <arglist>(const uint8_t *Buffer, const size_t BufferLen, size_t &amp;Offset) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>FindPacketEnd</name>
      <anchorfile>classCGraphPacket.html</anchorfile>
      <anchor>afaa6a56566cef5c5d7f38cbfda879a4b</anchor>
      <arglist>(const uint8_t *Buffer, const size_t BufferLen, size_t &amp;Offset) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>HeaderLen</name>
      <anchorfile>classCGraphPacket.html</anchorfile>
      <anchor>a17e93f7e7362463867975d78332a04b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>FooterLen</name>
      <anchorfile>classCGraphPacket.html</anchorfile>
      <anchor>ab0c2fd5ff25af04c41e030d69105b822</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>PayloadOffset</name>
      <anchorfile>classCGraphPacket.html</anchorfile>
      <anchor>a9f966098b291a3aeed55a7e0cdc78ce2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>MaxPayloadLength</name>
      <anchorfile>classCGraphPacket.html</anchorfile>
      <anchor>a55a3ac1a20d1bfc5ba327603577e7c9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsBroadcastSerialNum</name>
      <anchorfile>classCGraphPacket.html</anchorfile>
      <anchor>a710a564d10d2c82c355b8e088a7c1adb</anchor>
      <arglist>(const uint8_t *Buffer, const size_t PacketStartPos, const size_t PacketEndPos) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64_t</type>
      <name>SerialNum</name>
      <anchorfile>classCGraphPacket.html</anchorfile>
      <anchor>ae4e3b62511ae9e8345b3986f9493a616</anchor>
      <arglist>(const uint8_t *Buffer, const size_t PacketStartPos, const size_t PacketEndPos) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>PayloadLen</name>
      <anchorfile>classCGraphPacket.html</anchorfile>
      <anchor>ac4dd3eca7194209c8fb2aed255a7decb</anchor>
      <arglist>(const uint8_t *Buffer, const size_t BufferCount, const size_t PacketStartPos) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint64_t</type>
      <name>PayloadType</name>
      <anchorfile>classCGraphPacket.html</anchorfile>
      <anchor>a5f1ce030ab182253857a39befc355602</anchor>
      <arglist>(const uint8_t *Buffer, const size_t BufferCount, const size_t PacketStartPos) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>DoesPayloadTypeMatch</name>
      <anchorfile>classCGraphPacket.html</anchorfile>
      <anchor>aecc2fe55b82b35729b72b1104250cf69</anchor>
      <arglist>(const uint8_t *Buffer, const size_t BufferCount, const size_t PacketStartPos, const size_t PacketEndPos, const uint32_t CmdType) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>IsValid</name>
      <anchorfile>classCGraphPacket.html</anchorfile>
      <anchor>a492f2a1c70d5447d9eb7ee1c6603054d</anchor>
      <arglist>(const uint8_t *Buffer, const size_t BufferCount, const size_t PacketStartPos, const size_t PacketEndPos) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>MakePacket</name>
      <anchorfile>classCGraphPacket.html</anchorfile>
      <anchor>a1bf2ba21ccf09a1caf5b72f5e690c3ea</anchor>
      <arglist>(uint8_t *Buffer, const size_t BufferCount, const void *Payload, const uint16_t PayloadType, const size_t PayloadLen) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CGraphPacketFooter</name>
    <filename>structCGraphPacketFooter.html</filename>
    <member kind="function">
      <type></type>
      <name>CGraphPacketFooter</name>
      <anchorfile>structCGraphPacketFooter.html</anchorfile>
      <anchor>ad5332dfb4973bcfc4dd2501389c8232d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>CRC32BZIP2</name>
      <anchorfile>structCGraphPacketFooter.html</anchorfile>
      <anchor>a8708e957c5aaea407ca138a94b26e708</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PacketEndToken</name>
      <anchorfile>structCGraphPacketFooter.html</anchorfile>
      <anchor>a1a12a0f86427a4140eaaee013ed041d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CGraphPacketHeader</name>
    <filename>structCGraphPacketHeader.html</filename>
    <member kind="function">
      <type></type>
      <name>CGraphPacketHeader</name>
      <anchorfile>structCGraphPacketHeader.html</anchorfile>
      <anchor>ae6021c64734a8394c79338262dc5c3df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGraphPacketHeader</name>
      <anchorfile>structCGraphPacketHeader.html</anchorfile>
      <anchor>a7cb9a795a10ea07746a97886ca2eadea</anchor>
      <arglist>(uint16_t packettype, uint16_t payloadtype, uint16_t payloadlen)</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>PayloadData</name>
      <anchorfile>structCGraphPacketHeader.html</anchorfile>
      <anchor>a806865c63a2f011bd1a100a7cc40a3c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>PayloadDataNonConst</name>
      <anchorfile>structCGraphPacketHeader.html</anchorfile>
      <anchor>a9428ed0b9e3d90f1f410487be99247c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>formatf</name>
      <anchorfile>structCGraphPacketHeader.html</anchorfile>
      <anchor>a53fc17820da22ef07d7b3764ab409e00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>PacketStartToken</name>
      <anchorfile>structCGraphPacketHeader.html</anchorfile>
      <anchor>a1755f0a8d9296c58f4c095f973fb9c16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>PayloadType</name>
      <anchorfile>structCGraphPacketHeader.html</anchorfile>
      <anchor>ade8f5918c9c4e5c04212f1a24a35c150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>PayloadLen</name>
      <anchorfile>structCGraphPacketHeader.html</anchorfile>
      <anchor>a7abef20f790c1615bdea50675a285d84</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CGraphVersionPayload</name>
    <filename>structCGraphVersionPayload.html</filename>
    <member kind="function">
      <type>void</type>
      <name>formatf</name>
      <anchorfile>structCGraphVersionPayload.html</anchorfile>
      <anchor>aac5c8a5cea469839eeed586a9b0283c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>SerialNum</name>
      <anchorfile>structCGraphVersionPayload.html</anchorfile>
      <anchor>a83628e3c34caad80888c6fdda3d3d189</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ProcessorFirmwareBuildNum</name>
      <anchorfile>structCGraphVersionPayload.html</anchorfile>
      <anchor>a19befd003f6fd1aeaea0ae39414ffca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>FPGAFirmwareBuildNum</name>
      <anchorfile>structCGraphVersionPayload.html</anchorfile>
      <anchor>a9757179c759ea383869aca78c2066202</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>lt244xdetails::channel</name>
    <filename>unionlt244xdetails_1_1channel.html</filename>
    <member kind="function">
      <type>struct lt244xdetails::channel::@23</type>
      <name>__attribute__</name>
      <anchorfile>unionlt244xdetails_1_1channel.html</anchorfile>
      <anchor>ad18d3f1fd9a1cd07f078d1842d06b52a</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>channel</name>
      <anchorfile>unionlt244xdetails_1_1channel.html</anchorfile>
      <anchor>a3a5a3365798ef5c99576698c8593d01a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>channel</name>
      <anchorfile>unionlt244xdetails_1_1channel.html</anchorfile>
      <anchor>abe406ae2f0974b765837033f824f3ae9</anchor>
      <arglist>(const uint8_t singleended, const uint8_t chanbit0, const uint8_t chanbits123)</arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>all</name>
      <anchorfile>unionlt244xdetails_1_1channel.html</anchorfile>
      <anchor>a74425dae92d17d583f90c828225bd049</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>ChannelBits123</name>
      <anchorfile>unionlt244xdetails_1_1channel.html</anchorfile>
      <anchor>ae4033c793a461aacfb58b1c012fb686f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>ChanBit0orInvertDiffChan</name>
      <anchorfile>unionlt244xdetails_1_1channel.html</anchorfile>
      <anchor>a9c95a8dce181cf681619b60b91c7a9ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>SingleEnded</name>
      <anchorfile>unionlt244xdetails_1_1channel.html</anchorfile>
      <anchor>aff03fba875added4328c8af58d9eccff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>reserved</name>
      <anchorfile>unionlt244xdetails_1_1channel.html</anchorfile>
      <anchor>aa6a7bba06d1d241022c6bd5a17e3586e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Cmd</name>
    <filename>structCmd.html</filename>
    <member kind="function">
      <type></type>
      <name>Cmd</name>
      <anchorfile>structCmd.html</anchorfile>
      <anchor>a0175eebbe92261ae15e24aeda851bdfe</anchor>
      <arglist>(const char *name, const char *help, int8_t(*resp)(char const *, char const *, const size_t, const void *))</arglist>
    </member>
    <member kind="variable">
      <type>char const  *</type>
      <name>Name</name>
      <anchorfile>structCmd.html</anchorfile>
      <anchor>a7666ce99ad8efac6285d703cc575d757</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char const  *</type>
      <name>Help</name>
      <anchorfile>structCmd.html</anchorfile>
      <anchor>ac5dd6521b17f844b57fc2d70206d783a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>Strlen</name>
      <anchorfile>structCmd.html</anchorfile>
      <anchor>a471022e0e867c60aeb563607324044e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int8_t(*</type>
      <name>Response</name>
      <anchorfile>structCmd.html</anchorfile>
      <anchor>a49c4405118293c247e137ba5b8766fdc</anchor>
      <arglist>)(char const *, char const *, const size_t, const void *)</arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>ads1258details::config0register</name>
    <filename>unionads1258details_1_1config0register.html</filename>
    <member kind="function">
      <type>struct ads1258details::config0register::@15</type>
      <name>__attribute__</name>
      <anchorfile>unionads1258details_1_1config0register.html</anchorfile>
      <anchor>a38b62671605d488fbfda6dcd1919c88b</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>config0register</name>
      <anchorfile>unionads1258details_1_1config0register.html</anchorfile>
      <anchor>ab4b31f97664b5aea1093c0875dfb09ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>config0register</name>
      <anchorfile>unionads1258details_1_1config0register.html</anchorfile>
      <anchor>a84e5a0803dd3d5be74bfcd2450d4567d</anchor>
      <arglist>(uint8_t a, uint8_t b, uint8_t c, uint8_t d, uint8_t e, uint8_t f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>unionads1258details_1_1config0register.html</anchorfile>
      <anchor>a9dcec9b0b5cb21690b1a0a883e0d0f42</anchor>
      <arglist>(config0register &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>all</name>
      <anchorfile>unionads1258details_1_1config0register.html</anchorfile>
      <anchor>afad9955f8bba267d41f7a43262599f50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>alsomustbezero</name>
      <anchorfile>unionads1258details_1_1config0register.html</anchorfile>
      <anchor>a2a79e5d5f9445bd0b39477f16fdb1ce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>stat</name>
      <anchorfile>unionads1258details_1_1config0register.html</anchorfile>
      <anchor>a73a816de137847e9b90e255c4ca96e5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>chop</name>
      <anchorfile>unionads1258details_1_1config0register.html</anchorfile>
      <anchor>a858ddc7ee2fbcf92eee7c0e03ded04b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>clkout</name>
      <anchorfile>unionads1258details_1_1config0register.html</anchorfile>
      <anchor>a51d189f439ad01b3754ab715c593605d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>bypass</name>
      <anchorfile>unionads1258details_1_1config0register.html</anchorfile>
      <anchor>a6ecf0e298b1be80244e7545e7ef55822</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>muxmod</name>
      <anchorfile>unionads1258details_1_1config0register.html</anchorfile>
      <anchor>a6a17266cde4f5641e80acd38dd1f6f2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>spiresettimeout</name>
      <anchorfile>unionads1258details_1_1config0register.html</anchorfile>
      <anchor>aafc4f59a246850c482c405ebf951c3e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>mustbezero</name>
      <anchorfile>unionads1258details_1_1config0register.html</anchorfile>
      <anchor>a44d3d1f70f6597f88b73645939f04aa4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>ads1258details::config1register</name>
    <filename>unionads1258details_1_1config1register.html</filename>
    <member kind="function">
      <type>struct ads1258details::config1register::@17</type>
      <name>__attribute__</name>
      <anchorfile>unionads1258details_1_1config1register.html</anchorfile>
      <anchor>ae436568f13fe324589c856b012880d48</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>config1register</name>
      <anchorfile>unionads1258details_1_1config1register.html</anchorfile>
      <anchor>aa5f707757b14734266d3e7bde3934706</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>config1register</name>
      <anchorfile>unionads1258details_1_1config1register.html</anchorfile>
      <anchor>ac45fcd4fbfe40114d9f637cd9748bf68</anchor>
      <arglist>(uint8_t a, uint8_t b, uint8_t c, uint8_t d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>unionads1258details_1_1config1register.html</anchorfile>
      <anchor>aa57a163ca9b394e2c703ffd3c5f2c953</anchor>
      <arglist>(config1register &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>all</name>
      <anchorfile>unionads1258details_1_1config1register.html</anchorfile>
      <anchor>a73c1ebcb414c1c8f4a860ca2e1d69fe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>datarate</name>
      <anchorfile>unionads1258details_1_1config1register.html</anchorfile>
      <anchor>a05febd923e5025fb7c671e368dc37ebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>sensorbiascurrent</name>
      <anchorfile>unionads1258details_1_1config1register.html</anchorfile>
      <anchor>ac449ad004184fb6d7d4a1ed76da53557</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>delay</name>
      <anchorfile>unionads1258details_1_1config1register.html</anchorfile>
      <anchor>ab055d16f04c0a52c01dc1e5081f3ce5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>idlemode</name>
      <anchorfile>unionads1258details_1_1config1register.html</anchorfile>
      <anchor>ab3fd7c420d1059d9dd54f82f5581b64a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>lt244xdetails::configregister</name>
    <filename>unionlt244xdetails_1_1configregister.html</filename>
    <member kind="function">
      <type>struct lt244xdetails::configregister::@25</type>
      <name>__attribute__</name>
      <anchorfile>unionlt244xdetails_1_1configregister.html</anchorfile>
      <anchor>ab588d8b38dea6f36a537e27bd3546f0e</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>configregister</name>
      <anchorfile>unionlt244xdetails_1_1configregister.html</anchorfile>
      <anchor>a907f6e1185bcf1528f7ca0ac9a0a83d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>unionlt244xdetails_1_1configregister.html</anchorfile>
      <anchor>a67353c4c9b16cdd70ada4e916d7dd2a8</anchor>
      <arglist>(configregister &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const configregister &amp;</type>
      <name>operator=</name>
      <anchorfile>unionlt244xdetails_1_1configregister.html</anchorfile>
      <anchor>a83c5f8181656a755acfcfaf1caa9c59e</anchor>
      <arglist>(const channel rhs)</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>all</name>
      <anchorfile>unionlt244xdetails_1_1configregister.html</anchorfile>
      <anchor>a578dd87fb50e6b7ec89f4f4495ccaccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>bytes</name>
      <anchorfile>unionlt244xdetails_1_1configregister.html</anchorfile>
      <anchor>aee351373c9138b5f67bac26f2b31dc0f</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>reserved</name>
      <anchorfile>unionlt244xdetails_1_1configregister.html</anchorfile>
      <anchor>a705524d4d6fca1e12e6570ca0d46747e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DoubleSpeedAndOneCycleLatency</name>
      <anchorfile>unionlt244xdetails_1_1configregister.html</anchorfile>
      <anchor>ad21a5600cad13db29da088b5fde3caac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>DataRate</name>
      <anchorfile>unionlt244xdetails_1_1configregister.html</anchorfile>
      <anchor>a7eea00f8c02594ca99f93b9df24e2548</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ChannelBits123</name>
      <anchorfile>unionlt244xdetails_1_1configregister.html</anchorfile>
      <anchor>a6a2b3c84bbb4209118b3635ef3071b7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>ChanBit0orInvertDiffChan</name>
      <anchorfile>unionlt244xdetails_1_1configregister.html</anchorfile>
      <anchor>a306c7f47ea65d9ab4b369d7065d65c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>SingleEnded</name>
      <anchorfile>unionlt244xdetails_1_1configregister.html</anchorfile>
      <anchor>a44e87adc35c4e6c33b78ccfcf378552b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>Enable</name>
      <anchorfile>unionlt244xdetails_1_1configregister.html</anchorfile>
      <anchor>a4b891717979eefc911448253f55a76ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>AlwaysZero</name>
      <anchorfile>unionlt244xdetails_1_1configregister.html</anchorfile>
      <anchor>a212823ea247cbfd5c2dc125cc293de90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>AlwaysOne</name>
      <anchorfile>unionlt244xdetails_1_1configregister.html</anchorfile>
      <anchor>a41562de9280bb5fda287f14ca0392a0b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dac8830</name>
    <filename>structDac8830.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>pinout</base>
    <base>spi</base>
    <member kind="function">
      <type></type>
      <name>Dac8830</name>
      <anchorfile>structDac8830.html</anchorfile>
      <anchor>ae80ef77ed2a07ee2d273e94c24917e8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>__inline__ uint16_t</type>
      <name>Write</name>
      <anchorfile>structDac8830.html</anchorfile>
      <anchor>a336d4f11ecfe1eaf4d212339f13e59e0</anchor>
      <arglist>(uint16_t val)</arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>doublebe_t</name>
    <filename>uniondoublebe__t.html</filename>
    <member kind="function">
      <type>double</type>
      <name>le</name>
      <anchorfile>uniondoublebe__t.html</anchorfile>
      <anchor>a5c9369f633712b539ccb0966814ae054</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>all</name>
      <anchorfile>uniondoublebe__t.html</anchorfile>
      <anchor>a33545fb7d1e0b27530c4e4e3d1f1e381</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>one</name>
      <anchorfile>uniondoublebe__t.html</anchorfile>
      <anchor>a5d83344fd79d27bf88b553926cb15e84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>two</name>
      <anchorfile>uniondoublebe__t.html</anchorfile>
      <anchor>ab6c799d63c8e371b833fac0bb3669a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>three</name>
      <anchorfile>uniondoublebe__t.html</anchorfile>
      <anchor>a5f19d536ca07c82d7ca2cc25ac146311</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>four</name>
      <anchorfile>uniondoublebe__t.html</anchorfile>
      <anchor>ab1656b0c626590ffefdbb49d713e19d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>five</name>
      <anchorfile>uniondoublebe__t.html</anchorfile>
      <anchor>ada4e19709241a746fa916cefa6f4196e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>six</name>
      <anchorfile>uniondoublebe__t.html</anchorfile>
      <anchor>aad4505536afc7519c8652ad426be2f61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>seven</name>
      <anchorfile>uniondoublebe__t.html</anchorfile>
      <anchor>acebc052566b392f9abb0792681d00564</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>eight</name>
      <anchorfile>uniondoublebe__t.html</anchorfile>
      <anchor>aaecd044851c4438b230a18e94d195cc2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EzThread</name>
    <filename>classEzThread.html</filename>
    <member kind="function">
      <type></type>
      <name>EzThread</name>
      <anchorfile>classEzThread.html</anchorfile>
      <anchor>a2a421e20345cb23f554b98d6eea7e871</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EzThread</name>
      <anchorfile>classEzThread.html</anchorfile>
      <anchor>a97129140f31f9e68c296b05c899234a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ThreadInit</name>
      <anchorfile>classEzThread.html</anchorfile>
      <anchor>a98e103fd62d03d2f56d2481b304788d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Process</name>
      <anchorfile>classEzThread.html</anchorfile>
      <anchor>aa5d45d914e7cfc1e8884957e7ac72004</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>OneSecondRoutines</name>
      <anchorfile>classEzThread.html</anchorfile>
      <anchor>abbe6ba70ce9bb49d7f9243e96e0bf10a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>TenHzRoutines</name>
      <anchorfile>classEzThread.html</anchorfile>
      <anchor>a117d31c38dbf21a4c5913de1cfba7ed3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Init</name>
      <anchorfile>classEzThread.html</anchorfile>
      <anchor>a451a20831aa46eb258b208e545f42a49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>EzThreadFunc</name>
      <anchorfile>classEzThread.html</anchorfile>
      <anchor>aff75d690b70c55aaef58871f92b2b927</anchor>
      <arglist>(void *pthis)</arglist>
    </member>
    <member kind="variable">
      <type>pthread_t</type>
      <name>Thread</name>
      <anchorfile>classEzThread.html</anchorfile>
      <anchor>a71342e25922574e8f034e808322d4267</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>BoredDelayuS</name>
      <anchorfile>classEzThread.html</anchorfile>
      <anchor>afdf5af15c8dcecb953e9760a62b56a1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>MinimumDelayuS</name>
      <anchorfile>classEzThread.html</anchorfile>
      <anchor>a84787608787c46d3368beae90d0bde8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>ThreadName</name>
      <anchorfile>classEzThread.html</anchorfile>
      <anchor>a7b8424fbfd96093e3fa01b5536e8ec99</anchor>
      <arglist>[256]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fixedlist</name>
    <filename>classfixedlist.html</filename>
    <templarg></templarg>
    <templarg>list_size</templarg>
    <member kind="function">
      <type></type>
      <name>fixedlist</name>
      <anchorfile>classfixedlist.html</anchorfile>
      <anchor>a1b3e861763a56956b148dcc6fb021654</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixedlist</name>
      <anchorfile>classfixedlist.html</anchorfile>
      <anchor>a3028e72af07eafa2b778e0e41b6f1056</anchor>
      <arglist>(const size_t len, const T t[])</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>Size</name>
      <anchorfile>classfixedlist.html</anchorfile>
      <anchor>a11b6eb4db59be0430343de2bda4be57e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>Data</name>
      <anchorfile>classfixedlist.html</anchorfile>
      <anchor>af90526cd271def3e94a3cfe295cf7dac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classfixedlist.html</anchorfile>
      <anchor>a6ae59ebf6ba03298e891bb96b6b90565</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>Len</name>
      <anchorfile>classfixedlist.html</anchorfile>
      <anchor>acfc26116f13376049cfa5a89121924c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Used</name>
      <anchorfile>classfixedlist.html</anchorfile>
      <anchor>ae5604ea14a13df4591132de0bd41bdf8</anchor>
      <arglist>(const size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Get</name>
      <anchorfile>classfixedlist.html</anchorfile>
      <anchor>a60fb5ec0e14271132ca51d583cc37839</anchor>
      <arglist>(size_t i, T &amp;element) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classfixedlist.html</anchorfile>
      <anchor>acb767ee78dee0a3b51a2f570af86a25f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Add</name>
      <anchorfile>classfixedlist.html</anchorfile>
      <anchor>a92c2a4d691f071858aaaa58d94642bf2</anchor>
      <arglist>(T const &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>T const  &amp;</type>
      <name>operator+=</name>
      <anchorfile>classfixedlist.html</anchorfile>
      <anchor>af243c44473c604366be4dc61ec416bbc</anchor>
      <arglist>(T const &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AddUnique</name>
      <anchorfile>classfixedlist.html</anchorfile>
      <anchor>af09b6cbf74933b8c9dd82d683406ae44</anchor>
      <arglist>(T const &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>UpdateUnique</name>
      <anchorfile>classfixedlist.html</anchorfile>
      <anchor>aeeaa7bf22213db4b3dd7cdbf1d54c085</anchor>
      <arglist>(T const &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Delete</name>
      <anchorfile>classfixedlist.html</anchorfile>
      <anchor>ad91479e702718b1a11b3ebaf672ab554</anchor>
      <arglist>(T const &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Delete</name>
      <anchorfile>classfixedlist.html</anchorfile>
      <anchor>a9bf4e4827ca02090ae283ed6be810da6</anchor>
      <arglist>(const size_t index)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>Find</name>
      <anchorfile>classfixedlist.html</anchorfile>
      <anchor>af9cfa52f83179c3a89e1b1a223ce58f0</anchor>
      <arglist>(T const &amp;element) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Replace</name>
      <anchorfile>classfixedlist.html</anchorfile>
      <anchor>a85e127e47cf5f4cc37644ee8ab58ad19</anchor>
      <arglist>(size_t i, const T &amp;element)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>T data[list_size]</type>
      <name>__attribute__</name>
      <anchorfile>classfixedlist.html</anchorfile>
      <anchor>a5372298bec92383e9dcfe1635e4c7e89</anchor>
      <arglist>((aligned(4)))</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>slot_used</name>
      <anchorfile>classfixedlist.html</anchorfile>
      <anchor>a37f8fc8a9c8cd655c5cd58c51c2ad2a8</anchor>
      <arglist>[list_size]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fixedlistlite</name>
    <filename>classfixedlistlite.html</filename>
    <templarg></templarg>
    <templarg>list_size</templarg>
    <member kind="function">
      <type></type>
      <name>fixedlistlite</name>
      <anchorfile>classfixedlistlite.html</anchorfile>
      <anchor>a40c90d178ab42eb961757688fd6f1abc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>Max</name>
      <anchorfile>classfixedlistlite.html</anchorfile>
      <anchor>a95a8987a8e433706ac3056a9906a25ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>Data</name>
      <anchorfile>classfixedlistlite.html</anchorfile>
      <anchor>acb3643fc0bd62c3057b87762cf6b1840</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classfixedlistlite.html</anchorfile>
      <anchor>a1acaeacd1b22a6fb8b76577eeb3ad09f</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>Len</name>
      <anchorfile>classfixedlistlite.html</anchorfile>
      <anchor>a27f7606347d7fefa85636020c324150a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Clear</name>
      <anchorfile>classfixedlistlite.html</anchorfile>
      <anchor>a557e318792a9142b2104a3cdc70f904e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Get</name>
      <anchorfile>classfixedlistlite.html</anchorfile>
      <anchor>a90da1b804ef8062e68b1f0dc071c26e8</anchor>
      <arglist>(size_t i, T &amp;element) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Add</name>
      <anchorfile>classfixedlistlite.html</anchorfile>
      <anchor>a79edae3f76bd7f8da12374b202b326e5</anchor>
      <arglist>(T const &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>T const  &amp;</type>
      <name>operator+=</name>
      <anchorfile>classfixedlistlite.html</anchorfile>
      <anchor>a2ad1fd309ae6266ef2ae42e285633b5a</anchor>
      <arglist>(T const &amp;element)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>T data[list_size]</type>
      <name>__attribute__</name>
      <anchorfile>classfixedlistlite.html</anchorfile>
      <anchor>aa30f3d0d85112050eb2bbe9e17ba0880</anchor>
      <arglist>((aligned(4)))</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>len</name>
      <anchorfile>classfixedlistlite.html</anchorfile>
      <anchor>a5ab785cb084e12a462fef2e911449048</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fixedqueue</name>
    <filename>classfixedqueue.html</filename>
    <templarg></templarg>
    <templarg>queue_size</templarg>
    <member kind="function">
      <type></type>
      <name>fixedqueue</name>
      <anchorfile>classfixedqueue.html</anchorfile>
      <anchor>a50caa93fc74fa468b7b56505456eba24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classfixedqueue.html</anchorfile>
      <anchor>af92d3024d1aa78114016d6d5212a4710</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>full</name>
      <anchorfile>classfixedqueue.html</anchorfile>
      <anchor>ab6ffd147f92a4cfadc213832f0097dc7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>max</name>
      <anchorfile>classfixedqueue.html</anchorfile>
      <anchor>adbd7dc766d1cd8edfd90376b4acd5232</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>len</name>
      <anchorfile>classfixedqueue.html</anchorfile>
      <anchor>a07805afdaa5b68023e41ed5fc4565dc0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classfixedqueue.html</anchorfile>
      <anchor>aa0aabdd5374dbb43884b0ce53e26085f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T const  &amp;</type>
      <name>front</name>
      <anchorfile>classfixedqueue.html</anchorfile>
      <anchor>aae8e812a1aab7920767845dd24bf4cee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T const  &amp;</type>
      <name>back</name>
      <anchorfile>classfixedqueue.html</anchorfile>
      <anchor>aa82756c75f68e0f3b00e01fff64eb9bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pop</name>
      <anchorfile>classfixedqueue.html</anchorfile>
      <anchor>a0500e66e1431b1dcb21c657aeba297f9</anchor>
      <arglist>(T &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>push</name>
      <anchorfile>classfixedqueue.html</anchorfile>
      <anchor>a4f560d3c02127b43642b3f02c7b0fc9e</anchor>
      <arglist>(T const &amp;element)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>T data[queue_size]</type>
      <name>__attribute__</name>
      <anchorfile>classfixedqueue.html</anchorfile>
      <anchor>a626202994c06be779f246323b0dbad6a</anchor>
      <arglist>((aligned(4)))</arglist>
    </member>
    <member kind="function" protection="private">
      <type>size_t</type>
      <name>next</name>
      <anchorfile>classfixedqueue.html</anchorfile>
      <anchor>a64042a8f46824d1d8e48027ebdf20c73</anchor>
      <arglist>(const size_t in) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t volatile</type>
      <name>begin</name>
      <anchorfile>classfixedqueue.html</anchorfile>
      <anchor>ae9f31b5ffa2382d78488482369a596f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t volatile</type>
      <name>end</name>
      <anchorfile>classfixedqueue.html</anchorfile>
      <anchor>ab9f4d53f754a1c9157965729ae00643b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fixedqueue&lt; char, txbufferlenbytes &gt;</name>
    <filename>classfixedqueue.html</filename>
    <member kind="function">
      <type></type>
      <name>fixedqueue</name>
      <anchorfile>classfixedqueue.html</anchorfile>
      <anchor>a50caa93fc74fa468b7b56505456eba24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classfixedqueue.html</anchorfile>
      <anchor>af92d3024d1aa78114016d6d5212a4710</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>full</name>
      <anchorfile>classfixedqueue.html</anchorfile>
      <anchor>ab6ffd147f92a4cfadc213832f0097dc7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>max</name>
      <anchorfile>classfixedqueue.html</anchorfile>
      <anchor>adbd7dc766d1cd8edfd90376b4acd5232</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>len</name>
      <anchorfile>classfixedqueue.html</anchorfile>
      <anchor>a07805afdaa5b68023e41ed5fc4565dc0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classfixedqueue.html</anchorfile>
      <anchor>aa0aabdd5374dbb43884b0ce53e26085f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char const &amp;</type>
      <name>front</name>
      <anchorfile>classfixedqueue.html</anchorfile>
      <anchor>aae8e812a1aab7920767845dd24bf4cee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char const &amp;</type>
      <name>back</name>
      <anchorfile>classfixedqueue.html</anchorfile>
      <anchor>aa82756c75f68e0f3b00e01fff64eb9bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pop</name>
      <anchorfile>classfixedqueue.html</anchorfile>
      <anchor>a0500e66e1431b1dcb21c657aeba297f9</anchor>
      <arglist>(char &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>push</name>
      <anchorfile>classfixedqueue.html</anchorfile>
      <anchor>a4f560d3c02127b43642b3f02c7b0fc9e</anchor>
      <arglist>(char const &amp;element)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char data[queue_size]</type>
      <name>__attribute__</name>
      <anchorfile>classfixedqueue.html</anchorfile>
      <anchor>a626202994c06be779f246323b0dbad6a</anchor>
      <arglist>((aligned(4)))</arglist>
    </member>
    <member kind="function" protection="private">
      <type>size_t</type>
      <name>next</name>
      <anchorfile>classfixedqueue.html</anchorfile>
      <anchor>a64042a8f46824d1d8e48027ebdf20c73</anchor>
      <arglist>(const size_t in) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t volatile</type>
      <name>begin</name>
      <anchorfile>classfixedqueue.html</anchorfile>
      <anchor>ae9f31b5ffa2382d78488482369a596f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t volatile</type>
      <name>end</name>
      <anchorfile>classfixedqueue.html</anchorfile>
      <anchor>ab9f4d53f754a1c9157965729ae00643b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fixedqueue_mt</name>
    <filename>classfixedqueue__mt.html</filename>
    <templarg></templarg>
    <templarg>queue_size</templarg>
    <member kind="function">
      <type></type>
      <name>fixedqueue_mt</name>
      <anchorfile>classfixedqueue__mt.html</anchorfile>
      <anchor>a86ce6ca35354904981ef2ce2e251acb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>max</name>
      <anchorfile>classfixedqueue__mt.html</anchorfile>
      <anchor>af5c5060e88b5c53d4de0dc21756600e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classfixedqueue__mt.html</anchorfile>
      <anchor>ae2a61b85a92273231e344838d28aed0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wasEmpty</name>
      <anchorfile>classfixedqueue__mt.html</anchorfile>
      <anchor>a284b17ede06c38bace3edff93ce81c70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>full</name>
      <anchorfile>classfixedqueue__mt.html</anchorfile>
      <anchor>a7dfa62b27b04398e2848ccd213c2441c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wasFull</name>
      <anchorfile>classfixedqueue__mt.html</anchorfile>
      <anchor>a68121062b7eddbd4a3548f9c5253bd10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>len</name>
      <anchorfile>classfixedqueue__mt.html</anchorfile>
      <anchor>aa4d41426bc4e96d849c6e5899781200d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>depth</name>
      <anchorfile>classfixedqueue__mt.html</anchorfile>
      <anchor>aac609abd7061a1e8094632523b8e95c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classfixedqueue__mt.html</anchorfile>
      <anchor>a3a7ea2c7e35e7cf1c6ad4ca6619dafd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classfixedqueue__mt.html</anchorfile>
      <anchor>a4b6091e2a0bf4e93b2b7a2809aa62f51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pop</name>
      <anchorfile>classfixedqueue__mt.html</anchorfile>
      <anchor>a18420667cc67df49aa9cde0ea24683ba</anchor>
      <arglist>(T &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>push</name>
      <anchorfile>classfixedqueue__mt.html</anchorfile>
      <anchor>acd18ebc6e06b912568db12321e92a4c9</anchor>
      <arglist>(T const &amp;element)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>T data[queue_size]</type>
      <name>__attribute__</name>
      <anchorfile>classfixedqueue__mt.html</anchorfile>
      <anchor>a55a630c4d6f9d87e9d0b8c5c6a0ae8a8</anchor>
      <arglist>((aligned(4)))</arglist>
    </member>
    <member kind="function" protection="private">
      <type>size_t</type>
      <name>next</name>
      <anchorfile>classfixedqueue__mt.html</anchorfile>
      <anchor>ac5cb0083748ff8cd73d0c3506a776a5a</anchor>
      <arglist>(const size_t in) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::atomic&lt; size_t &gt;</type>
      <name>begin</name>
      <anchorfile>classfixedqueue__mt.html</anchorfile>
      <anchor>a8a4c867071b07569b4f1cfaf7bdc0dbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::atomic&lt; size_t &gt;</type>
      <name>end</name>
      <anchorfile>classfixedqueue__mt.html</anchorfile>
      <anchor>ac074be48fde8af7a1c94b8131924d2f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>floatbe_t</name>
    <filename>unionfloatbe__t.html</filename>
    <member kind="function">
      <type>float</type>
      <name>le</name>
      <anchorfile>unionfloatbe__t.html</anchorfile>
      <anchor>a82ecf8830445450873aa2c1545708ff4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>all</name>
      <anchorfile>unionfloatbe__t.html</anchorfile>
      <anchor>a53ecf49505dad43fb3f688a400b1c5cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>one</name>
      <anchorfile>unionfloatbe__t.html</anchorfile>
      <anchor>a2239a22a194086e0b1cd6e6e16acdb8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>two</name>
      <anchorfile>unionfloatbe__t.html</anchorfile>
      <anchor>a0ee51580c5e3b6f3b76d8da33443702a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>three</name>
      <anchorfile>unionfloatbe__t.html</anchorfile>
      <anchor>a6bfa10db4c20704d6ed4a3a99698d23b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>four</name>
      <anchorfile>unionfloatbe__t.html</anchorfile>
      <anchor>aa5b10621e1e266b184531282740afd7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct floatbe_t::@0</type>
      <name>__attribute__</name>
      <anchorfile>unionfloatbe__t.html</anchorfile>
      <anchor>a84b11374ebe974bc167c9161e79f830b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IPacket</name>
    <filename>classIPacket.html</filename>
    <member kind="function">
      <type></type>
      <name>IPacket</name>
      <anchorfile>classIPacket.html</anchorfile>
      <anchor>a970e033333775279b4a962551be32708</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPacket</name>
      <anchorfile>classIPacket.html</anchorfile>
      <anchor>a3dc7833a83c26d50ef75f43f60f17f20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>FindPacketStart</name>
      <anchorfile>classIPacket.html</anchorfile>
      <anchor>a7383b868685cdf5b0047cb6044843081</anchor>
      <arglist>(const uint8_t *Buffer, const size_t BufferLen, size_t &amp;Offset) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>FindPacketEnd</name>
      <anchorfile>classIPacket.html</anchorfile>
      <anchor>ad74d2ec78aa50d795327cfe9935ea45f</anchor>
      <arglist>(const uint8_t *Buffer, const size_t BufferLen, size_t &amp;Offset) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>HeaderLen</name>
      <anchorfile>classIPacket.html</anchorfile>
      <anchor>a2f0acb1e8c31c1449ac6c32dcf1f4757</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>FooterLen</name>
      <anchorfile>classIPacket.html</anchorfile>
      <anchor>a3eda6e6dc43f5356d4eae88692e9787b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>PayloadOffset</name>
      <anchorfile>classIPacket.html</anchorfile>
      <anchor>a5c900c086d4bc48d3940c4ef82fd000c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>MaxPayloadLength</name>
      <anchorfile>classIPacket.html</anchorfile>
      <anchor>a377f161e1c076def5da17e4a6a8189ad</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>PayloadLen</name>
      <anchorfile>classIPacket.html</anchorfile>
      <anchor>ae1f269523fdd7b923e6600c46d93a94f</anchor>
      <arglist>(const uint8_t *Buffer, const size_t BufferCount, const size_t PacketStartPos) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>IsValid</name>
      <anchorfile>classIPacket.html</anchorfile>
      <anchor>ae508735aa416afc0e8cb2a10f96006e8</anchor>
      <arglist>(const uint8_t *Buffer, const size_t BufferCount, const size_t PacketStartPos, const size_t PacketEndPos) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>IsBroadcastSerialNum</name>
      <anchorfile>classIPacket.html</anchorfile>
      <anchor>aac324d1be13b345811c62808e3046a0b</anchor>
      <arglist>(const uint8_t *Buffer, const size_t PacketStartPos, const size_t PacketEndPos) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint64_t</type>
      <name>SerialNum</name>
      <anchorfile>classIPacket.html</anchorfile>
      <anchor>a54069372377ca86ac8ae677ae2c1544b</anchor>
      <arglist>(const uint8_t *Buffer, const size_t PacketStartPos, const size_t PacketEndPos) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint64_t</type>
      <name>PayloadType</name>
      <anchorfile>classIPacket.html</anchorfile>
      <anchor>ace74729172ff26454c90e09d5e48784e</anchor>
      <arglist>(const uint8_t *Buffer, const size_t PacketStartPos, const size_t PacketEndPos) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>DoesPayloadTypeMatch</name>
      <anchorfile>classIPacket.html</anchorfile>
      <anchor>a6db60bf5beb402e644ccc323e0fb4b03</anchor>
      <arglist>(const uint8_t *Buffer, const size_t BufferCount, const size_t PacketStartPos, const size_t PacketEndPos, const uint32_t CmdType) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>MakePacket</name>
      <anchorfile>classIPacket.html</anchorfile>
      <anchor>aa50e563805822827057ebb7f7e99e6c2</anchor>
      <arglist>(uint8_t *Buffer, const size_t BufferCount, const void *Payload, const uint16_t PayloadType, const size_t PayloadLen) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IProtocol</name>
    <filename>classIProtocol.html</filename>
    <member kind="function">
      <type></type>
      <name>IProtocol</name>
      <anchorfile>classIProtocol.html</anchorfile>
      <anchor>a5d0bea0ab92929e492b7bf5a250346ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IProtocol</name>
      <anchorfile>classIProtocol.html</anchorfile>
      <anchor>a9933b9c2b3efe1714c07e1eabc9aba8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>dataready</name>
      <anchorfile>classIProtocol.html</anchorfile>
      <anchor>a909792e73ece031068c21ae2717ec0ce</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char</type>
      <name>getcqq</name>
      <anchorfile>classIProtocol.html</anchorfile>
      <anchor>a12e24aa54465129c80731f3b7313d439</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char</type>
      <name>putcqq</name>
      <anchorfile>classIProtocol.html</anchorfile>
      <anchor>af5f1c4d3488ef763685386315bc3198b</anchor>
      <arglist>(char c)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flushoutput</name>
      <anchorfile>classIProtocol.html</anchorfile>
      <anchor>ab6631793988deb9eea63904121f7abec</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>purgeinput</name>
      <anchorfile>classIProtocol.html</anchorfile>
      <anchor>a757ef038d039ada4aaab6147599f298a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isopen</name>
      <anchorfile>classIProtocol.html</anchorfile>
      <anchor>a2c9562fb349ba72efe49e4000de4e7b9</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IUart</name>
    <filename>classIUart.html</filename>
    <member kind="function">
      <type></type>
      <name>IUart</name>
      <anchorfile>classIUart.html</anchorfile>
      <anchor>ae460209f21ef210649583cedb2e63049</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IUart</name>
      <anchorfile>classIUart.html</anchorfile>
      <anchor>a91a3bc93823d8abedb3796e256ae9a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>dataready</name>
      <anchorfile>classIUart.html</anchorfile>
      <anchor>a639d6c3b3a8d73c2133c0fa24b53726c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char</type>
      <name>getcqq</name>
      <anchorfile>classIUart.html</anchorfile>
      <anchor>aef9c35f7c2ded43d57f2d532bb97da84</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char</type>
      <name>putcqq</name>
      <anchorfile>classIUart.html</anchorfile>
      <anchor>a1c1fcaf4781bb826f1130e02e26db652</anchor>
      <arglist>(char c)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flushoutput</name>
      <anchorfile>classIUart.html</anchorfile>
      <anchor>a1775ba7eac15a10e21cb0c8102e5ca30</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>purgeinput</name>
      <anchorfile>classIUart.html</anchorfile>
      <anchor>a995f4af4eca6913eaebe4313c5add900</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isopen</name>
      <anchorfile>classIUart.html</anchorfile>
      <anchor>a96ed701e6b9592230b9f02e93acc807f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>puts</name>
      <anchorfile>classIUart.html</anchorfile>
      <anchor>a612c973b802bec7cebb5bd8017c891da</anchor>
      <arglist>(const char *s, const size_t len)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>OddParity</name>
      <anchorfile>classIUart.html</anchorfile>
      <anchor>ac8928b803f6751af4168a5deec359a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>NoParity</name>
      <anchorfile>classIUart.html</anchorfile>
      <anchor>a9405c72ad2eb119d094adf84745a0354</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>IUartOK</name>
      <anchorfile>classIUart.html</anchorfile>
      <anchor>a9b07f9f0939ad012fe6cf88945419f6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>UseRTSCTS</name>
      <anchorfile>classIUart.html</anchorfile>
      <anchor>a3d1b8f89f2299a0adf846cc472d35998</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>NoRTSCTS</name>
      <anchorfile>classIUart.html</anchorfile>
      <anchor>a5596bc1c37a997ad63f6fd7273f0f582</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IUartParser</name>
    <filename>classIUartParser.html</filename>
    <member kind="function">
      <type></type>
      <name>IUartParser</name>
      <anchorfile>classIUartParser.html</anchorfile>
      <anchor>a5620e39fc720000488957c8383833b28</anchor>
      <arglist>(struct IUart &amp;pinout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IUartParser</name>
      <anchorfile>classIUartParser.html</anchorfile>
      <anchor>ac824e886b2b4b9aaf9e45563d4409db6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>Process</name>
      <anchorfile>classIUartParser.html</anchorfile>
      <anchor>a2e0ae0f8381237a9f972e1c7077f35cb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>puts</name>
      <anchorfile>classIUartParser.html</anchorfile>
      <anchor>aaa57600a9365c96340e2a63e3bad5c04</anchor>
      <arglist>(const char *s, const size_t len)</arglist>
    </member>
    <member kind="variable">
      <type>IUart &amp;</type>
      <name>Pinout</name>
      <anchorfile>classIUartParser.html</anchorfile>
      <anchor>a1d60a8a100e2526852413bcfeaa9b457</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>linux_pinout_circular_buffer</name>
    <filename>classlinux__pinout__circular__buffer.html</filename>
    <templarg></templarg>
    <templarg>BufferLen</templarg>
    <base>IUart</base>
    <base>IUart</base>
    <member kind="function">
      <type></type>
      <name>linux_pinout_circular_buffer</name>
      <anchorfile>classlinux__pinout__circular__buffer.html</anchorfile>
      <anchor>ae889931a76846a70ed152204d6b4c4b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~linux_pinout_circular_buffer</name>
      <anchorfile>classlinux__pinout__circular__buffer.html</anchorfile>
      <anchor>aa7d37fba7b331f0ff25323f91ec5a7a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchorfile>classlinux__pinout__circular__buffer.html</anchorfile>
      <anchor>aa762e0802e6ad7c297f111740aa45ffd</anchor>
      <arglist>(const uint32_t nc, const char *nc2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deinit</name>
      <anchorfile>classlinux__pinout__circular__buffer.html</anchorfile>
      <anchor>aa6669b7e9673bb80fa77d01570acef3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dataready</name>
      <anchorfile>classlinux__pinout__circular__buffer.html</anchorfile>
      <anchor>aaf4dce52c658710c6b9761501adfdcfd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getcqq</name>
      <anchorfile>classlinux__pinout__circular__buffer.html</anchorfile>
      <anchor>aa5c18a17ec46bf2aa15cbaff70a9a808</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>putcqq</name>
      <anchorfile>classlinux__pinout__circular__buffer.html</anchorfile>
      <anchor>a36e638e35517e3ade76c9f699884e0e5</anchor>
      <arglist>(char b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>depth</name>
      <anchorfile>classlinux__pinout__circular__buffer.html</anchorfile>
      <anchor>a751da59f69d329dafdf8486028b3c31d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flushoutput</name>
      <anchorfile>classlinux__pinout__circular__buffer.html</anchorfile>
      <anchor>ae97aeeca453eae4adbf6ca5fb73f211f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>purgeinput</name>
      <anchorfile>classlinux__pinout__circular__buffer.html</anchorfile>
      <anchor>a3a8a523b278768dea05afcc41a71f571</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>connected</name>
      <anchorfile>classlinux__pinout__circular__buffer.html</anchorfile>
      <anchor>a07b745014aad3390d19fe0d6e0a603e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isopen</name>
      <anchorfile>classlinux__pinout__circular__buffer.html</anchorfile>
      <anchor>a6864de118f932e2ef26e577485a4c947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>silent</name>
      <anchorfile>classlinux__pinout__circular__buffer.html</anchorfile>
      <anchor>a047b9c242f2377e0f3c59b89c7d9bda0</anchor>
      <arglist>(const bool s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dataready</name>
      <anchorfile>classlinux__pinout__circular__buffer.html</anchorfile>
      <anchor>aaf4dce52c658710c6b9761501adfdcfd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getcqq</name>
      <anchorfile>classlinux__pinout__circular__buffer.html</anchorfile>
      <anchor>aa5c18a17ec46bf2aa15cbaff70a9a808</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>putcqq</name>
      <anchorfile>classlinux__pinout__circular__buffer.html</anchorfile>
      <anchor>a36e638e35517e3ade76c9f699884e0e5</anchor>
      <arglist>(char b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>depth</name>
      <anchorfile>classlinux__pinout__circular__buffer.html</anchorfile>
      <anchor>a751da59f69d329dafdf8486028b3c31d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>connected</name>
      <anchorfile>classlinux__pinout__circular__buffer.html</anchorfile>
      <anchor>a07b745014aad3390d19fe0d6e0a603e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isopen</name>
      <anchorfile>classlinux__pinout__circular__buffer.html</anchorfile>
      <anchor>a6864de118f932e2ef26e577485a4c947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>silent</name>
      <anchorfile>classlinux__pinout__circular__buffer.html</anchorfile>
      <anchor>a047b9c242f2377e0f3c59b89c7d9bda0</anchor>
      <arglist>(const bool s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>linux_pinout_circular_buffer</name>
      <anchorfile>classlinux__pinout__circular__buffer.html</anchorfile>
      <anchor>ae889931a76846a70ed152204d6b4c4b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~linux_pinout_circular_buffer</name>
      <anchorfile>classlinux__pinout__circular__buffer.html</anchorfile>
      <anchor>aa7d37fba7b331f0ff25323f91ec5a7a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchorfile>classlinux__pinout__circular__buffer.html</anchorfile>
      <anchor>aa762e0802e6ad7c297f111740aa45ffd</anchor>
      <arglist>(const uint32_t nc, const char *nc2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deinit</name>
      <anchorfile>classlinux__pinout__circular__buffer.html</anchorfile>
      <anchor>aa6669b7e9673bb80fa77d01570acef3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CircularFifo&lt; BufferT, BufferLen &gt;</type>
      <name>Buffer</name>
      <anchorfile>classlinux__pinout__circular__buffer.html</anchorfile>
      <anchor>a5cf8066e24e9677de124ca7b2429aa05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Silent</name>
      <anchorfile>classlinux__pinout__circular__buffer.html</anchorfile>
      <anchor>a116de65bc8560e6af19d8729dab4584c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CircularFifo&lt; uint8_t, 32768 &gt;</type>
      <name>Buffer</name>
      <anchorfile>classlinux__pinout__circular__buffer.html</anchorfile>
      <anchor>a28535fab435365235440b1935a69f8a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>linux_pinout_circular_uart</name>
    <filename>classlinux__pinout__circular__uart.html</filename>
    <templarg></templarg>
    <templarg>RxBufferLen</templarg>
    <templarg>TxBufferLen</templarg>
    <base>IUart</base>
    <member kind="function">
      <type></type>
      <name>linux_pinout_circular_uart</name>
      <anchorfile>classlinux__pinout__circular__uart.html</anchorfile>
      <anchor>ab4fdc3de404f3cf15c0933a32c285009</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~linux_pinout_circular_uart</name>
      <anchorfile>classlinux__pinout__circular__uart.html</anchorfile>
      <anchor>ae713acff14448a898023b75fa0f17d96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchorfile>classlinux__pinout__circular__uart.html</anchorfile>
      <anchor>abcfd585eaa7df44b1bb60c3696053ea9</anchor>
      <arglist>(const uint32_t nc, const char *nc2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deinit</name>
      <anchorfile>classlinux__pinout__circular__uart.html</anchorfile>
      <anchor>a094a52a96caf72aac1cf5f8dd9a0c989</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dataready</name>
      <anchorfile>classlinux__pinout__circular__uart.html</anchorfile>
      <anchor>a8469ef6491d325b1c75c508fa380911d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getcqq</name>
      <anchorfile>classlinux__pinout__circular__uart.html</anchorfile>
      <anchor>a372522903ba50fe4083dc627a462b2d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>putcqq</name>
      <anchorfile>classlinux__pinout__circular__uart.html</anchorfile>
      <anchor>a41b97ab0fe1151c1170d0a6e9b8b3e67</anchor>
      <arglist>(char b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remotedataready</name>
      <anchorfile>classlinux__pinout__circular__uart.html</anchorfile>
      <anchor>a6d99357e95f75192cc7160d0fd331644</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>remotegetcqq</name>
      <anchorfile>classlinux__pinout__circular__uart.html</anchorfile>
      <anchor>a6da3e20fd66b4d33b75854b955fb9e1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>remoteputcqq</name>
      <anchorfile>classlinux__pinout__circular__uart.html</anchorfile>
      <anchor>acc1892459c6bd836114b89cc7bea2922</anchor>
      <arglist>(char b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>depth</name>
      <anchorfile>classlinux__pinout__circular__uart.html</anchorfile>
      <anchor>a9356364420883a494e660244c0806e95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>remotedepth</name>
      <anchorfile>classlinux__pinout__circular__uart.html</anchorfile>
      <anchor>aa4293dcb98bae1050227af0c1e13d158</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flushoutput</name>
      <anchorfile>classlinux__pinout__circular__uart.html</anchorfile>
      <anchor>ae677a5e3742e61a63d2233e638b3a933</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>purgeinput</name>
      <anchorfile>classlinux__pinout__circular__uart.html</anchorfile>
      <anchor>aef8de12996a504a06fb9f2296dd8741d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>connected</name>
      <anchorfile>classlinux__pinout__circular__uart.html</anchorfile>
      <anchor>a85274410b6d80327b11161285c605cc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isopen</name>
      <anchorfile>classlinux__pinout__circular__uart.html</anchorfile>
      <anchor>abd4771d4e327da40d44e463007d8f8a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>silent</name>
      <anchorfile>classlinux__pinout__circular__uart.html</anchorfile>
      <anchor>afe2b56e0c8c9b996427f1f33d7ad760f</anchor>
      <arglist>(const bool s)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CircularFifo&lt; BufferT, RxBufferLen &gt;</type>
      <name>RxBuffer</name>
      <anchorfile>classlinux__pinout__circular__uart.html</anchorfile>
      <anchor>a9bcdcdc2b1287b9a93a6d0dd7c25f8bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CircularFifo&lt; BufferT, TxBufferLen &gt;</type>
      <name>TxBuffer</name>
      <anchorfile>classlinux__pinout__circular__uart.html</anchorfile>
      <anchor>ab9eade6547507f445e7944b8b576b216</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Silent</name>
      <anchorfile>classlinux__pinout__circular__uart.html</anchorfile>
      <anchor>a5523a34560aa9809eb6d8667ea74adb4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>linux_pinout_client_socket</name>
    <filename>classlinux__pinout__client__socket.html</filename>
    <base>IUart</base>
    <member kind="function">
      <type></type>
      <name>linux_pinout_client_socket</name>
      <anchorfile>classlinux__pinout__client__socket.html</anchorfile>
      <anchor>a51983a5bff29d3f44831a959b3ddb69b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~linux_pinout_client_socket</name>
      <anchorfile>classlinux__pinout__client__socket.html</anchorfile>
      <anchor>a32dd179f1473dfe02809ccb6310da4a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchorfile>classlinux__pinout__client__socket.html</anchorfile>
      <anchor>a042f58310d3022a81561e90cf1b36607</anchor>
      <arglist>(const int HostPort, const char *HostName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deinit</name>
      <anchorfile>classlinux__pinout__client__socket.html</anchorfile>
      <anchor>a715b661f0dfcc3fe910e8bf9db4e6707</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dataready</name>
      <anchorfile>classlinux__pinout__client__socket.html</anchorfile>
      <anchor>a137964e84717104d418071aab4385d09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getcqq</name>
      <anchorfile>classlinux__pinout__client__socket.html</anchorfile>
      <anchor>a6265f59bda5bd51d63c4908b41d7f551</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>putcqq</name>
      <anchorfile>classlinux__pinout__client__socket.html</anchorfile>
      <anchor>aeb285bcd02cb2b2038988297b8bdffba</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flushoutput</name>
      <anchorfile>classlinux__pinout__client__socket.html</anchorfile>
      <anchor>af0a3680d484ee03db8c491e9f16d75af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>purgeinput</name>
      <anchorfile>classlinux__pinout__client__socket.html</anchorfile>
      <anchor>a3d48a78465091157d395e2754b540fe0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>connected</name>
      <anchorfile>classlinux__pinout__client__socket.html</anchorfile>
      <anchor>ad86e49afacb8b99830f5f825798c9a02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isopen</name>
      <anchorfile>classlinux__pinout__client__socket.html</anchorfile>
      <anchor>a4474d912fe4f1c9551df6e43fc50e0d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>hSocket</name>
      <anchorfile>classlinux__pinout__client__socket.html</anchorfile>
      <anchor>a6fc86423a9b427b5cc73bdfdf4f5a0a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>linux_pinout_file</name>
    <filename>classlinux__pinout__file.html</filename>
    <base>IUart</base>
    <member kind="function">
      <type></type>
      <name>linux_pinout_file</name>
      <anchorfile>classlinux__pinout__file.html</anchorfile>
      <anchor>acf60b93e4b4490a301798ad7c6034579</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~linux_pinout_file</name>
      <anchorfile>classlinux__pinout__file.html</anchorfile>
      <anchor>aa72fff3515d754f0ce8c46222fa377f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchorfile>classlinux__pinout__file.html</anchorfile>
      <anchor>a425969b40c4c116a27980e8b588a1bed</anchor>
      <arglist>(const uint32_t ignored, const char *FileName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deinit</name>
      <anchorfile>classlinux__pinout__file.html</anchorfile>
      <anchor>ac574a893a4e07b86851f0208aa42a5a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flushoutput</name>
      <anchorfile>classlinux__pinout__file.html</anchorfile>
      <anchor>ad7d3d6676a9c91e4461ce242ca035702</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>purgeinput</name>
      <anchorfile>classlinux__pinout__file.html</anchorfile>
      <anchor>a77a5b169f9224220a5b92fb5155fa015</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isopen</name>
      <anchorfile>classlinux__pinout__file.html</anchorfile>
      <anchor>a12327d65065b70b0b2ac51ffde0bc5ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dataready</name>
      <anchorfile>classlinux__pinout__file.html</anchorfile>
      <anchor>a8deae413e0d59afef033a1fc9352e9db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getcqq</name>
      <anchorfile>classlinux__pinout__file.html</anchorfile>
      <anchor>a1eb752bd5f0f8808eb3eb3bf1a5935c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>putcqq</name>
      <anchorfile>classlinux__pinout__file.html</anchorfile>
      <anchor>a99b97529ce75bdbd5095f96c846b0489</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FILE *</type>
      <name>fd</name>
      <anchorfile>classlinux__pinout__file.html</anchorfile>
      <anchor>a91ceab4c4c5bc7e0d43e62f82893605c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>linux_pinout_named_pipe</name>
    <filename>classlinux__pinout__named__pipe.html</filename>
    <base>IUart</base>
    <member kind="function">
      <type></type>
      <name>linux_pinout_named_pipe</name>
      <anchorfile>classlinux__pinout__named__pipe.html</anchorfile>
      <anchor>a5cb2b9b0c6bae6b222169bf0de540ce8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~linux_pinout_named_pipe</name>
      <anchorfile>classlinux__pinout__named__pipe.html</anchorfile>
      <anchor>a3194d2c5bcbb6aaa61a750f8d20f6f5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>linux_pinout_named_pipe</name>
      <anchorfile>classlinux__pinout__named__pipe.html</anchorfile>
      <anchor>a53d487314abb28c8893cd643f9a3ddc3</anchor>
      <arglist>(int hAlreadyOpenedPipe)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchorfile>classlinux__pinout__named__pipe.html</anchorfile>
      <anchor>a9f346c69c9e0dd8a03d0e2ddbf3a1a3a</anchor>
      <arglist>(const uint32_t ReadWriteMask, const char *named_pipe_path_name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deinit</name>
      <anchorfile>classlinux__pinout__named__pipe.html</anchorfile>
      <anchor>aa40aac9de17c69521627347a1d8126a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dataready</name>
      <anchorfile>classlinux__pinout__named__pipe.html</anchorfile>
      <anchor>a85bc2fe0ccd84c2479f348ea07adafb5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getcqq</name>
      <anchorfile>classlinux__pinout__named__pipe.html</anchorfile>
      <anchor>a3716c895ae341828b397803367353bf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get</name>
      <anchorfile>classlinux__pinout__named__pipe.html</anchorfile>
      <anchor>adabb51f81cf41f8636d36bca7a411355</anchor>
      <arglist>(void *p, const size_t len)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>putcqq</name>
      <anchorfile>classlinux__pinout__named__pipe.html</anchorfile>
      <anchor>ad13fa7e901e5f3d533896e011f9db8b2</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>put</name>
      <anchorfile>classlinux__pinout__named__pipe.html</anchorfile>
      <anchor>a803a4c1ce6f89bfa24d7e1a0884702a5</anchor>
      <arglist>(const void *p, const size_t len)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>purgeinput</name>
      <anchorfile>classlinux__pinout__named__pipe.html</anchorfile>
      <anchor>a85aaf548aeeb38c0ef41e48fbc4891fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isopen</name>
      <anchorfile>classlinux__pinout__named__pipe.html</anchorfile>
      <anchor>ad9da84ed895c9c3711203da7fa959213</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Silent</name>
      <anchorfile>classlinux__pinout__named__pipe.html</anchorfile>
      <anchor>accf6e71cf921a5b9779a2b4158e35bcc</anchor>
      <arglist>(const bool s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>size</name>
      <anchorfile>classlinux__pinout__named__pipe.html</anchorfile>
      <anchor>a42c1cc5b4a680773708b45d20a79b235</anchor>
      <arglist>(int max_storage_bytes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flushoutput</name>
      <anchorfile>classlinux__pinout__named__pipe.html</anchorfile>
      <anchor>a2f02f005290d787855f3f22ed309f6c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>ReadWriteMaskRead</name>
      <anchorfile>classlinux__pinout__named__pipe.html</anchorfile>
      <anchor>ab7da60e121241b9dc87d4730a495784f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>ReadWriteMaskWrite</name>
      <anchorfile>classlinux__pinout__named__pipe.html</anchorfile>
      <anchor>aab58c123f405c0c8c76b362b908bdf18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>silent</name>
      <anchorfile>classlinux__pinout__named__pipe.html</anchorfile>
      <anchor>ac47e7c5e632808efa2814d52ac1cdb2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>fd</name>
      <anchorfile>classlinux__pinout__named__pipe.html</anchorfile>
      <anchor>ac446a4006459ae56b0d5346a3c90f8e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>linux_pinout_server_socket</name>
    <filename>classlinux__pinout__server__socket.html</filename>
    <base>IUart</base>
    <member kind="function">
      <type></type>
      <name>linux_pinout_server_socket</name>
      <anchorfile>classlinux__pinout__server__socket.html</anchorfile>
      <anchor>a6e562435c5d5b8a9ea4038437b70c5ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~linux_pinout_server_socket</name>
      <anchorfile>classlinux__pinout__server__socket.html</anchorfile>
      <anchor>a48dfff0b8d8c271bc9361862fcfa97a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchorfile>classlinux__pinout__server__socket.html</anchorfile>
      <anchor>a408ba0a7866e055cd7198a936014c726</anchor>
      <arglist>(const uint32_t HostPort, const char *HostName)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>SocketConnect</name>
      <anchorfile>classlinux__pinout__server__socket.html</anchorfile>
      <anchor>abc5e602838dbce28edbd13ce13ee9349</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deinit</name>
      <anchorfile>classlinux__pinout__server__socket.html</anchorfile>
      <anchor>a83d2e15aae460f7edd2b292bfd61dd5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dataready</name>
      <anchorfile>classlinux__pinout__server__socket.html</anchorfile>
      <anchor>aa5d82b5299330c1892609cd55e0ff799</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getcqq</name>
      <anchorfile>classlinux__pinout__server__socket.html</anchorfile>
      <anchor>a0655e229b2fa05ed1c196dea4d799a18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>putcqq</name>
      <anchorfile>classlinux__pinout__server__socket.html</anchorfile>
      <anchor>a1f0c2f6818ec01c9c6d674460319fee9</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flushoutput</name>
      <anchorfile>classlinux__pinout__server__socket.html</anchorfile>
      <anchor>a058ecec018249526adac4cc9dc5bf7b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>purgeinput</name>
      <anchorfile>classlinux__pinout__server__socket.html</anchorfile>
      <anchor>adb468760af2ccac563825bc16cdf01b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>connected</name>
      <anchorfile>classlinux__pinout__server__socket.html</anchorfile>
      <anchor>a6b0cf1c92508c9d4f57e60a91537160e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isopen</name>
      <anchorfile>classlinux__pinout__server__socket.html</anchorfile>
      <anchor>ac9c565155633e60323b04a3c72f3fe59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>silent</name>
      <anchorfile>classlinux__pinout__server__socket.html</anchorfile>
      <anchor>a6bf858c8a8079ec33c33cece3bbcbf76</anchor>
      <arglist>(const bool s)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>hSocket</name>
      <anchorfile>classlinux__pinout__server__socket.html</anchorfile>
      <anchor>a21162ef3243baaea5c7f5e6f932141f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>hServer</name>
      <anchorfile>classlinux__pinout__server__socket.html</anchorfile>
      <anchor>aa987569d0046a1a4e588b7a9597fd48b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>struct sockaddr_in</type>
      <name>Address</name>
      <anchorfile>classlinux__pinout__server__socket.html</anchorfile>
      <anchor>af069212dfe258858306bb87147212735</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>nAddressSize</name>
      <anchorfile>classlinux__pinout__server__socket.html</anchorfile>
      <anchor>a54527367c3d5292677d0161a735e24cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long</type>
      <name>nHostAddress</name>
      <anchorfile>classlinux__pinout__server__socket.html</anchorfile>
      <anchor>a7b56e9a181789d40a0ac008aab53c6d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>Silent</name>
      <anchorfile>classlinux__pinout__server__socket.html</anchorfile>
      <anchor>a12ff70d19d13f0e2d511ae63e31a68d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>linux_pinout_stdio</name>
    <filename>classlinux__pinout__stdio.html</filename>
    <base>IUart</base>
    <member kind="function">
      <type></type>
      <name>linux_pinout_stdio</name>
      <anchorfile>classlinux__pinout__stdio.html</anchorfile>
      <anchor>ae436f4164d55cbda8ca01335c78e0028</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~linux_pinout_stdio</name>
      <anchorfile>classlinux__pinout__stdio.html</anchorfile>
      <anchor>a4389eb7e5056efd398cb603aa8dd5ec2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dataready</name>
      <anchorfile>classlinux__pinout__stdio.html</anchorfile>
      <anchor>a3b5e11b88d67644b13c640af1816b9fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getcqq</name>
      <anchorfile>classlinux__pinout__stdio.html</anchorfile>
      <anchor>aff4e7548d022064f9d66b407eee3b015</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>putcqq</name>
      <anchorfile>classlinux__pinout__stdio.html</anchorfile>
      <anchor>aecdaa9593aa4b940f7030c7166bde09d</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>kbhit</name>
      <anchorfile>classlinux__pinout__stdio.html</anchorfile>
      <anchor>a6f64e7e84158a0b6726b97f5e234b3b7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>linux_pinout_uart</name>
    <filename>classlinux__pinout__uart.html</filename>
    <base>IUart</base>
    <member kind="function">
      <type></type>
      <name>linux_pinout_uart</name>
      <anchorfile>classlinux__pinout__uart.html</anchorfile>
      <anchor>a091a28e54ef5d6f5d08f2a9000a44b98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~linux_pinout_uart</name>
      <anchorfile>classlinux__pinout__uart.html</anchorfile>
      <anchor>ac84a6af46b4cf5c05e62567cc0b37877</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchorfile>classlinux__pinout__uart.html</anchorfile>
      <anchor>ac3caab2514512ce7592f3cdd15187b83</anchor>
      <arglist>(const uint32_t Baudrate, const char *device, const bool UseRtsCts=IUart::NoRTSCTS, const bool UseOddParity=IUart::NoParity, int OpenFlags=O_RDWR|O_NOCTTY|O_NONBLOCK|O_SYNC)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deinit</name>
      <anchorfile>classlinux__pinout__uart.html</anchorfile>
      <anchor>ad03be9ea9049db75a79f297f166edc65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Echo</name>
      <anchorfile>classlinux__pinout__uart.html</anchorfile>
      <anchor>af789f9adecfa28194c741e798eb50583</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Echo</name>
      <anchorfile>classlinux__pinout__uart.html</anchorfile>
      <anchor>a735eb21c5d7a21cfcbec5a09d3b09bcc</anchor>
      <arglist>(const bool e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dataready</name>
      <anchorfile>classlinux__pinout__uart.html</anchorfile>
      <anchor>a3a4c13fd7b6bce8061b37438a029e21c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getcqq</name>
      <anchorfile>classlinux__pinout__uart.html</anchorfile>
      <anchor>a4ec5263e4a98bd3d1b827a98e4e8e90d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>putcqq</name>
      <anchorfile>classlinux__pinout__uart.html</anchorfile>
      <anchor>a9a32021b55f7eee1ec97a1ead9c58f25</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flushoutput</name>
      <anchorfile>classlinux__pinout__uart.html</anchorfile>
      <anchor>a7f973b72bdfd52d39dcb0485f1f35f33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>purgeinput</name>
      <anchorfile>classlinux__pinout__uart.html</anchorfile>
      <anchor>ac567162314bf11cd3d5a7e4e41acd802</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classlinux__pinout__uart.html</anchorfile>
      <anchor>a712e3836f362ba094f62cec432fe953c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isopen</name>
      <anchorfile>classlinux__pinout__uart.html</anchorfile>
      <anchor>a00c5f3242250b2f7ef36f9af5e3b8408</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>AutoReopen</name>
      <anchorfile>classlinux__pinout__uart.html</anchorfile>
      <anchor>a6e2ad1992f04cfed57ee1918c29dd85a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AutoReopen</name>
      <anchorfile>classlinux__pinout__uart.html</anchorfile>
      <anchor>af16b07d9f925d6ceed25b252c4018323</anchor>
      <arglist>(const bool ar)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>ComFileDescriptor</name>
      <anchorfile>classlinux__pinout__uart.html</anchorfile>
      <anchor>afd26a4a8ee681d87611dae8d3715af3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>echo</name>
      <anchorfile>classlinux__pinout__uart.html</anchorfile>
      <anchor>a97d0fedac6069d508b25746e6faeafca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>autoreopen</name>
      <anchorfile>classlinux__pinout__uart.html</anchorfile>
      <anchor>a3b4f0d416ec74f7c4c8e5e0bf89c8ffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t</type>
      <name>Baud</name>
      <anchorfile>classlinux__pinout__uart.html</anchorfile>
      <anchor>a8e8a9dd5ea5bba02d3fb38d68e14d9cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char</type>
      <name>Device</name>
      <anchorfile>classlinux__pinout__uart.html</anchorfile>
      <anchor>a2de843ce978e2079aab5a2b3f3fefad2</anchor>
      <arglist>[DeviceMaxLen]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>RtsCts</name>
      <anchorfile>classlinux__pinout__uart.html</anchorfile>
      <anchor>a3de4f0fbe4ed751fb91e9e8d8894edd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>OddParity</name>
      <anchorfile>classlinux__pinout__uart.html</anchorfile>
      <anchor>ad5a3c0a3812dadfd0490adc25b927a2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const size_t</type>
      <name>DeviceMaxLen</name>
      <anchorfile>classlinux__pinout__uart.html</anchorfile>
      <anchor>a620f564c864c51767b1cd6a9191fab96</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lt244x</name>
    <filename>structlt244x.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>SpiClkDiv</templarg>
    <base>pinout</base>
    <base>spi</base>
    <member kind="function">
      <type></type>
      <name>lt244x</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>a94ce667ace79ad306f350eb463fa8292</anchor>
      <arglist>(const double adcvref)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~lt244x</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>a5cdd6598132362855202381bdee3ba73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CountsToVolts</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>a651b6b1bb08e7e3a5e7cf47c98dab48f</anchor>
      <arglist>(const lt244xdetails::lt244x_sample &amp;Counts) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CountsToVolts</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>acbb591db98484813aa39f35a70c6e068</anchor>
      <arglist>(const int32_t &amp;Counts) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>StillConverting</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>abc86f3c77746715b4a2be2c6bd55ec42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReadChannel</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>ab2af07a3777f66470ed17823d632ee47</anchor>
      <arglist>(const lt244xdetails::configregister &amp;NewChannel, lt244xdetails::lt244x_sample &amp;newsample)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReadChannel</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>ae1619805b80479a8e2c851ad2ce134b1</anchor>
      <arglist>(const lt244xdetails::channel &amp;NewChannel, lt244xdetails::lt244x_sample &amp;newsample)</arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_diff0vs1</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>a3d3f49b98cf3b884678ee2f07e15918c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_diff2vs3</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>af1dcc0117ccc28d7477fe55318424520</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_diff4vs5</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>ace3d40be2e8e5cc00d64e0f2706fd0db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_diff6vs7</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>a2f268816e458f8e7bc950c11d2a293d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_diff8vs9</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>af3496a8b27eb03885ae49a683b3f9cc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_diff10vs11</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>a0208fb53479b84e8eb2936f46e604039</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_diff12vs13</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>af384bb15a2b569e9243813f457786eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_diff14vs15</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>a670953c2bf409e29710799c708cc00d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_diff1vs0</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>a3d935f91e40261023484627ef43f5c88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_diff3vs2</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>ac30a67c77f1d886ebf80dfdfb8be418b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_diff5vs4</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>a072fb2a032ae8af009f931c5367df4e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_diff7vs6</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>a4e5ccd8f6f1b79c2c92ee68d1326f286</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_diff9vs8</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>a77493bf1a6f9aca9fbe77543c8aeed7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_diff11vs10</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>a41ad3c3bfee9d0fca00a24c4e4e17ebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_diff13vs12</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>ad5b08959813a197e5c32a16d52199c92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_diff15vs14</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>a265305bf620befbd3cc1d5ce7877161b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_se0</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>a1101898d91e0a1b3f1d048c8bb900b80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_se1</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>afca4f53421f1a04f5ca61a5ed7dec71a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_se2</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>aa7cc875b124cf475804601dfd41bcee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_se3</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>ada0b4b475b2a8cb4b4ebe80dd02ab22f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_se4</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>a8b885d38e1cd8486449289fba882c255</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_se5</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>ac0c9b79fc1ff43be2d0edbf83ecfc1b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_se6</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>aedb482b12e974e132fd9f4a8734bd7d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_se7</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>af85a9921817ef3d6698383095e40dad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_se8</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>a168591ff99240a5cb917f20e8465f4a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_se9</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>af97d6361f1f6120f198c7528414f025f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_se10</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>ae44cb28a2eb32cdba1e0bd48e7e87eb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_se11</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>a0f8a9e4067ad4a8c0b3fab2522482c10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_se12</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>a2f4f812a5fb4ed1a99c238bdb84610e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_se13</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>acc8df6162e6d285bce90cde66898d1f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_se14</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>a100eea6c18f5019a7d8bc906cb326efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lt244xdetails::channel</type>
      <name>chan_se15</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>aeedf1fff5577c1f4a11d0a86aa18f86a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>WaitSlowestSampleTimeoutuS</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>a9ea2fe65e286648b12bcbd7c80a7fbc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>WaitFastestSampleTimeoutuS</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>aadb96f39fbfcb983438b744bff2966ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>__inline__ void</type>
      <name>XferData</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>a79134f60444af9496d76b9d1f991e97b</anchor>
      <arglist>(const lt244xdetails::configregister config_in, lt244xdetails::lt244x_sample &amp;adcdata_out)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const double</type>
      <name>AdcVRef</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>af2f696ce98a698a0e97397c4c8593192</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>lt244xdetails::configregister</type>
      <name>LastChannelAndSamplingFreq</name>
      <anchorfile>structlt244x.html</anchorfile>
      <anchor>a7c6a75a4b49ed6e91f75ea2c5d79c370</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lt244x_accum</name>
    <filename>structlt244x__accum.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>lt244x_accum</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>adb76eb9e6a7fb5b912543b5842e809d2</anchor>
      <arglist>(const double adcvref)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~lt244x_accum</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>a9586618bae870b50c31e03447876a55d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CountsToVolts</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>a14da80ae839bc318650575022f219d25</anchor>
      <arglist>(const Ltc244xAccumulator &amp;Accumulator) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CountsToVolts</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>aa0cd4ff791da260ecb73bec8b12ef557</anchor>
      <arglist>(const int32_t &amp;Counts) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CountsToVolts</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>a48cde0e239587e7aacc243c08cf9785a</anchor>
      <arglist>(const lt244xdetails::lt244x_sample &amp;Counts) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReadChannel</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>aa990c00b656ed8d66faa858b7e1dfb3d</anchor>
      <arglist>(const Ltc244xAccumulatorChannel &amp;Channel, Ltc244xAccumulator &amp;Sample)</arglist>
    </member>
    <member kind="variable">
      <type>const int32_t</type>
      <name>CountPosVRef</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>afd11778641ee6728911c974b6d4dc97a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int32_t</type>
      <name>CountZero</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>aa6afcdeb22c5e94de3fcdd57cffcd207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int32_t</type>
      <name>CountNegVRef</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>a223f9d29b232607951ca7ffde7ed7b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_diff0vs1</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>a53bfe5dabe3999ad0ef04d0db4ae2d80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_diff2vs3</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>a45501b58486697fa129163887d8a7563</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_diff4vs5</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>a9817c87c43f212325d2d569775a1a926</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_diff6vs7</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>ac1ce6317c68875f1016032f5b3620d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_diff8vs9</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>a5b66e6914300ea83e8205effb5af543d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_diff10vs11</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>a7cbf9739cef5ed9df7ee83399b9e46cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_diff12vs13</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>a5a45b1d7348c4aaf7c15697685f095fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_diff14vs15</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>adbc10a71ede1f54a6a1ad1583e05a32c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_diff1vs0</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>a615dc7ea24f041ae574ae928b37c2b60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_diff3vs2</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>af7c9e728f83dedb37b7c210a57e95bc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_diff5vs4</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>ac99872e902a968fb581a294cac0862a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_diff7vs6</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>aa70a059db4f359aba4f2de59e7a102a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_diff9vs8</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>a7ed18f8625d25d5146566d07842f0031</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_diff11vs10</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>a64b188c4b9a11fded1cfe17da78c49ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_diff13vs12</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>a70f0ed9368e24fed181cb6d545caa6c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_diff15vs14</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>a68ec12908f437a66bdb35e587ea119d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_se0</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>aa0ba99b6e3c3cf883ee3fd084e1d8de5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_se1</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>ae57839b333acf9b75aa9e3945395782c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_se2</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>a28224358483d93af0e5975b9a0d3bb0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_se3</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>a3d0304d3f64d08b099fbd9bfc24f09e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_se4</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>a790494ed4d56f99ea73fb3764f57be5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_se5</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>aa5d126314c4aa0befa7faae99b043b36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_se6</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>af3cc42723471d06f3c452657988feb77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_se7</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>a950895881d3c177923c2f744dbcc3fde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_se8</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>af70317865da37db6ab2c069c0fcfa688</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_se9</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>a21be2af675aff8c77cf47a0ea19d59a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_se10</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>aa3aea4598f1a1fe8838d89d583b9e647</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_se11</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>a2bcbc938717118bfdae2202341322535</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_se12</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>a7942bb2378c05ebfe35f43b17a200ffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_se13</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>a9009488a80a8ab0b091276e2d2c235d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_se14</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>af17edbd5f2f35e5d639ff7a2d423e470</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Ltc244xAccumulatorChannel</type>
      <name>chan_se15</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>a30039e2b5019e1c70a114037f88ef5d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const double</type>
      <name>AdcVRef</name>
      <anchorfile>structlt244x__accum.html</anchorfile>
      <anchor>af80ea2f93dba475939c026ae14c23997</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>lt244xdetails::lt244x_sample</name>
    <filename>unionlt244xdetails_1_1lt244x__sample.html</filename>
    <member kind="function">
      <type>struct lt244xdetails::lt244x_sample::@27</type>
      <name>__attribute__</name>
      <anchorfile>unionlt244xdetails_1_1lt244x__sample.html</anchorfile>
      <anchor>a2cd482088de5adf22c078332ce53c7eb</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lt244x_sample</name>
      <anchorfile>unionlt244xdetails_1_1lt244x__sample.html</anchorfile>
      <anchor>ac734c0c32a9241eec3ee9b5d23701952</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>unionlt244xdetails_1_1lt244x__sample.html</anchorfile>
      <anchor>a7b156e27a88b6d3be41709c23fe194d1</anchor>
      <arglist>(lt244x_sample &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overrange</name>
      <anchorfile>unionlt244xdetails_1_1lt244x__sample.html</anchorfile>
      <anchor>a61523c48b1a83cac7ac1fe6fba4de526</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>underrange</name>
      <anchorfile>unionlt244xdetails_1_1lt244x__sample.html</anchorfile>
      <anchor>a3f8b50cd0616cb74431c92c69ebe7ceb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CountsToVolts</name>
      <anchorfile>unionlt244xdetails_1_1lt244x__sample.html</anchorfile>
      <anchor>a63abcd7f0f8cdc80c35e1e04720ef05a</anchor>
      <arglist>(const lt244xdetails::lt244x_sample &amp;Counts, const double &amp;AdcVRef) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>formatf</name>
      <anchorfile>unionlt244xdetails_1_1lt244x__sample.html</anchorfile>
      <anchor>a34abbe68c200e91504f2e2f883f601ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>all</name>
      <anchorfile>unionlt244xdetails_1_1lt244x__sample.html</anchorfile>
      <anchor>a46936ccb806d525354fd5706b66531c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>bytes</name>
      <anchorfile>unionlt244xdetails_1_1lt244x__sample.html</anchorfile>
      <anchor>affacd3bb4f3e634f9f4cab3286b9a34f</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>sample</name>
      <anchorfile>unionlt244xdetails_1_1lt244x__sample.html</anchorfile>
      <anchor>aa2b97117cd8f23778a3e098faaf778af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>OverrangeIfSameAsMsb</name>
      <anchorfile>unionlt244xdetails_1_1lt244x__sample.html</anchorfile>
      <anchor>add335e8bf1cd98182ec8297961e18d80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>AlwaysZero</name>
      <anchorfile>unionlt244xdetails_1_1lt244x__sample.html</anchorfile>
      <anchor>aba5849cdfbe38d5864b866e96adf6fa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>StillConverting</name>
      <anchorfile>unionlt244xdetails_1_1lt244x__sample.html</anchorfile>
      <anchor>a318d3cb81917d08e6081db4352260e0b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>Ltc244xAccumulator</name>
    <filename>unionLtc244xAccumulator.html</filename>
    <member kind="function">
      <type>struct Ltc244xAccumulator::@29</type>
      <name>__attribute__</name>
      <anchorfile>unionLtc244xAccumulator.html</anchorfile>
      <anchor>abfd9cdb30fb1cb5e6c7d2510979ef422</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ltc244xAccumulator</name>
      <anchorfile>unionLtc244xAccumulator.html</anchorfile>
      <anchor>a50892268de53060a389d6cf4214d5405</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>CountsToVolts</name>
      <anchorfile>unionLtc244xAccumulator.html</anchorfile>
      <anchor>ad2165c3e94f03d79f1f092b0c7ab81fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>formatf</name>
      <anchorfile>unionLtc244xAccumulator.html</anchorfile>
      <anchor>a7e92a688fc47e0faf7e057df807b5c68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>uint64_t</type>
      <name>all</name>
      <anchorfile>unionLtc244xAccumulator.html</anchorfile>
      <anchor>a8811c86b0f39a8d17267b2ca886f39a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int64_t</type>
      <name>Sample</name>
      <anchorfile>unionLtc244xAccumulator.html</anchorfile>
      <anchor>a53eb7d843b6f720b0f7498452df6a177</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64_t</type>
      <name>reserved</name>
      <anchorfile>unionLtc244xAccumulator.html</anchorfile>
      <anchor>aa81a17a6630a7c7442c062dd505e79fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>NumAccums</name>
      <anchorfile>unionLtc244xAccumulator.html</anchorfile>
      <anchor>a7350fd7deb3d5d07db379f14e56aeb2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>Ltc244xAccumulatorChannel</name>
    <filename>unionLtc244xAccumulatorChannel.html</filename>
    <member kind="function">
      <type>struct Ltc244xAccumulatorChannel::@31</type>
      <name>__attribute__</name>
      <anchorfile>unionLtc244xAccumulatorChannel.html</anchorfile>
      <anchor>af5370c6f11ac6977c576d79a409fb786</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ltc244xAccumulatorChannel</name>
      <anchorfile>unionLtc244xAccumulatorChannel.html</anchorfile>
      <anchor>a2c3665aaa20ddfe87b89cdf23be35fa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ltc244xAccumulatorChannel</name>
      <anchorfile>unionLtc244xAccumulatorChannel.html</anchorfile>
      <anchor>ac06b233908d28d70c8401ea816554e1d</anchor>
      <arglist>(const uint8_t singleended, const uint8_t chanbit0, const uint8_t chanbits123)</arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>all</name>
      <anchorfile>unionLtc244xAccumulatorChannel.html</anchorfile>
      <anchor>a2a5ef41729b9a806e0b8403b438ff80f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>ChannelBits123</name>
      <anchorfile>unionLtc244xAccumulatorChannel.html</anchorfile>
      <anchor>a2c90d9349fae70a05182ba867892a97e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>ChanBit0orInvertDiffChan</name>
      <anchorfile>unionLtc244xAccumulatorChannel.html</anchorfile>
      <anchor>aec6f4aae5ee23bc1c7d23352f1dd24db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>SingleEnded</name>
      <anchorfile>unionLtc244xAccumulatorChannel.html</anchorfile>
      <anchor>a472582bfa9d926377098b88e5441f084</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>reserved</name>
      <anchorfile>unionLtc244xAccumulatorChannel.html</anchorfile>
      <anchor>a7ff80b4df85a8f61c2456af3741e833a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>ads1258details::muxschregister</name>
    <filename>unionads1258details_1_1muxschregister.html</filename>
    <member kind="function">
      <type>struct ads1258details::muxschregister::@19</type>
      <name>__attribute__</name>
      <anchorfile>unionads1258details_1_1muxschregister.html</anchorfile>
      <anchor>a609b3d3ada78b97f036cb4dffe0fda82</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>muxschregister</name>
      <anchorfile>unionads1258details_1_1muxschregister.html</anchorfile>
      <anchor>a9804a2ae8181de3061f047ab55e886e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>muxschregister</name>
      <anchorfile>unionads1258details_1_1muxschregister.html</anchorfile>
      <anchor>a9fefccc7a3b3fd115e712f7ffae0f03f</anchor>
      <arglist>(uint8_t a, uint8_t b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>unionads1258details_1_1muxschregister.html</anchorfile>
      <anchor>aba1850efed09c542b8edffe156bee6f1</anchor>
      <arglist>(muxschregister &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>all</name>
      <anchorfile>unionads1258details_1_1muxschregister.html</anchorfile>
      <anchor>a52741e4f023bd664cca6a6be0b19fb7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>chan_posin</name>
      <anchorfile>unionads1258details_1_1muxschregister.html</anchorfile>
      <anchor>a2cc81bb71e055a90333b2dc4151624fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>chan_negin</name>
      <anchorfile>unionads1258details_1_1muxschregister.html</anchorfile>
      <anchor>a7fbec3dc023bc3185da950ca40fe75f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pinout</name>
    <filename>classpinout.html</filename>
  </compound>
  <compound kind="struct">
    <name>RTSCallback</name>
    <filename>structRTSCallback.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>RTS</name>
      <anchorfile>structRTSCallback.html</anchorfile>
      <anchor>a03a3b0e30e88c9498ca3690cff7b4b4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RTSCallback</name>
      <anchorfile>structRTSCallback.html</anchorfile>
      <anchor>ab4db3b9fe6b42de2018ac04c7d4a064b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spi</name>
    <filename>classspi.html</filename>
  </compound>
  <compound kind="struct">
    <name>ads1258::spi_busmsg</name>
    <filename>structads1258_1_1spi__busmsg.html</filename>
    <member kind="function">
      <type>__inline__</type>
      <name>spi_busmsg</name>
      <anchorfile>structads1258_1_1spi__busmsg.html</anchorfile>
      <anchor>a99da085b0f7becde622b3d04353bc589</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>__inline__</type>
      <name>~spi_busmsg</name>
      <anchorfile>structads1258_1_1spi__busmsg.html</anchorfile>
      <anchor>a517f4a8825b6341e1328c1beeb9655d3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>spipinout</name>
    <filename>classspipinout.html</filename>
  </compound>
  <compound kind="union">
    <name>ads1258details::sysreadregister</name>
    <filename>unionads1258details_1_1sysreadregister.html</filename>
    <member kind="function">
      <type>struct ads1258details::sysreadregister::@21</type>
      <name>__attribute__</name>
      <anchorfile>unionads1258details_1_1sysreadregister.html</anchorfile>
      <anchor>aaefcdd287b8e859c275237c1497fa2c9</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sysreadregister</name>
      <anchorfile>unionads1258details_1_1sysreadregister.html</anchorfile>
      <anchor>a182deb14b004e1332436beaa6248a469</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sysreadregister</name>
      <anchorfile>unionads1258details_1_1sysreadregister.html</anchorfile>
      <anchor>a8a945579ff5ad4bcaf49962a6187fd19</anchor>
      <arglist>(uint8_t a, uint8_t b, uint8_t c, uint8_t d, uint8_t e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>unionads1258details_1_1sysreadregister.html</anchorfile>
      <anchor>a8138673bbb101811d6669b3d1ffce1e6</anchor>
      <arglist>(sysreadregister &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>all</name>
      <anchorfile>unionads1258details_1_1sysreadregister.html</anchorfile>
      <anchor>a5112403ef45d82fd5414bc80d066f3bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>scan_offset</name>
      <anchorfile>unionads1258details_1_1sysreadregister.html</anchorfile>
      <anchor>a8a0fdc97aa8ad0c9c48df5a89865bf30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>reserve2</name>
      <anchorfile>unionads1258details_1_1sysreadregister.html</anchorfile>
      <anchor>af9580b4b63ffced65e6dc1de4078fd75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>scan_vcc</name>
      <anchorfile>unionads1258details_1_1sysreadregister.html</anchorfile>
      <anchor>a90c4d8ff91e0bd1561bd7ff9e79cd8b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>scan_temp</name>
      <anchorfile>unionads1258details_1_1sysreadregister.html</anchorfile>
      <anchor>a773312d1d80350071ec289e6d930bb86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>scan_gain</name>
      <anchorfile>unionads1258details_1_1sysreadregister.html</anchorfile>
      <anchor>a55fe524fa5d0245e3c46d61399bc44b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>scan_ref</name>
      <anchorfile>unionads1258details_1_1sysreadregister.html</anchorfile>
      <anchor>aadfc3f8717b5a897d7f8a98568a5f5c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>reserve1</name>
      <anchorfile>unionads1258details_1_1sysreadregister.html</anchorfile>
      <anchor>a3f5d282a9cc199eb2aaa83fb53737cfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>reserve0</name>
      <anchorfile>unionads1258details_1_1sysreadregister.html</anchorfile>
      <anchor>a30960b6a2fa65799112c7ce0b3f0302d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TerminalUart</name>
    <filename>structTerminalUart.html</filename>
    <templarg>txbufferlenbytes</templarg>
    <templarg>rxbufferlenbytes</templarg>
    <base>IUartParser</base>
    <member kind="function">
      <type>char RxBuffer[rxbufferlenbytes]</type>
      <name>__attribute__</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>a3187643aaa20365fc00a424bdca1eaad</anchor>
      <arglist>((aligned(4)))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TerminalUart</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>a683c317ad0af850001acbf2b389cba10</anchor>
      <arglist>(struct IUart &amp;pinout, const Cmd *cmds, const size_t numcmds, const char *(*terminaluartprompt)()=0, struct RTSCallback &amp;rts=NoRTS, const char *prefix=NoPrefix, const uint16_t strlenprefix=0, const bool verbose=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Init</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>a5ed0ee6b6a78b2c24114f6e24394e1d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Prompt</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>abf70f9cecd91698892d32e28138db3d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Prompt</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>a4cdb9b61bd11112264dfe4632a073a56</anchor>
      <arglist>(const char *(*terminaluartprompt)())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetVerbose</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>afb7d9d6df0047e2416e1199834efd2e2</anchor>
      <arglist>(const bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetEcho</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>aec07f7b2c2286c1fd1b392862e426f76</anchor>
      <arglist>(bool echostate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>StdOutEcho</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>abd0967dfb92dab3c91fa6227da96d5ce</anchor>
      <arglist>(bool echostate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCrLfOrLf</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>a5f636f219917657e23f14e8cd5c50df4</anchor>
      <arglist>(bool crlf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetBlockOnTxBuffFull</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>ad369e077971d102d3e69314aa68b0455</anchor>
      <arglist>(bool block)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPrefix</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>af59d4b36e3311fd27d46645fb7d42a20</anchor>
      <arglist>(const char *prefix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Flush</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>ac6cab63f5cc40cc1a24c53a63961e7e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>put</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>a0d8ff9c03819d2cd5ed3a9245928c336</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>puts</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>a0f561b86ef0350c23f953bab9253b649</anchor>
      <arglist>(const char *s, unsigned int maxlen=(unsigned int)(-1))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>formatf</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>a4d7b3768d990bf4b01748ae8b68452d2</anchor>
      <arglist>(const char *format,...)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ProcessTx</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>ac71c3961a90bb6e6f4db0629de4f6c2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ProcessRx</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>a56c53ecfc85dd4b3d440524192eb9fd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Process</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>addefd35bdecbc614d7dc65c5c2872ead</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eof</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>ac8dbe6e13cc59738f77a0c10939c45f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>get</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>a153253a1322b61e603a0e3ed212ae490</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>maybegetc</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>a40da7214273e0a27217d76b516dfeaba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maybegetline</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>a444cbb74ecf3249d7d688b675a420677</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>fixedqueue&lt; char, txbufferlenbytes &gt;</type>
      <name>TxBuffer</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>adc637bbba73f5fc52f5ed5cb7944f22d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>RxCount</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>a77070244cecf430b1e04593803619348</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>TxCount</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>a1cf054082ef7200bfb57976fe94ad963</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Echo</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>a9b40608e1b5129fb65f4704d017600b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>StdEcho</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>a09f01fecf4907966adac9552c30fd5ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>LastC</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>a2fe4c0e9936eb29fb5a6c0904dfd183c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>UseCrLf</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>aa2d6e35b27f89e2b59c938145594aac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>BlockOnTxBuffFull</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>ae2deeafa8db28d577649823fd00d62d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Cmd *</type>
      <name>Cmds</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>a38a50db3aad9d802b565252e1daeed15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>NumCmds</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>ac5eb9443297e0c664879baaaac82de4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *(*</type>
      <name>TerminalUartPrompt</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>a22e0914b4bd9632110f3ffd4598a47dc</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="variable">
      <type>RTSCallback &amp;</type>
      <name>RTSPinout</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>a504fa93c1138062e3a7dc17df7684fd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>Prefix</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>aef4ffd217599aeedad9f49413073155b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>StrlenPrefix</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>ab593c0a6c2452ba1c0e6760e3fd8bcac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>Verbose</name>
      <anchorfile>structTerminalUart.html</anchorfile>
      <anchor>ad6ff3cd11020959c46e146121e25dd46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>uart_pinout_fpga</name>
    <filename>classuart__pinout__fpga.html</filename>
    <base>IUart</base>
    <member kind="function">
      <type></type>
      <name>uart_pinout_fpga</name>
      <anchorfile>classuart__pinout__fpga.html</anchorfile>
      <anchor>a11237c1177521895dc81b8076e6beb95</anchor>
      <arglist>(const UartStatusRegister *statusregister, const uint32_t *readrequestregister, const uint32_t *readdataregister, uint32_t *writedataregister, const char monitorprefacechar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~uart_pinout_fpga</name>
      <anchorfile>classuart__pinout__fpga.html</anchorfile>
      <anchor>a548bcc5c79576819b2e243214286a629</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dataready</name>
      <anchorfile>classuart__pinout__fpga.html</anchorfile>
      <anchor>a704e50dee32050e19d1a74bbbea2ffc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getcqq</name>
      <anchorfile>classuart__pinout__fpga.html</anchorfile>
      <anchor>a0ba18a38873b3fa2600a8759f7241680</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>putcqq</name>
      <anchorfile>classuart__pinout__fpga.html</anchorfile>
      <anchor>a90ca8fbc8b25591c595c6f0bb7b6a1f8</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>depth</name>
      <anchorfile>classuart__pinout__fpga.html</anchorfile>
      <anchor>a27dc074d2f9aea6760997a7e66703a61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchorfile>classuart__pinout__fpga.html</anchorfile>
      <anchor>a521d19b9de11add6dfeef02fff45a4ad</anchor>
      <arglist>(const uint32_t nc, const char *nc3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deinit</name>
      <anchorfile>classuart__pinout__fpga.html</anchorfile>
      <anchor>aaee0ee7faadc8d9b7db220557568645c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flushoutput</name>
      <anchorfile>classuart__pinout__fpga.html</anchorfile>
      <anchor>a865de3b51ceaf97c3d7c8c85cb517c86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>purgeinput</name>
      <anchorfile>classuart__pinout__fpga.html</anchorfile>
      <anchor>a755e1204783c4005af7dad683e109600</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>connected</name>
      <anchorfile>classuart__pinout__fpga.html</anchorfile>
      <anchor>a75c4103eda8786399a192642cade44d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isopen</name>
      <anchorfile>classuart__pinout__fpga.html</anchorfile>
      <anchor>a078309d357164c523a95f30ed7db934b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Monitor</name>
      <anchorfile>classuart__pinout__fpga.html</anchorfile>
      <anchor>ab0ad2201b7c3113b7a0771c1b0f8123a</anchor>
      <arglist>(const bool m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Monitor</name>
      <anchorfile>classuart__pinout__fpga.html</anchorfile>
      <anchor>a759ceea493afe1947eeb9f3e03115d69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>monitor</name>
      <anchorfile>classuart__pinout__fpga.html</anchorfile>
      <anchor>ac40363e86622c4509ec9e70b3a309ee5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const UartStatusRegister *</type>
      <name>StatusRegister</name>
      <anchorfile>classuart__pinout__fpga.html</anchorfile>
      <anchor>a0b535d07f55b8d7d72448c82bb895d6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const uint32_t *</type>
      <name>ReadRequestRegister</name>
      <anchorfile>classuart__pinout__fpga.html</anchorfile>
      <anchor>a27c5c034c3c54a37599437f19e3588bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const uint32_t *</type>
      <name>ReadDataRegister</name>
      <anchorfile>classuart__pinout__fpga.html</anchorfile>
      <anchor>a45549f8ebd0c5bbb869d555c2c51ec37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint32_t *</type>
      <name>WriteDataRegister</name>
      <anchorfile>classuart__pinout__fpga.html</anchorfile>
      <anchor>a69fe78399bc475166e7c6a5e6c4cfecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const char</type>
      <name>MonitorPrefaceChar</name>
      <anchorfile>classuart__pinout__fpga.html</anchorfile>
      <anchor>a0c6c7d50823c9a7db42a315d22baa06c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>UartStatusRegister</name>
    <filename>unionUartStatusRegister.html</filename>
    <member kind="function">
      <type>struct UartStatusRegister::@65</type>
      <name>__attribute__</name>
      <anchorfile>unionUartStatusRegister.html</anchorfile>
      <anchor>a1cb3ad5eab97605250e7e290d63ead82</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UartStatusRegister</name>
      <anchorfile>unionUartStatusRegister.html</anchorfile>
      <anchor>a488d6ace57f6d4621b2fcbf0d80a1e17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>formatf</name>
      <anchorfile>unionUartStatusRegister.html</anchorfile>
      <anchor>a1dfb782fa57602582e2927bccbdefe6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>all</name>
      <anchorfile>unionUartStatusRegister.html</anchorfile>
      <anchor>a47c365f492ba8059732a8ec0804399fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>RxFifoEmpty</name>
      <anchorfile>unionUartStatusRegister.html</anchorfile>
      <anchor>a7318aec67d057f3427a3cf865ff3b1bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>RxFifoFull</name>
      <anchorfile>unionUartStatusRegister.html</anchorfile>
      <anchor>a341542c4c1d1c3ebe04748b245862369</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>TxFifoEmpty</name>
      <anchorfile>unionUartStatusRegister.html</anchorfile>
      <anchor>a8270078d3ea07b7910069849b7b83ff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>TxFifoFull</name>
      <anchorfile>unionUartStatusRegister.html</anchorfile>
      <anchor>a9b02d3d454da61e1750716f5cc3957d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>reserved1</name>
      <anchorfile>unionUartStatusRegister.html</anchorfile>
      <anchor>aa0ca80063bf5c9b0279dc399449e7223</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>RxFifoCount</name>
      <anchorfile>unionUartStatusRegister.html</anchorfile>
      <anchor>a5ad57df126024a48af157f63b366a085</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>TxFifoCount</name>
      <anchorfile>unionUartStatusRegister.html</anchorfile>
      <anchor>af213cc3e54ffd45bbf8a04b937a4b9e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>reserved2</name>
      <anchorfile>unionUartStatusRegister.html</anchorfile>
      <anchor>a9023b6647d56da27a7c744d12adcd8ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>uint16be_t</name>
    <filename>structuint16be__t.html</filename>
    <member kind="function">
      <type>uint16_t</type>
      <name>le</name>
      <anchorfile>structuint16be__t.html</anchorfile>
      <anchor>a5dde1d5498dbd2bc8a73cd13d36d0b58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>one</name>
      <anchorfile>structuint16be__t.html</anchorfile>
      <anchor>af8991293ac1a36c5bf5caf39d01f8978</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>two</name>
      <anchorfile>structuint16be__t.html</anchorfile>
      <anchor>afb261504098e03f0bbedf78badad6f32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>uint32be_t</name>
    <filename>structuint32be__t.html</filename>
    <member kind="function">
      <type>uint32_t</type>
      <name>le</name>
      <anchorfile>structuint32be__t.html</anchorfile>
      <anchor>aa9b84997739748b152794ea565cef8d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>one</name>
      <anchorfile>structuint32be__t.html</anchorfile>
      <anchor>a68389fe4833ee93be30e26d4dfd2b1a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>two</name>
      <anchorfile>structuint32be__t.html</anchorfile>
      <anchor>a8d32d5bb5c9253425357556c36bb0173</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>three</name>
      <anchorfile>structuint32be__t.html</anchorfile>
      <anchor>acd0d30f8969258b12e2c331f4549c33b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>four</name>
      <anchorfile>structuint32be__t.html</anchorfile>
      <anchor>aebdf47903b412838ed84c0f432b1fb86</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>win32_pinout_uart</name>
    <filename>classwin32__pinout__uart.html</filename>
    <base>IUart</base>
    <member kind="function">
      <type></type>
      <name>win32_pinout_uart</name>
      <anchorfile>classwin32__pinout__uart.html</anchorfile>
      <anchor>ae4edf7418ceeac04b34c8a22a8fcb179</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~win32_pinout_uart</name>
      <anchorfile>classwin32__pinout__uart.html</anchorfile>
      <anchor>a6b02339b8be8e28f9495f1916652691c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>init</name>
      <anchorfile>classwin32__pinout__uart.html</anchorfile>
      <anchor>a64ab706574a9f7d4f47d1cab9cf6a350</anchor>
      <arglist>(const uint32_t Baudrate, const char *device, const bool UseRtsCts=IUart::NoRTSCTS)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deinit</name>
      <anchorfile>classwin32__pinout__uart.html</anchorfile>
      <anchor>aa93be1686585ca0d15136d466db6b40d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>Echo</name>
      <anchorfile>classwin32__pinout__uart.html</anchorfile>
      <anchor>a530c0a99571e84f4ba979b545d4cd035</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Echo</name>
      <anchorfile>classwin32__pinout__uart.html</anchorfile>
      <anchor>a3b7bab64402bba5339f42d8f0caaacb1</anchor>
      <arglist>(const bool e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dataready</name>
      <anchorfile>classwin32__pinout__uart.html</anchorfile>
      <anchor>ae707a6455d0d9fcb6988c14c7b3cfe76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getcqq</name>
      <anchorfile>classwin32__pinout__uart.html</anchorfile>
      <anchor>a00c01d4d8fd6c04e37808029e0257c7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>putcqq</name>
      <anchorfile>classwin32__pinout__uart.html</anchorfile>
      <anchor>a16c11a71b77901e9e8f302402fb5ffb6</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>purgeinput</name>
      <anchorfile>classwin32__pinout__uart.html</anchorfile>
      <anchor>addfda18290c143267c578057536c87cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flushoutput</name>
      <anchorfile>classwin32__pinout__uart.html</anchorfile>
      <anchor>ac5630cf2b87463e6ab3bf1b1a70fcf3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isopen</name>
      <anchorfile>classwin32__pinout__uart.html</anchorfile>
      <anchor>a3be2b3fe20d6ead4c0792309a8430f32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>HANDLE</type>
      <name>ComFileDescriptor</name>
      <anchorfile>classwin32__pinout__uart.html</anchorfile>
      <anchor>a0ccb0dd22e57a04f6e62312b4e877051</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>echo</name>
      <anchorfile>classwin32__pinout__uart.html</anchorfile>
      <anchor>af53be864ae0b2693427f226b7ced0152</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ads1258details</name>
    <filename>namespaceads1258details.html</filename>
    <class kind="union">ads1258details::ads1258status</class>
    <class kind="union">ads1258details::ads1258sample</class>
    <class kind="union">ads1258details::ads1258cmdheader</class>
    <class kind="union">ads1258details::config0register</class>
    <class kind="union">ads1258details::config1register</class>
    <class kind="union">ads1258details::muxschregister</class>
    <class kind="union">ads1258details::sysreadregister</class>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>CountsToVolts</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>ac86c4a65afef2109821adba8a146926c</anchor>
      <arglist>(const int32_t &amp;Counts, const double &amp;AdcVRef)</arglist>
    </member>
    <member kind="function">
      <type>union ads1258details::ads1258status</type>
      <name>__attribute__</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>ad69b89d96d223c044d342104f6f95ec3</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="variable">
      <type>const int32_t</type>
      <name>CountPosMax</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a94ec3917c6cfb04420e13489f9ab391e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int32_t</type>
      <name>CountPosVRef</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>ac0bc019df46f540b57dfc4260e4d6e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int32_t</type>
      <name>CountZero</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a47f79866dfb09e5c8615d4c00b1ab5bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int32_t</type>
      <name>CountNegVRef</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>aee4fd3c15a9f608cc178e0abfdbb54fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int32_t</type>
      <name>CountNegMin</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>aa0e9045f518b06349f0d72efae65d85e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int32_t</type>
      <name>CountVRefVccDenominator</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>ac996141ddc744ca3e72412ce9d842e0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int32_t</type>
      <name>CountGainDenominator</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>affcacf14e5afa779933ff71701b092cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>cmdtype_chanreaddirect</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a24a7cfc65ba0dc7ed65968e17b1d5301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>cmdtype_chanreadregister</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a39d8f5806160607bc56c341c14254b4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>cmdtype_registerread</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>aed20304b46d0f13e3ef6e316df9c7ac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>cmdtype_registerwrite</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>afe1addcf345788863c9e43affb716aca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>cmdtype_pulseconvert</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>aea10694ac8f1290304e0d3004dc3bb01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>cmdtype_reserved</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>ab2745bb8caa20705214d93e791820446</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>cmdtype_reset</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a8876f430cc3ff0feadce9b369acb6ca2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>cmdtype_chanreaddirectalt</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a5259cc039a7eda1e2bbe16702687cc7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>register_config0</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>addd34f78b79a8448adc902a97a44a87f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>register_config1</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a95b75e693aebd4d1273a358b36bf246b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>register_muxsch</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a49f05b321b9ad7604e92a93a07ae9265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>register_muxdif</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>ab5ba2e2b93dceddb2492c9cac049706a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>register_muxsg0</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a360abd691ec7a474fb749311f9627d4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>register_muxsg1</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>aa8b055500a099ab91fc9d8b249f3fe82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>register_sysread</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a5bc2cf9283c48876da3c9203a385ecea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>register_gpioc</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a7868e416beaaf746fd4411266f580b75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>register_gpiod</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>aae75b67e2e457e9d9482512db8df197b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>register_idnum</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>af34cf7bbfbcc9fac89abf091220be710</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_diff0</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>ad6dd0c00376acd4f3e43e00b3c99907d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_diff1</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a0e15738cb063644cbb9216298cda9df1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_diff2</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>ac155af35ae1612285fc06d04fe1cbabc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_diff3</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a456a00c3eb54198fde7de929cf73628d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_diff4</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>afce396f611c5e333eda61cc07c0dc081</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_diff5</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a4380d4c4d750f05f38f94aa7b8f07ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_diff6</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a496ad75c368e58a3bf80cb1d5d584e42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_diff7</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a83439930ce45c1bdaac87821cc54a3e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se0</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>aa0dc2b562b9e90964cdeb2fccaf1627a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se1</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>af2caeb8ddf836d4f54559bb6ef0d8ec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se2</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>aaba9fdb5a11301b8875bd55496768ba0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se3</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a04d2255100365d41d53d2e0869896b55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se4</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a8adde10e6ea86f3f43d99b7e8ca9ddf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se5</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>ac265d8a19337356f6bb490a7b5782540</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se6</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a1c594e601419345b06bfadc311ebb8ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se7</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a262a07edc5293f16fd851bf03aa03679</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se8</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>affef09c61ec30862725c24a709eff94c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se9</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a753373ad54627d1bbe20ce570a8e884a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se10</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>aa231ce40385fba5052a1a58c7dc7fe6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se11</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>ad1bfcf2160d76ca0c5c12754519cebfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se12</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a0b9c3d462d7159caa52bd8e55aeaac93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se13</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>aab776c2868d0935a10bb4a2f1874f798</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se14</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a1962625d026ebb93ba3363735f4218b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_se15</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a7ea79f36d850327fe172dcba5548700c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_offset</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a6f61fd3fb6c0608974cab6d803061203</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_zeroed</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a1443321c2f01d7eaa9779424191ea31e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_vcc</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>aa491d2ca26601f1948758ffe7ffbae8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_temp</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a985283d4173dbccb7b37a0e9a58adddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_gain</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>abc1198ef40a721271e06cb73eab9f973</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>chan_ref</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>ab0667e53d9af114a6a6be78fc6c37c57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint8_t</type>
      <name>ads1258numchannels</name>
      <anchorfile>namespaceads1258details.html</anchorfile>
      <anchor>a9f52a007170fa8cdcff306d109b8be99</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>lt244xdetails</name>
    <filename>namespacelt244xdetails.html</filename>
    <class kind="union">lt244xdetails::channel</class>
    <class kind="union">lt244xdetails::configregister</class>
    <class kind="union">lt244xdetails::lt244x_sample</class>
    <member kind="function">
      <type>union lt244xdetails::channel</type>
      <name>__attribute__</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>a19912fa47c0c2f76dd813fa1af42ba8c</anchor>
      <arglist>((__packed__))</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int32_t</type>
      <name>CountPosVRef</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>a3951b32a4c79c5c1739a34dd293a0726</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int32_t</type>
      <name>CountZero</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>ac56d195d7ba99aabebe8c06503861f85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int32_t</type>
      <name>CountNegVRef</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>a8300e1afaced3982afe5b16d432194e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>DataRateNoChange</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>a01305207e22fcb7553a95fa7f29cd1b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>DataRateFClkDiv64</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>a9108e24c537ff39cedbc24bffd39d19b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>DataRateFClkDiv128</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>ab00d315250014fe23a5576ff9a4d2b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>DataRateFClkDiv256</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>a1b522324cbbe0730dcf4da1b4bdc35ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>DataRateFClkDiv512</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>ae2db9955539adf03f472b157d020ad7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>DataRateFClkDiv1024</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>ae341e79c4377d64498c4e83b83a566ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>DataRateFClkDiv2048</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>a9411557168501388ae9e4d974d8a8267</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>DataRateFClkDiv4096</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>af35c2bd735fa3a0468f3c93b583ad761</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>DataRateFClkDiv8192</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>aa7eee7fa306a43a5129f3740d3669a9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>DataRateFClkDiv16384</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>a12df95270d32fbe2d60618da7464a372</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>DataRateFClkDiv32768_60Hz50HzNull</name>
      <anchorfile>namespacelt244xdetails.html</anchorfile>
      <anchor>a2ac3d2892620eaddc91b0395e04088b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
</tagfile>
