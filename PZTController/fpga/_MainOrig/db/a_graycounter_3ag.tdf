--a_graycounter CARRY_CHAIN="MANUAL" CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="MAX 10" WIDTH=7 aclr clk_en clock q sclr carry_chain_length=48 ignore_carry_buffers="OFF"
--VERSION_BEGIN 15.1 cbx_a_gray2bin 2015:10:14:18:59:15:SJ cbx_a_graycounter 2015:10:14:18:59:15:SJ cbx_cycloneii 2015:10:14:18:59:15:SJ cbx_mgl 2015:10:21:19:02:34:SJ cbx_stratix 2015:10:14:18:59:15:SJ cbx_stratixii 2015:10:14:18:59:15:SJ  VERSION_END


-- Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus Prime License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);

--synthesis_resources = lut 8 reg 8 
SUBDESIGN a_graycounter_3ag
( 
	aclr	:	input;
	clk_en	:	input;
	clock	:	input;
	q[6..0]	:	output;
	sclr	:	input;
) 
VARIABLE 
	cs3 : carry_sum;
	cs4a[6..0] : carry_sum;
	dffe1 : dffe;
	dffe2a[6..0] : dffe;
	cnt_en	: NODE;
	updown	: NODE;

BEGIN 
	cs3.cin = (cnt_en & (dffe1.q $ (! updown)));
	cs3.sin = ((! sclr) & (dffe1.q $ cnt_en));
	cs4a[].cin = ( B"0", (cs4a[4].cout & (! dffe2a[4].q)), (cs4a[3].cout & (! dffe2a[3].q)), (cs4a[2].cout & (! dffe2a[2].q)), (cs4a[1].cout & (! dffe2a[1].q)), (cs4a[0].cout & (! dffe2a[0].q)), (cnt_en & cs3.cout));
	cs4a[].sin = ( ((! sclr) & (dffe2a[6].q $ cs4a[5].cout)), ((! sclr) & (dffe2a[5].q $ (dffe2a[4].q & cs4a[4].cout))), ((! sclr) & (dffe2a[4].q $ (dffe2a[3].q & cs4a[3].cout))), ((! sclr) & (dffe2a[3].q $ (dffe2a[2].q & cs4a[2].cout))), ((! sclr) & (dffe2a[2].q $ (dffe2a[1].q & cs4a[1].cout))), ((! sclr) & (dffe2a[1].q $ (dffe2a[0].q & cs4a[0].cout))), ((! sclr) & ((cnt_en & (dffe2a[0].q $ (! cs3.cout))) # ((! cnt_en) & dffe2a[0].q))));
	dffe1.clk = clock;
	dffe1.clrn = (! aclr);
	dffe1.d = cs3.sout;
	dffe1.ena = clk_en;
	dffe2a[].clk = clock;
	dffe2a[].clrn = ( (! aclr), (! aclr), (! aclr), (! aclr), (! aclr), (! aclr), (! aclr));
	dffe2a[].d = cs4a[].sout;
	dffe2a[].ena = clk_en;
	cnt_en = VCC;
	q[] = dffe2a[].q;
	updown = VCC;
END;
--VALID FILE
